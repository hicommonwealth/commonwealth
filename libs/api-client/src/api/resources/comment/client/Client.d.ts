/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from '../../../../core';
import * as environments from '../../../../environments';
import * as CommonApi from '../../../index';
export declare namespace Comment {
  interface Options {
    environment?: core.Supplier<environments.CommonApiEnvironment | string>;
    apiKey: core.Supplier<string>;
    /** Override the address header */
    address?: core.Supplier<string | undefined>;
  }
  interface RequestOptions {
    /** The maximum time to wait for a response in seconds. */
    timeoutInSeconds?: number;
    /** The number of times to retry the request. Defaults to 2. */
    maxRetries?: number;
    /** A hook to abort the request. */
    abortSignal?: AbortSignal;
    /** Override the address header */
    address?: string | undefined;
  }
}
export declare class Comment {
  protected readonly _options: Comment.Options;
  constructor(_options: Comment.Options);
  /**
   * @param {CommonApi.GetCommentsRequest} request
   * @param {Comment.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.comment.getComments({
   *         threadId: 1
   *     })
   */
  getComments(
    request: CommonApi.GetCommentsRequest,
    requestOptions?: Comment.RequestOptions,
  ): Promise<CommonApi.GetCommentsResponse>;
  /**
   * @param {CommonApi.CreateCommentRequest} request
   * @param {Comment.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.comment.createComment({
   *         threadId: 1,
   *         text: "text"
   *     })
   */
  createComment(
    request: CommonApi.CreateCommentRequest,
    requestOptions?: Comment.RequestOptions,
  ): Promise<CommonApi.CreateCommentResponse>;
  /**
   * @param {CommonApi.UpdateCommentRequest} request
   * @param {Comment.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.comment.updateComment({
   *         commentId: 1,
   *         text: "text"
   *     })
   */
  updateComment(
    request: CommonApi.UpdateCommentRequest,
    requestOptions?: Comment.RequestOptions,
  ): Promise<CommonApi.UpdateCommentResponse>;
  /**
   * @param {CommonApi.DeleteCommentRequest} request
   * @param {Comment.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.comment.deleteComment({
   *         commentId: 1
   *     })
   */
  deleteComment(
    request: CommonApi.DeleteCommentRequest,
    requestOptions?: Comment.RequestOptions,
  ): Promise<CommonApi.DeleteCommentResponse>;
  protected _getCustomAuthorizationHeaders(): Promise<{
    'x-api-key': string;
  }>;
}
