/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __awaiter =
  (this && this.__awaiter) ||
  function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P
        ? value
        : new P(function (resolve) {
            resolve(value);
          });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator['throw'](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done
          ? resolve(result.value)
          : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
import urlJoin from 'url-join';
import * as core from '../../../../core';
import * as environments from '../../../../environments';
import * as errors from '../../../../errors/index';
import * as serializers from '../../../../serialization/index';
export class Comment {
  constructor(_options) {
    this._options = _options;
  }
  /**
   * @param {CommonApi.GetCommentsRequest} request
   * @param {Comment.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.comment.getComments({
   *         threadId: 1
   *     })
   */
  getComments(request, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const {
        limit,
        cursor,
        orderBy,
        orderDirection,
        threadId,
        commentId,
        includeUser,
        includeReactions,
      } = request;
      const _queryParams = {};
      if (limit != null) {
        _queryParams['limit'] = limit;
      }
      if (cursor != null) {
        _queryParams['cursor'] = cursor;
      }
      if (orderBy != null) {
        _queryParams['order_by'] = orderBy;
      }
      if (orderDirection != null) {
        _queryParams['order_direction'] = orderDirection;
      }
      _queryParams['thread_id'] = threadId.toString();
      if (commentId != null) {
        _queryParams['comment_id'] = commentId.toString();
      }
      if (includeUser != null) {
        _queryParams['include_user'] = includeUser.toString();
      }
      if (includeReactions != null) {
        _queryParams['include_reactions'] = includeReactions.toString();
      }
      const _response = yield core.fetcher({
        url: urlJoin(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.CommonApiEnvironment.Default,
          'GetComments',
        ),
        method: 'GET',
        headers: Object.assign(
          {
            address:
              (yield core.Supplier.get(this._options.address)) != null
                ? yield core.Supplier.get(this._options.address)
                : undefined,
            'X-Fern-Language': 'JavaScript',
            'X-Fern-Runtime': core.RUNTIME.type,
            'X-Fern-Runtime-Version': core.RUNTIME.version,
          },
          yield this._getCustomAuthorizationHeaders(),
        ),
        contentType: 'application/json',
        queryParameters: _queryParams,
        requestType: 'json',
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 60000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
        abortSignal:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.abortSignal,
      });
      if (_response.ok) {
        return serializers.GetCommentsResponse.parseOrThrow(_response.body, {
          unrecognizedObjectKeys: 'passthrough',
          allowUnrecognizedUnionMembers: true,
          allowUnrecognizedEnumValues: true,
          breadcrumbsPrefix: ['response'],
        });
      }
      if (_response.error.reason === 'status-code') {
        throw new errors.CommonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case 'non-json':
          throw new errors.CommonApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case 'timeout':
          throw new errors.CommonApiTimeoutError();
        case 'unknown':
          throw new errors.CommonApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   * @param {CommonApi.CreateCommentRequest} request
   * @param {Comment.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.comment.createComment({
   *         threadId: 1,
   *         text: "text"
   *     })
   */
  createComment(request, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const _response = yield core.fetcher({
        url: urlJoin(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.CommonApiEnvironment.Default,
          'CreateComment',
        ),
        method: 'POST',
        headers: Object.assign(
          {
            address:
              (yield core.Supplier.get(this._options.address)) != null
                ? yield core.Supplier.get(this._options.address)
                : undefined,
            'X-Fern-Language': 'JavaScript',
            'X-Fern-Runtime': core.RUNTIME.type,
            'X-Fern-Runtime-Version': core.RUNTIME.version,
          },
          yield this._getCustomAuthorizationHeaders(),
        ),
        contentType: 'application/json',
        requestType: 'json',
        body: serializers.CreateCommentRequest.jsonOrThrow(request, {
          unrecognizedObjectKeys: 'strip',
        }),
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 60000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
        abortSignal:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.abortSignal,
      });
      if (_response.ok) {
        return serializers.CreateCommentResponse.parseOrThrow(_response.body, {
          unrecognizedObjectKeys: 'passthrough',
          allowUnrecognizedUnionMembers: true,
          allowUnrecognizedEnumValues: true,
          breadcrumbsPrefix: ['response'],
        });
      }
      if (_response.error.reason === 'status-code') {
        throw new errors.CommonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case 'non-json':
          throw new errors.CommonApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case 'timeout':
          throw new errors.CommonApiTimeoutError();
        case 'unknown':
          throw new errors.CommonApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   * @param {CommonApi.UpdateCommentRequest} request
   * @param {Comment.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.comment.updateComment({
   *         commentId: 1,
   *         text: "text"
   *     })
   */
  updateComment(request, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const _response = yield core.fetcher({
        url: urlJoin(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.CommonApiEnvironment.Default,
          'UpdateComment',
        ),
        method: 'POST',
        headers: Object.assign(
          {
            address:
              (yield core.Supplier.get(this._options.address)) != null
                ? yield core.Supplier.get(this._options.address)
                : undefined,
            'X-Fern-Language': 'JavaScript',
            'X-Fern-Runtime': core.RUNTIME.type,
            'X-Fern-Runtime-Version': core.RUNTIME.version,
          },
          yield this._getCustomAuthorizationHeaders(),
        ),
        contentType: 'application/json',
        requestType: 'json',
        body: serializers.UpdateCommentRequest.jsonOrThrow(request, {
          unrecognizedObjectKeys: 'strip',
        }),
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 60000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
        abortSignal:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.abortSignal,
      });
      if (_response.ok) {
        return serializers.UpdateCommentResponse.parseOrThrow(_response.body, {
          unrecognizedObjectKeys: 'passthrough',
          allowUnrecognizedUnionMembers: true,
          allowUnrecognizedEnumValues: true,
          breadcrumbsPrefix: ['response'],
        });
      }
      if (_response.error.reason === 'status-code') {
        throw new errors.CommonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case 'non-json':
          throw new errors.CommonApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case 'timeout':
          throw new errors.CommonApiTimeoutError();
        case 'unknown':
          throw new errors.CommonApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   * @param {CommonApi.DeleteCommentRequest} request
   * @param {Comment.RequestOptions} requestOptions - Request-specific configuration.
   *
   * @example
   *     await client.comment.deleteComment({
   *         commentId: 1
   *     })
   */
  deleteComment(request, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const _response = yield core.fetcher({
        url: urlJoin(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.CommonApiEnvironment.Default,
          'DeleteComment',
        ),
        method: 'POST',
        headers: Object.assign(
          {
            address:
              (yield core.Supplier.get(this._options.address)) != null
                ? yield core.Supplier.get(this._options.address)
                : undefined,
            'X-Fern-Language': 'JavaScript',
            'X-Fern-Runtime': core.RUNTIME.type,
            'X-Fern-Runtime-Version': core.RUNTIME.version,
          },
          yield this._getCustomAuthorizationHeaders(),
        ),
        contentType: 'application/json',
        requestType: 'json',
        body: serializers.DeleteCommentRequest.jsonOrThrow(request, {
          unrecognizedObjectKeys: 'strip',
        }),
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 60000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
        abortSignal:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.abortSignal,
      });
      if (_response.ok) {
        return serializers.DeleteCommentResponse.parseOrThrow(_response.body, {
          unrecognizedObjectKeys: 'passthrough',
          allowUnrecognizedUnionMembers: true,
          allowUnrecognizedEnumValues: true,
          breadcrumbsPrefix: ['response'],
        });
      }
      if (_response.error.reason === 'status-code') {
        throw new errors.CommonApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case 'non-json':
          throw new errors.CommonApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case 'timeout':
          throw new errors.CommonApiTimeoutError();
        case 'unknown':
          throw new errors.CommonApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  _getCustomAuthorizationHeaders() {
    return __awaiter(this, void 0, void 0, function* () {
      const apiKeyValue = yield core.Supplier.get(this._options.apiKey);
      return { 'x-api-key': apiKeyValue };
    });
  }
}
