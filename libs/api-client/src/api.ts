/* tslint:disable */
/* eslint-disable */
/**
 * Common API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { AxiosInstance, AxiosPromise, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
import type { Configuration } from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import type { RequestArgs } from './base';
import {
  DUMMY_BASE_URL,
  assertParamExists,
  createRequestFunction,
  serializeDataIfNeeded,
  setOAuthToObject,
  setSearchParams,
  toPathString,
} from './common';
// @ts-ignore
import { BASE_PATH, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 *
 * @export
 * @interface CreateComment200Response
 */
export interface CreateComment200Response {
  /**
   *
   * @type {number}
   * @memberof CreateComment200Response
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof CreateComment200Response
   */
  thread_id: number;
  /**
   *
   * @type {number}
   * @memberof CreateComment200Response
   */
  address_id: number;
  /**
   *
   * @type {string}
   * @memberof CreateComment200Response
   */
  text: string;
  /**
   *
   * @type {string}
   * @memberof CreateComment200Response
   */
  plaintext: string;
  /**
   *
   * @type {string}
   * @memberof CreateComment200Response
   */
  parent_id?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateComment200Response
   */
  canvas_signed_data?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateComment200Response
   */
  canvas_msg_id?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateComment200Response
   */
  created_by?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateComment200Response
   */
  created_at?: string;
  /**
   *
   * @type {string}
   * @memberof CreateComment200Response
   */
  updated_at?: string;
  /**
   *
   * @type {string}
   * @memberof CreateComment200Response
   */
  deleted_at?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateComment200Response
   */
  marked_as_spam_at?: string | null;
  /**
   *
   * @type {GetComments200ResponseResultsInnerDiscordMeta}
   * @memberof CreateComment200Response
   */
  discord_meta?: GetComments200ResponseResultsInnerDiscordMeta | null;
  /**
   *
   * @type {number}
   * @memberof CreateComment200Response
   */
  reaction_count: number;
  /**
   *
   * @type {number}
   * @memberof CreateComment200Response
   */
  reaction_weights_sum?: number;
  /**
   *
   * @type {GetComments200ResponseResultsInnerAddress}
   * @memberof CreateComment200Response
   */
  Address?: GetComments200ResponseResultsInnerAddress | null;
  /**
   *
   * @type {GetComments200ResponseResultsInnerThread}
   * @memberof CreateComment200Response
   */
  Thread?: GetComments200ResponseResultsInnerThread | null;
  /**
   *
   * @type {GetComments200ResponseResultsInnerReaction}
   * @memberof CreateComment200Response
   */
  Reaction?: GetComments200ResponseResultsInnerReaction | null;
  /**
   *
   * @type {string}
   * @memberof CreateComment200Response
   */
  community_id: string;
}
/**
 *
 * @export
 * @interface CreateCommentReactionRequest
 */
export interface CreateCommentReactionRequest {
  /**
   *
   * @type {number}
   * @memberof CreateCommentReactionRequest
   */
  comment_id: number;
  /**
   *
   * @type {string}
   * @memberof CreateCommentReactionRequest
   */
  comment_msg_id: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommentReactionRequest
   */
  reaction: CreateCommentReactionRequestReactionEnum;
  /**
   *
   * @type {string}
   * @memberof CreateCommentReactionRequest
   */
  canvas_signed_data?: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommentReactionRequest
   */
  canvas_msg_id?: string;
}

export const CreateCommentReactionRequestReactionEnum = {
  Like: 'like',
} as const;

export type CreateCommentReactionRequestReactionEnum =
  (typeof CreateCommentReactionRequestReactionEnum)[keyof typeof CreateCommentReactionRequestReactionEnum];

/**
 *
 * @export
 * @interface CreateCommentRequest
 */
export interface CreateCommentRequest {
  /**
   *
   * @type {number}
   * @memberof CreateCommentRequest
   */
  thread_id: number;
  /**
   *
   * @type {string}
   * @memberof CreateCommentRequest
   */
  text: string;
  /**
   *
   * @type {number}
   * @memberof CreateCommentRequest
   */
  parent_id?: number;
  /**
   *
   * @type {string}
   * @memberof CreateCommentRequest
   */
  parent_msg_id?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommentRequest
   */
  canvas_signed_data?: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommentRequest
   */
  canvas_msg_id?: string;
  /**
   *
   * @type {CreateThreadRequestDiscordMeta}
   * @memberof CreateCommentRequest
   */
  discord_meta?: CreateThreadRequestDiscordMeta;
}
/**
 *
 * @export
 * @interface CreateCommunity200Response
 */
export interface CreateCommunity200Response {
  /**
   *
   * @type {CreateCommunity200ResponseCommunity}
   * @memberof CreateCommunity200Response
   */
  community: CreateCommunity200ResponseCommunity;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200Response
   */
  admin_address?: string;
}
/**
 *
 * @export
 * @interface CreateCommunity200ResponseCommunity
 */
export interface CreateCommunity200ResponseCommunity {
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunity
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunity
   */
  name: string;
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunity
   */
  chain_node_id?: number | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunity
   */
  default_symbol?: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunity
   */
  network?: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunity
   */
  base: CreateCommunity200ResponseCommunityBaseEnum;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunity
   */
  icon_url?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof CreateCommunity200ResponseCommunity
   */
  active: boolean;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunity
   */
  type?: CreateCommunity200ResponseCommunityTypeEnum;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunity
   */
  description?: string | null;
  /**
   *
   * @type {Array<CreateCommunity200ResponseCommunitySocialLinksInner>}
   * @memberof CreateCommunity200ResponseCommunity
   */
  social_links?: Array<CreateCommunity200ResponseCommunitySocialLinksInner>;
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunity
   */
  ss58_prefix?: number | null;
  /**
   *
   * @type {boolean}
   * @memberof CreateCommunity200ResponseCommunity
   */
  stages_enabled?: boolean;
  /**
   *
   * @type {Array<string>}
   * @memberof CreateCommunity200ResponseCommunity
   */
  custom_stages?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunity
   */
  custom_domain?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunity
   */
  block_explorer_ids?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof CreateCommunity200ResponseCommunity
   */
  collapsed_on_homepage?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CreateCommunity200ResponseCommunity
   */
  default_summary_view?: boolean | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunity
   */
  default_page?: CreateCommunity200ResponseCommunityDefaultPageEnum | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunity
   */
  has_homepage?: CreateCommunity200ResponseCommunityHasHomepageEnum | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunity
   */
  terms?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof CreateCommunity200ResponseCommunity
   */
  admin_only_polling?: boolean | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunity
   */
  bech32_prefix?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof CreateCommunity200ResponseCommunity
   */
  hide_projects?: boolean | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunity
   */
  token_name?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof CreateCommunity200ResponseCommunity
   */
  ce_verbose?: boolean | null;
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunity
   */
  discord_config_id?: number | null;
  /**
   *
   * @type {any}
   * @memberof CreateCommunity200ResponseCommunity
   */
  category?: any | null;
  /**
   *
   * @type {boolean}
   * @memberof CreateCommunity200ResponseCommunity
   */
  discord_bot_webhooks_enabled?: boolean | null;
  /**
   *
   * @type {boolean}
   * @memberof CreateCommunity200ResponseCommunity
   */
  directory_page_enabled?: boolean;
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunity
   */
  directory_page_chain_node_id?: number | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunity
   */
  namespace?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunity
   */
  namespace_address?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunity
   */
  redirect?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof CreateCommunity200ResponseCommunity
   */
  snapshot_spaces?: Array<string>;
  /**
   *
   * @type {boolean}
   * @memberof CreateCommunity200ResponseCommunity
   */
  include_in_digest_email?: boolean | null;
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunity
   */
  profile_count?: number | null;
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunity
   */
  lifetime_thread_count?: number;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunity
   */
  banner_text?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunity
   */
  created_at?: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunity
   */
  updated_at?: string;
  /**
   *
   * @type {Array<CreateCommunity200ResponseCommunityAddressesInner>}
   * @memberof CreateCommunity200ResponseCommunity
   */
  Addresses?: Array<CreateCommunity200ResponseCommunityAddressesInner>;
  /**
   *
   * @type {Array<CreateCommunity200ResponseCommunityCommunityStakesInner>}
   * @memberof CreateCommunity200ResponseCommunity
   */
  CommunityStakes?: Array<CreateCommunity200ResponseCommunityCommunityStakesInner> | null;
  /**
   *
   * @type {Array<CreateCommunity200ResponseCommunityCommunityTagsInner>}
   * @memberof CreateCommunity200ResponseCommunity
   */
  CommunityTags?: Array<CreateCommunity200ResponseCommunityCommunityTagsInner> | null;
  /**
   *
   * @type {CreateCommunity200ResponseCommunityChainNode}
   * @memberof CreateCommunity200ResponseCommunity
   */
  ChainNode?: CreateCommunity200ResponseCommunityChainNode | null;
  /**
   *
   * @type {Array<CreateCommunity200ResponseCommunityTopicsInner>}
   * @memberof CreateCommunity200ResponseCommunity
   */
  topics?: Array<CreateCommunity200ResponseCommunityTopicsInner>;
  /**
   *
   * @type {Array<CreateCommunity200ResponseCommunityGroupsInner>}
   * @memberof CreateCommunity200ResponseCommunity
   */
  groups?: Array<CreateCommunity200ResponseCommunityGroupsInner>;
  /**
   *
   * @type {Array<CreateCommunity200ResponseCommunityContestManagersInner>}
   * @memberof CreateCommunity200ResponseCommunity
   */
  contest_managers?: Array<CreateCommunity200ResponseCommunityContestManagersInner>;
}

export const CreateCommunity200ResponseCommunityBaseEnum = {
  Cosmos: 'cosmos',
  Substrate: 'substrate',
  Ethereum: 'ethereum',
  Near: 'near',
  Solana: 'solana',
} as const;

export type CreateCommunity200ResponseCommunityBaseEnum =
  (typeof CreateCommunity200ResponseCommunityBaseEnum)[keyof typeof CreateCommunity200ResponseCommunityBaseEnum];
export const CreateCommunity200ResponseCommunityTypeEnum = {
  Chain: 'chain',
  Dao: 'dao',
  Token: 'token',
  Offchain: 'offchain',
} as const;

export type CreateCommunity200ResponseCommunityTypeEnum =
  (typeof CreateCommunity200ResponseCommunityTypeEnum)[keyof typeof CreateCommunity200ResponseCommunityTypeEnum];
export const CreateCommunity200ResponseCommunityDefaultPageEnum = {
  DefaultAllDiscussionsView: 'default_all_discussions_view',
  DefaultSummaryView: 'default_summary_view',
  Homepage: 'homepage',
} as const;

export type CreateCommunity200ResponseCommunityDefaultPageEnum =
  (typeof CreateCommunity200ResponseCommunityDefaultPageEnum)[keyof typeof CreateCommunity200ResponseCommunityDefaultPageEnum];
export const CreateCommunity200ResponseCommunityHasHomepageEnum = {
  True: 'true',
  False: 'false',
} as const;

export type CreateCommunity200ResponseCommunityHasHomepageEnum =
  (typeof CreateCommunity200ResponseCommunityHasHomepageEnum)[keyof typeof CreateCommunity200ResponseCommunityHasHomepageEnum];

/**
 *
 * @export
 * @interface CreateCommunity200ResponseCommunityAddressesInner
 */
export interface CreateCommunity200ResponseCommunityAddressesInner {
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityAddressesInner
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityAddressesInner
   */
  address: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityAddressesInner
   */
  community_id: string;
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityAddressesInner
   */
  user_id?: number | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityAddressesInner
   */
  verification_token?: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityAddressesInner
   */
  verification_token_expires?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityAddressesInner
   */
  verified?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityAddressesInner
   */
  last_active?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof CreateCommunity200ResponseCommunityAddressesInner
   */
  ghost_address?: boolean;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityAddressesInner
   */
  wallet_id?: CreateCommunity200ResponseCommunityAddressesInnerWalletIdEnum | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityAddressesInner
   */
  block_info?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof CreateCommunity200ResponseCommunityAddressesInner
   */
  is_user_default?: boolean;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityAddressesInner
   */
  role?: CreateCommunity200ResponseCommunityAddressesInnerRoleEnum;
  /**
   *
   * @type {boolean}
   * @memberof CreateCommunity200ResponseCommunityAddressesInner
   */
  is_banned?: boolean;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityAddressesInner
   */
  hex?: string | null;
  /**
   *
   * @type {CreateCommunity200ResponseCommunityAddressesInnerUser}
   * @memberof CreateCommunity200ResponseCommunityAddressesInner
   */
  User?: CreateCommunity200ResponseCommunityAddressesInnerUser;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityAddressesInner
   */
  created_at?: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityAddressesInner
   */
  updated_at?: string;
}

export const CreateCommunity200ResponseCommunityAddressesInnerWalletIdEnum = {
  Magic: 'magic',
  Polkadot: 'polkadot',
  Metamask: 'metamask',
  Walletconnect: 'walletconnect',
  KeplrEthereum: 'keplr-ethereum',
  Keplr: 'keplr',
  Leap: 'leap',
  Near: 'near',
  Terrastation: 'terrastation',
  TerraWalletconnect: 'terra-walletconnect',
  CosmMetamask: 'cosm-metamask',
  Phantom: 'phantom',
  Coinbase: 'coinbase',
} as const;

export type CreateCommunity200ResponseCommunityAddressesInnerWalletIdEnum =
  (typeof CreateCommunity200ResponseCommunityAddressesInnerWalletIdEnum)[keyof typeof CreateCommunity200ResponseCommunityAddressesInnerWalletIdEnum];
export const CreateCommunity200ResponseCommunityAddressesInnerRoleEnum = {
  Admin: 'admin',
  Moderator: 'moderator',
  Member: 'member',
} as const;

export type CreateCommunity200ResponseCommunityAddressesInnerRoleEnum =
  (typeof CreateCommunity200ResponseCommunityAddressesInnerRoleEnum)[keyof typeof CreateCommunity200ResponseCommunityAddressesInnerRoleEnum];

/**
 *
 * @export
 * @interface CreateCommunity200ResponseCommunityAddressesInnerUser
 */
export interface CreateCommunity200ResponseCommunityAddressesInnerUser {
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityAddressesInnerUser
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityAddressesInnerUser
   */
  email?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof CreateCommunity200ResponseCommunityAddressesInnerUser
   */
  isAdmin?: boolean | null;
  /**
   *
   * @type {boolean}
   * @memberof CreateCommunity200ResponseCommunityAddressesInnerUser
   */
  disableRichText?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CreateCommunity200ResponseCommunityAddressesInnerUser
   */
  emailVerified?: boolean | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityAddressesInnerUser
   */
  selected_community_id?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityAddressesInnerUser
   */
  emailNotificationInterval?: CreateCommunity200ResponseCommunityAddressesInnerUserEmailNotificationIntervalEnum;
  /**
   *
   * @type {boolean}
   * @memberof CreateCommunity200ResponseCommunityAddressesInnerUser
   */
  promotional_emails_enabled?: boolean | null;
  /**
   *
   * @type {boolean}
   * @memberof CreateCommunity200ResponseCommunityAddressesInnerUser
   */
  is_welcome_onboard_flow_complete?: boolean;
  /**
   *
   * @type {CreateCommunity200ResponseCommunityAddressesInnerUserProfile}
   * @memberof CreateCommunity200ResponseCommunityAddressesInnerUser
   */
  profile: CreateCommunity200ResponseCommunityAddressesInnerUserProfile;
  /**
   *
   * @type {Array<CreateCommunity200ResponseCommunityAddressesInnerUserProfileTagsInner>}
   * @memberof CreateCommunity200ResponseCommunityAddressesInnerUser
   */
  ProfileTags?: Array<CreateCommunity200ResponseCommunityAddressesInnerUserProfileTagsInner>;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityAddressesInnerUser
   */
  created_at?: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityAddressesInnerUser
   */
  updated_at?: string;
}

export const CreateCommunity200ResponseCommunityAddressesInnerUserEmailNotificationIntervalEnum =
  {
    Weekly: 'weekly',
    Never: 'never',
  } as const;

export type CreateCommunity200ResponseCommunityAddressesInnerUserEmailNotificationIntervalEnum =
  (typeof CreateCommunity200ResponseCommunityAddressesInnerUserEmailNotificationIntervalEnum)[keyof typeof CreateCommunity200ResponseCommunityAddressesInnerUserEmailNotificationIntervalEnum];

/**
 *
 * @export
 * @interface CreateCommunity200ResponseCommunityAddressesInnerUserProfile
 */
export interface CreateCommunity200ResponseCommunityAddressesInnerUserProfile {
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityAddressesInnerUserProfile
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityAddressesInnerUserProfile
   */
  email?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityAddressesInnerUserProfile
   */
  website?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityAddressesInnerUserProfile
   */
  bio?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityAddressesInnerUserProfile
   */
  avatar_url?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityAddressesInnerUserProfile
   */
  slug?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof CreateCommunity200ResponseCommunityAddressesInnerUserProfile
   */
  socials?: Array<string> | null;
  /**
   *
   * @type {CreateCommunity200ResponseCommunityAddressesInnerUserProfileBackgroundImage}
   * @memberof CreateCommunity200ResponseCommunityAddressesInnerUserProfile
   */
  background_image?: CreateCommunity200ResponseCommunityAddressesInnerUserProfileBackgroundImage | null;
}
/**
 *
 * @export
 * @interface CreateCommunity200ResponseCommunityAddressesInnerUserProfileBackgroundImage
 */
export interface CreateCommunity200ResponseCommunityAddressesInnerUserProfileBackgroundImage {
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityAddressesInnerUserProfileBackgroundImage
   */
  url?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityAddressesInnerUserProfileBackgroundImage
   */
  imageBehavior?: string | null;
}
/**
 *
 * @export
 * @interface CreateCommunity200ResponseCommunityAddressesInnerUserProfileTagsInner
 */
export interface CreateCommunity200ResponseCommunityAddressesInnerUserProfileTagsInner {
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityAddressesInnerUserProfileTagsInner
   */
  user_id: number;
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityAddressesInnerUserProfileTagsInner
   */
  tag_id: number;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityAddressesInnerUserProfileTagsInner
   */
  created_at?: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityAddressesInnerUserProfileTagsInner
   */
  updated_at?: string;
}
/**
 *
 * @export
 * @interface CreateCommunity200ResponseCommunityChainNode
 */
export interface CreateCommunity200ResponseCommunityChainNode {
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityChainNode
   */
  id?: number | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityChainNode
   */
  url?: string | null;
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityChainNode
   */
  eth_chain_id?: number | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityChainNode
   */
  alt_wallet_url?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityChainNode
   */
  private_url?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityChainNode
   */
  balance_type?: CreateCommunity200ResponseCommunityChainNodeBalanceTypeEnum | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityChainNode
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityChainNode
   */
  description?: string | null;
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityChainNode
   */
  ss58?: number | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityChainNode
   */
  bech32?: string | null;
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityChainNode
   */
  slip44?: number | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityChainNode
   */
  cosmos_chain_id?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityChainNode
   */
  cosmos_gov_version?: CreateCommunity200ResponseCommunityChainNodeCosmosGovVersionEnum | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityChainNode
   */
  health?: CreateCommunity200ResponseCommunityChainNodeHealthEnum | null;
  /**
   *
   * @type {Array<CreateCommunity200ResponseCommunityChainNodeContractsInner>}
   * @memberof CreateCommunity200ResponseCommunityChainNode
   */
  contracts?: Array<CreateCommunity200ResponseCommunityChainNodeContractsInner> | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityChainNode
   */
  block_explorer?: string | null;
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityChainNode
   */
  max_ce_block_range?: number | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityChainNode
   */
  created_at?: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityChainNode
   */
  updated_at?: string;
}

export const CreateCommunity200ResponseCommunityChainNodeBalanceTypeEnum = {
  Terra: 'terra',
  Ethereum: 'ethereum',
  Solana: 'solana',
  Cosmos: 'cosmos',
  Near: 'near',
  Substrate: 'substrate',
} as const;

export type CreateCommunity200ResponseCommunityChainNodeBalanceTypeEnum =
  (typeof CreateCommunity200ResponseCommunityChainNodeBalanceTypeEnum)[keyof typeof CreateCommunity200ResponseCommunityChainNodeBalanceTypeEnum];
export const CreateCommunity200ResponseCommunityChainNodeCosmosGovVersionEnum =
  {
    V1: 'v1',
    V1beta1: 'v1beta1',
    V1beta1AttemptFailed: 'v1beta1-attempt-failed',
    V1AttemptFailed: 'v1-attempt-failed',
  } as const;

export type CreateCommunity200ResponseCommunityChainNodeCosmosGovVersionEnum =
  (typeof CreateCommunity200ResponseCommunityChainNodeCosmosGovVersionEnum)[keyof typeof CreateCommunity200ResponseCommunityChainNodeCosmosGovVersionEnum];
export const CreateCommunity200ResponseCommunityChainNodeHealthEnum = {
  Failed: 'failed',
  Healthy: 'healthy',
} as const;

export type CreateCommunity200ResponseCommunityChainNodeHealthEnum =
  (typeof CreateCommunity200ResponseCommunityChainNodeHealthEnum)[keyof typeof CreateCommunity200ResponseCommunityChainNodeHealthEnum];

/**
 *
 * @export
 * @interface CreateCommunity200ResponseCommunityChainNodeContractsInner
 */
export interface CreateCommunity200ResponseCommunityChainNodeContractsInner {
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityChainNodeContractsInner
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityChainNodeContractsInner
   */
  address: string;
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityChainNodeContractsInner
   */
  chain_node_id: number;
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityChainNodeContractsInner
   */
  abi_id?: number | null;
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityChainNodeContractsInner
   */
  decimals?: number;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityChainNodeContractsInner
   */
  token_name?: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityChainNodeContractsInner
   */
  symbol?: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityChainNodeContractsInner
   */
  type: string;
  /**
   *
   * @type {boolean}
   * @memberof CreateCommunity200ResponseCommunityChainNodeContractsInner
   */
  is_factory?: boolean;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityChainNodeContractsInner
   */
  nickname?: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityChainNodeContractsInner
   */
  created_at?: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityChainNodeContractsInner
   */
  updated_at?: string;
}
/**
 *
 * @export
 * @interface CreateCommunity200ResponseCommunityCommunityStakesInner
 */
export interface CreateCommunity200ResponseCommunityCommunityStakesInner {
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityCommunityStakesInner
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityCommunityStakesInner
   */
  community_id: string;
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityCommunityStakesInner
   */
  stake_id?: number;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityCommunityStakesInner
   */
  stake_token?: string;
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityCommunityStakesInner
   */
  vote_weight?: number;
  /**
   *
   * @type {boolean}
   * @memberof CreateCommunity200ResponseCommunityCommunityStakesInner
   */
  stake_enabled?: boolean;
  /**
   *
   * @type {Array<CreateCommunity200ResponseCommunityCommunityStakesInnerStakeTransactionsInner>}
   * @memberof CreateCommunity200ResponseCommunityCommunityStakesInner
   */
  StakeTransactions?: Array<CreateCommunity200ResponseCommunityCommunityStakesInnerStakeTransactionsInner> | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityCommunityStakesInner
   */
  created_at?: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityCommunityStakesInner
   */
  updated_at?: string;
}
/**
 *
 * @export
 * @interface CreateCommunity200ResponseCommunityCommunityStakesInnerStakeTransactionsInner
 */
export interface CreateCommunity200ResponseCommunityCommunityStakesInnerStakeTransactionsInner {
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityCommunityStakesInnerStakeTransactionsInner
   */
  transaction_hash: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityCommunityStakesInnerStakeTransactionsInner
   */
  community_id: string;
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityCommunityStakesInnerStakeTransactionsInner
   */
  stake_id?: number;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityCommunityStakesInnerStakeTransactionsInner
   */
  address: string;
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityCommunityStakesInnerStakeTransactionsInner
   */
  stake_amount: number;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityCommunityStakesInnerStakeTransactionsInner
   */
  stake_price?: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityCommunityStakesInnerStakeTransactionsInner
   */
  stake_direction: CreateCommunity200ResponseCommunityCommunityStakesInnerStakeTransactionsInnerStakeDirectionEnum;
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityCommunityStakesInnerStakeTransactionsInner
   */
  timestamp: number;
}

export const CreateCommunity200ResponseCommunityCommunityStakesInnerStakeTransactionsInnerStakeDirectionEnum =
  {
    Buy: 'buy',
    Sell: 'sell',
  } as const;

export type CreateCommunity200ResponseCommunityCommunityStakesInnerStakeTransactionsInnerStakeDirectionEnum =
  (typeof CreateCommunity200ResponseCommunityCommunityStakesInnerStakeTransactionsInnerStakeDirectionEnum)[keyof typeof CreateCommunity200ResponseCommunityCommunityStakesInnerStakeTransactionsInnerStakeDirectionEnum];

/**
 *
 * @export
 * @interface CreateCommunity200ResponseCommunityCommunityTagsInner
 */
export interface CreateCommunity200ResponseCommunityCommunityTagsInner {
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityCommunityTagsInner
   */
  community_id: string;
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityCommunityTagsInner
   */
  tag_id: number;
  /**
   *
   * @type {CreateCommunity200ResponseCommunityCommunityTagsInnerTag}
   * @memberof CreateCommunity200ResponseCommunityCommunityTagsInner
   */
  Tag?: CreateCommunity200ResponseCommunityCommunityTagsInnerTag | null;
}
/**
 *
 * @export
 * @interface CreateCommunity200ResponseCommunityCommunityTagsInnerTag
 */
export interface CreateCommunity200ResponseCommunityCommunityTagsInnerTag {
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityCommunityTagsInnerTag
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityCommunityTagsInnerTag
   */
  name: string;
}
/**
 * On-Chain Contest Manager
 * @export
 * @interface CreateCommunity200ResponseCommunityContestManagersInner
 */
export interface CreateCommunity200ResponseCommunityContestManagersInner {
  /**
   * On-Chain contest manager address
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInner
   */
  contest_address: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInner
   */
  community_id: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInner
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInner
   */
  image_url?: string | null;
  /**
   * Provided by admin on creation when stake funds are not used
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInner
   */
  funding_token_address?: string | null;
  /**
   * Percentage of pool used for prizes in recurring contests
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInner
   */
  prize_percentage?: number | null;
  /**
   * Sorted array of percentages for prize, from first to last
   * @type {Array<number>}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInner
   */
  payout_structure: Array<number>;
  /**
   * Recurring contest interval, 0 when one-off
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInner
   */
  interval: number;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInner
   */
  ticker?: string;
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInner
   */
  decimals?: number;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInner
   */
  created_at: string;
  /**
   * Flags when contest policy is cancelled by admin
   * @type {boolean}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInner
   */
  cancelled?: boolean | null;
  /**
   * Flags when the one-off contest has ended and rollover was completed
   * @type {boolean}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInner
   */
  ended?: boolean | null;
  /**
   *
   * @type {Array<CreateCommunity200ResponseCommunityTopicsInner>}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInner
   */
  topics?: Array<CreateCommunity200ResponseCommunityTopicsInner> | null;
  /**
   *
   * @type {Array<CreateCommunity200ResponseCommunityContestManagersInnerContestsInner>}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInner
   */
  contests?: Array<CreateCommunity200ResponseCommunityContestManagersInnerContestsInner> | null;
}
/**
 * On-Chain contest instance
 * @export
 * @interface CreateCommunity200ResponseCommunityContestManagersInnerContestsInner
 */
export interface CreateCommunity200ResponseCommunityContestManagersInnerContestsInner {
  /**
   * On-Chain contest manager address
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInnerContestsInner
   */
  contest_address: string;
  /**
   * On-Chain contest id, 0 when one-off
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInnerContestsInner
   */
  contest_id: number;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInnerContestsInner
   */
  start_time: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInnerContestsInner
   */
  end_time: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInnerContestsInner
   */
  score_updated_at?: string | null;
  /**
   * Contest score, sorted from first to last
   * @type {Array<CreateCommunity200ResponseCommunityContestManagersInnerContestsInnerScoreInner>}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInnerContestsInner
   */
  score?: Array<CreateCommunity200ResponseCommunityContestManagersInnerContestsInnerScoreInner> | null;
  /**
   *
   * @type {Array<CreateCommunity200ResponseCommunityContestManagersInnerContestsInnerActionsInner>}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInnerContestsInner
   */
  actions?: Array<CreateCommunity200ResponseCommunityContestManagersInnerContestsInnerActionsInner> | null;
}
/**
 * On-Chain content related actions on contest instance
 * @export
 * @interface CreateCommunity200ResponseCommunityContestManagersInnerContestsInnerActionsInner
 */
export interface CreateCommunity200ResponseCommunityContestManagersInnerContestsInnerActionsInner {
  /**
   * On-Chain contest manager address
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInnerContestsInnerActionsInner
   */
  contest_address: string;
  /**
   * On-Chain contest id, 0 when one-off
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInnerContestsInnerActionsInner
   */
  contest_id: number;
  /**
   * On-Chain content id, 0 when adding
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInnerContestsInnerActionsInner
   */
  content_id: number;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInnerContestsInnerActionsInner
   */
  actor_address: string;
  /**
   * Type of content action
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInnerContestsInnerActionsInner
   */
  action: CreateCommunity200ResponseCommunityContestManagersInnerContestsInnerActionsInnerActionEnum;
  /**
   * Content url
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInnerContestsInnerActionsInner
   */
  content_url?: string | null;
  /**
   * Thread id mapped from content url
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInnerContestsInnerActionsInner
   */
  thread_id?: number | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInnerContestsInnerActionsInner
   */
  thread_title?: string | null;
  /**
   * Voting power of address when action was recorded
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInnerContestsInnerActionsInner
   */
  voting_power: number;
  /**
   * Date-time when action was recorded
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInnerContestsInnerActionsInner
   */
  created_at: string;
}

export const CreateCommunity200ResponseCommunityContestManagersInnerContestsInnerActionsInnerActionEnum =
  {
    Added: 'added',
    Upvoted: 'upvoted',
  } as const;

export type CreateCommunity200ResponseCommunityContestManagersInnerContestsInnerActionsInnerActionEnum =
  (typeof CreateCommunity200ResponseCommunityContestManagersInnerContestsInnerActionsInnerActionEnum)[keyof typeof CreateCommunity200ResponseCommunityContestManagersInnerContestsInnerActionsInnerActionEnum];

/**
 *
 * @export
 * @interface CreateCommunity200ResponseCommunityContestManagersInnerContestsInnerScoreInner
 */
export interface CreateCommunity200ResponseCommunityContestManagersInnerContestsInnerScoreInner {
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInnerContestsInnerScoreInner
   */
  creator_address: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInnerContestsInnerScoreInner
   */
  content_id: string;
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInnerContestsInnerScoreInner
   */
  votes: number;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInnerContestsInnerScoreInner
   */
  prize: string;
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityContestManagersInnerContestsInnerScoreInner
   */
  tickerPrize?: number;
}
/**
 *
 * @export
 * @interface CreateCommunity200ResponseCommunityGroupsInner
 */
export interface CreateCommunity200ResponseCommunityGroupsInner {
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityGroupsInner
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityGroupsInner
   */
  community_id: string;
  /**
   *
   * @type {CreateCommunity200ResponseCommunityGroupsInnerMetadata}
   * @memberof CreateCommunity200ResponseCommunityGroupsInner
   */
  metadata: CreateCommunity200ResponseCommunityGroupsInnerMetadata;
  /**
   *
   * @type {Array<CreateCommunity200ResponseCommunityGroupsInnerRequirementsInner>}
   * @memberof CreateCommunity200ResponseCommunityGroupsInner
   */
  requirements: Array<CreateCommunity200ResponseCommunityGroupsInnerRequirementsInner>;
  /**
   *
   * @type {boolean}
   * @memberof CreateCommunity200ResponseCommunityGroupsInner
   */
  is_system_managed?: boolean;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityGroupsInner
   */
  created_at?: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityGroupsInner
   */
  updated_at?: string;
}
/**
 *
 * @export
 * @interface CreateCommunity200ResponseCommunityGroupsInnerMetadata
 */
export interface CreateCommunity200ResponseCommunityGroupsInnerMetadata {
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityGroupsInnerMetadata
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityGroupsInnerMetadata
   */
  description: string;
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityGroupsInnerMetadata
   */
  required_requirements?: number | null;
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityGroupsInnerMetadata
   */
  membership_ttl?: number | null;
}
/**
 *
 * @export
 * @interface CreateCommunity200ResponseCommunityGroupsInnerRequirementsInner
 */
export interface CreateCommunity200ResponseCommunityGroupsInnerRequirementsInner {
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInner
   */
  rule: CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerRuleEnum;
  /**
   *
   * @type {CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOf1Data}
   * @memberof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInner
   */
  data: CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOf1Data;
}

export const CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerRuleEnum =
  {
    Allow: 'allow',
  } as const;

export type CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerRuleEnum =
  (typeof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerRuleEnum)[keyof typeof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerRuleEnum];

/**
 *
 * @export
 * @interface CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOf
 */
export interface CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOf {
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOf
   */
  rule: CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfRuleEnum;
  /**
   *
   * @type {CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfData}
   * @memberof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOf
   */
  data: CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfData;
}

export const CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfRuleEnum =
  {
    Threshold: 'threshold',
  } as const;

export type CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfRuleEnum =
  (typeof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfRuleEnum)[keyof typeof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfRuleEnum];

/**
 *
 * @export
 * @interface CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOf1
 */
export interface CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOf1 {
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOf1
   */
  rule: CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOf1RuleEnum;
  /**
   *
   * @type {CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOf1Data}
   * @memberof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOf1
   */
  data: CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOf1Data;
}

export const CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOf1RuleEnum =
  {
    Allow: 'allow',
  } as const;

export type CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOf1RuleEnum =
  (typeof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOf1RuleEnum)[keyof typeof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOf1RuleEnum];

/**
 *
 * @export
 * @interface CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOf1Data
 */
export interface CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOf1Data {
  /**
   *
   * @type {Array<string>}
   * @memberof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOf1Data
   */
  allow: Array<string>;
}
/**
 *
 * @export
 * @interface CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfData
 */
export interface CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfData {
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfData
   */
  threshold: string;
  /**
   *
   * @type {CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSource}
   * @memberof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfData
   */
  source: CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSource;
}
/**
 *
 * @export
 * @interface CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSource
 */
export interface CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSource {
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSource
   */
  source_type: CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceSourceTypeEnum;
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSource
   */
  evm_chain_id: number;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSource
   */
  contract_address: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSource
   */
  token_id?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSource
   */
  cosmos_chain_id: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSource
   */
  token_symbol: string;
}

export const CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceSourceTypeEnum =
  {
    Cw721: 'cw721',
    Cw20: 'cw20',
  } as const;

export type CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceSourceTypeEnum =
  (typeof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceSourceTypeEnum)[keyof typeof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceSourceTypeEnum];

/**
 *
 * @export
 * @interface CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf
 */
export interface CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf {
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf
   */
  source_type: CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOfSourceTypeEnum;
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf
   */
  evm_chain_id: number;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf
   */
  contract_address: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf
   */
  token_id?: string | null;
}

export const CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOfSourceTypeEnum =
  {
    Erc20: 'erc20',
    Erc721: 'erc721',
    Erc1155: 'erc1155',
    Spl: 'spl',
  } as const;

export type CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOfSourceTypeEnum =
  (typeof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOfSourceTypeEnum)[keyof typeof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOfSourceTypeEnum];

/**
 *
 * @export
 * @interface CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf1
 */
export interface CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf1 {
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf1
   */
  source_type: CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf1SourceTypeEnum;
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf1
   */
  evm_chain_id: number;
}

export const CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf1SourceTypeEnum =
  {
    EthNative: 'eth_native',
  } as const;

export type CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf1SourceTypeEnum =
  (typeof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf1SourceTypeEnum)[keyof typeof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf1SourceTypeEnum];

/**
 *
 * @export
 * @interface CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf2
 */
export interface CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf2 {
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf2
   */
  source_type: CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf2SourceTypeEnum;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf2
   */
  cosmos_chain_id: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf2
   */
  token_symbol: string;
}

export const CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf2SourceTypeEnum =
  {
    CosmosNative: 'cosmos_native',
  } as const;

export type CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf2SourceTypeEnum =
  (typeof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf2SourceTypeEnum)[keyof typeof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf2SourceTypeEnum];

/**
 *
 * @export
 * @interface CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf3
 */
export interface CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf3 {
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf3
   */
  source_type: CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf3SourceTypeEnum;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf3
   */
  cosmos_chain_id: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf3
   */
  contract_address: string;
}

export const CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf3SourceTypeEnum =
  {
    Cw721: 'cw721',
    Cw20: 'cw20',
  } as const;

export type CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf3SourceTypeEnum =
  (typeof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf3SourceTypeEnum)[keyof typeof CreateCommunity200ResponseCommunityGroupsInnerRequirementsInnerAnyOfDataSourceAnyOf3SourceTypeEnum];

/**
 *
 * @export
 * @interface CreateCommunity200ResponseCommunitySocialLinksInner
 */
export interface CreateCommunity200ResponseCommunitySocialLinksInner {}
/**
 *
 * @export
 * @interface CreateCommunity200ResponseCommunityTopicsInner
 */
export interface CreateCommunity200ResponseCommunityTopicsInner {
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityTopicsInner
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityTopicsInner
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityTopicsInner
   */
  community_id: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityTopicsInner
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityTopicsInner
   */
  telegram?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof CreateCommunity200ResponseCommunityTopicsInner
   */
  featured_in_sidebar?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CreateCommunity200ResponseCommunityTopicsInner
   */
  featured_in_new_post?: boolean;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityTopicsInner
   */
  default_offchain_template?: string | null;
  /**
   *
   * @type {number}
   * @memberof CreateCommunity200ResponseCommunityTopicsInner
   */
  order?: number | null;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityTopicsInner
   */
  channel_id?: string | null;
  /**
   *
   * @type {Array<number>}
   * @memberof CreateCommunity200ResponseCommunityTopicsInner
   */
  group_ids?: Array<number>;
  /**
   *
   * @type {string}
   * @memberof CreateCommunity200ResponseCommunityTopicsInner
   */
  default_offchain_template_backup?: string | null;
}
/**
 *
 * @export
 * @interface CreateCommunityDefaultResponse
 */
export interface CreateCommunityDefaultResponse {
  /**
   *
   * @type {string}
   * @memberof CreateCommunityDefaultResponse
   */
  message: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunityDefaultResponse
   */
  code: string;
  /**
   *
   * @type {Array<CreateCommunityDefaultResponseIssuesInner>}
   * @memberof CreateCommunityDefaultResponse
   */
  issues?: Array<CreateCommunityDefaultResponseIssuesInner>;
}
/**
 *
 * @export
 * @interface CreateCommunityDefaultResponseIssuesInner
 */
export interface CreateCommunityDefaultResponseIssuesInner {
  /**
   *
   * @type {string}
   * @memberof CreateCommunityDefaultResponseIssuesInner
   */
  message: string;
}
/**
 *
 * @export
 * @interface CreateCommunityRequest
 */
export interface CreateCommunityRequest {
  /**
   *
   * @type {string}
   * @memberof CreateCommunityRequest
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunityRequest
   */
  name: string;
  /**
   *
   * @type {number}
   * @memberof CreateCommunityRequest
   */
  chain_node_id?: number;
  /**
   *
   * @type {string}
   * @memberof CreateCommunityRequest
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunityRequest
   */
  icon_url?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof CreateCommunityRequest
   */
  social_links?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof CreateCommunityRequest
   */
  tags?: Array<string>;
  /**
   *
   * @type {boolean}
   * @memberof CreateCommunityRequest
   */
  directory_page_enabled?: boolean;
  /**
   *
   * @type {string}
   * @memberof CreateCommunityRequest
   */
  type?: CreateCommunityRequestTypeEnum;
  /**
   *
   * @type {string}
   * @memberof CreateCommunityRequest
   */
  base: CreateCommunityRequestBaseEnum;
  /**
   *
   * @type {string}
   * @memberof CreateCommunityRequest
   */
  user_address: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunityRequest
   */
  alt_wallet_url?: string;
  /**
   *
   * @type {number}
   * @memberof CreateCommunityRequest
   */
  eth_chain_id?: number;
  /**
   *
   * @type {string}
   * @memberof CreateCommunityRequest
   */
  cosmos_chain_id?: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunityRequest
   */
  address?: string;
  /**
   *
   * @type {number}
   * @memberof CreateCommunityRequest
   */
  decimals?: number;
  /**
   *
   * @type {string}
   * @memberof CreateCommunityRequest
   */
  bech32_prefix?: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunityRequest
   */
  token_name?: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunityRequest
   */
  node_url: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunityRequest
   */
  network: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunityRequest
   */
  default_symbol: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunityRequest
   */
  website?: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunityRequest
   */
  github?: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunityRequest
   */
  telegram?: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunityRequest
   */
  element?: string;
  /**
   *
   * @type {string}
   * @memberof CreateCommunityRequest
   */
  discord?: string;
}

export const CreateCommunityRequestTypeEnum = {
  Chain: 'chain',
  Dao: 'dao',
  Token: 'token',
  Offchain: 'offchain',
} as const;

export type CreateCommunityRequestTypeEnum =
  (typeof CreateCommunityRequestTypeEnum)[keyof typeof CreateCommunityRequestTypeEnum];
export const CreateCommunityRequestBaseEnum = {
  Cosmos: 'cosmos',
  Substrate: 'substrate',
  Ethereum: 'ethereum',
  Near: 'near',
  Solana: 'solana',
} as const;

export type CreateCommunityRequestBaseEnum =
  (typeof CreateCommunityRequestBaseEnum)[keyof typeof CreateCommunityRequestBaseEnum];

/**
 *
 * @export
 * @interface CreateThread200Response
 */
export interface CreateThread200Response {
  /**
   *
   * @type {number}
   * @memberof CreateThread200Response
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof CreateThread200Response
   */
  address_id: number;
  /**
   *
   * @type {string}
   * @memberof CreateThread200Response
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof CreateThread200Response
   */
  kind: string;
  /**
   *
   * @type {string}
   * @memberof CreateThread200Response
   */
  stage: string;
  /**
   *
   * @type {string}
   * @memberof CreateThread200Response
   */
  body?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateThread200Response
   */
  plaintext?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateThread200Response
   */
  url?: string | null;
  /**
   *
   * @type {number}
   * @memberof CreateThread200Response
   */
  topic_id?: number | null;
  /**
   *
   * @type {boolean}
   * @memberof CreateThread200Response
   */
  pinned?: boolean | null;
  /**
   *
   * @type {string}
   * @memberof CreateThread200Response
   */
  community_id: string;
  /**
   *
   * @type {number}
   * @memberof CreateThread200Response
   */
  view_count: number;
  /**
   *
   * @type {Array<GetComments200ResponseResultsInnerThreadLinksInner>}
   * @memberof CreateThread200Response
   */
  links?: Array<GetComments200ResponseResultsInnerThreadLinksInner> | null;
  /**
   *
   * @type {boolean}
   * @memberof CreateThread200Response
   */
  read_only?: boolean | null;
  /**
   *
   * @type {boolean}
   * @memberof CreateThread200Response
   */
  has_poll?: boolean | null;
  /**
   *
   * @type {string}
   * @memberof CreateThread200Response
   */
  canvas_signed_data?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateThread200Response
   */
  canvas_msg_id?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateThread200Response
   */
  created_at?: string;
  /**
   *
   * @type {string}
   * @memberof CreateThread200Response
   */
  updated_at?: string;
  /**
   *
   * @type {string}
   * @memberof CreateThread200Response
   */
  last_edited?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateThread200Response
   */
  deleted_at?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateThread200Response
   */
  last_commented_on?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateThread200Response
   */
  marked_as_spam_at?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateThread200Response
   */
  archived_at?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateThread200Response
   */
  locked_at?: string | null;
  /**
   *
   * @type {GetComments200ResponseResultsInnerDiscordMeta}
   * @memberof CreateThread200Response
   */
  discord_meta?: GetComments200ResponseResultsInnerDiscordMeta | null;
  /**
   *
   * @type {number}
   * @memberof CreateThread200Response
   */
  reaction_count: number;
  /**
   *
   * @type {number}
   * @memberof CreateThread200Response
   */
  reaction_weights_sum: number;
  /**
   *
   * @type {number}
   * @memberof CreateThread200Response
   */
  comment_count: number;
  /**
   *
   * @type {string}
   * @memberof CreateThread200Response
   */
  activity_rank_date?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateThread200Response
   */
  created_by?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateThread200Response
   */
  profile_name?: string | null;
  /**
   *
   * @type {GetComments200ResponseResultsInnerAddress}
   * @memberof CreateThread200Response
   */
  Address?: GetComments200ResponseResultsInnerAddress | null;
  /**
   *
   * @type {GetComments200ResponseResultsInnerThreadTopic}
   * @memberof CreateThread200Response
   */
  topic?: GetComments200ResponseResultsInnerThreadTopic | null;
}
/**
 *
 * @export
 * @interface CreateThreadReaction200Response
 */
export interface CreateThreadReaction200Response {
  /**
   *
   * @type {number}
   * @memberof CreateThreadReaction200Response
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof CreateThreadReaction200Response
   */
  address_id: number;
  /**
   *
   * @type {string}
   * @memberof CreateThreadReaction200Response
   */
  reaction: CreateThreadReaction200ResponseReactionEnum;
  /**
   *
   * @type {number}
   * @memberof CreateThreadReaction200Response
   */
  thread_id?: number | null;
  /**
   *
   * @type {number}
   * @memberof CreateThreadReaction200Response
   */
  comment_id?: number | null;
  /**
   *
   * @type {number}
   * @memberof CreateThreadReaction200Response
   */
  proposal_id?: number | null;
  /**
   *
   * @type {number}
   * @memberof CreateThreadReaction200Response
   */
  calculated_voting_weight?: number | null;
  /**
   *
   * @type {any}
   * @memberof CreateThreadReaction200Response
   */
  canvas_signed_data?: any | null;
  /**
   *
   * @type {string}
   * @memberof CreateThreadReaction200Response
   */
  canvas_msg_id?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateThreadReaction200Response
   */
  created_at?: string;
  /**
   *
   * @type {string}
   * @memberof CreateThreadReaction200Response
   */
  updated_at?: string;
  /**
   *
   * @type {CreateCommunity200ResponseCommunityAddressesInner}
   * @memberof CreateThreadReaction200Response
   */
  Address?: CreateCommunity200ResponseCommunityAddressesInner;
  /**
   *
   * @type {string}
   * @memberof CreateThreadReaction200Response
   */
  community_id: string;
}

export const CreateThreadReaction200ResponseReactionEnum = {
  Like: 'like',
} as const;

export type CreateThreadReaction200ResponseReactionEnum =
  (typeof CreateThreadReaction200ResponseReactionEnum)[keyof typeof CreateThreadReaction200ResponseReactionEnum];

/**
 *
 * @export
 * @interface CreateThreadReactionRequest
 */
export interface CreateThreadReactionRequest {
  /**
   *
   * @type {number}
   * @memberof CreateThreadReactionRequest
   */
  thread_id: number;
  /**
   *
   * @type {string}
   * @memberof CreateThreadReactionRequest
   */
  thread_msg_id: string;
  /**
   *
   * @type {string}
   * @memberof CreateThreadReactionRequest
   */
  reaction: CreateThreadReactionRequestReactionEnum;
  /**
   *
   * @type {string}
   * @memberof CreateThreadReactionRequest
   */
  canvas_signed_data?: string;
  /**
   *
   * @type {string}
   * @memberof CreateThreadReactionRequest
   */
  canvas_msg_id?: string;
}

export const CreateThreadReactionRequestReactionEnum = {
  Like: 'like',
} as const;

export type CreateThreadReactionRequestReactionEnum =
  (typeof CreateThreadReactionRequestReactionEnum)[keyof typeof CreateThreadReactionRequestReactionEnum];

/**
 *
 * @export
 * @interface CreateThreadRequest
 */
export interface CreateThreadRequest {
  /**
   *
   * @type {string}
   * @memberof CreateThreadRequest
   */
  community_id: string;
  /**
   *
   * @type {number}
   * @memberof CreateThreadRequest
   */
  topic_id: number;
  /**
   *
   * @type {string}
   * @memberof CreateThreadRequest
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof CreateThreadRequest
   */
  body: string;
  /**
   *
   * @type {string}
   * @memberof CreateThreadRequest
   */
  canvas_signed_data?: string;
  /**
   *
   * @type {string}
   * @memberof CreateThreadRequest
   */
  canvas_msg_id?: string;
  /**
   *
   * @type {string}
   * @memberof CreateThreadRequest
   */
  kind: CreateThreadRequestKindEnum;
  /**
   *
   * @type {string}
   * @memberof CreateThreadRequest
   */
  stage: string;
  /**
   *
   * @type {string}
   * @memberof CreateThreadRequest
   */
  url?: string;
  /**
   *
   * @type {boolean}
   * @memberof CreateThreadRequest
   */
  read_only: boolean;
  /**
   *
   * @type {CreateThreadRequestDiscordMeta}
   * @memberof CreateThreadRequest
   */
  discord_meta?: CreateThreadRequestDiscordMeta;
}

export const CreateThreadRequestKindEnum = {
  Discussion: 'discussion',
  Link: 'link',
} as const;

export type CreateThreadRequestKindEnum =
  (typeof CreateThreadRequestKindEnum)[keyof typeof CreateThreadRequestKindEnum];

/**
 *
 * @export
 * @interface CreateThreadRequestDiscordMeta
 */
export interface CreateThreadRequestDiscordMeta {
  /**
   *
   * @type {GetComments200ResponseResultsInnerDiscordMetaUser}
   * @memberof CreateThreadRequestDiscordMeta
   */
  user: GetComments200ResponseResultsInnerDiscordMetaUser;
  /**
   *
   * @type {string}
   * @memberof CreateThreadRequestDiscordMeta
   */
  channel_id: string;
  /**
   *
   * @type {string}
   * @memberof CreateThreadRequestDiscordMeta
   */
  message_id: string;
}
/**
 *
 * @export
 * @interface GetComments200Response
 */
export interface GetComments200Response {
  /**
   *
   * @type {number}
   * @memberof GetComments200Response
   */
  limit: number;
  /**
   *
   * @type {number}
   * @memberof GetComments200Response
   */
  page: number;
  /**
   *
   * @type {number}
   * @memberof GetComments200Response
   */
  totalPages: number;
  /**
   *
   * @type {number}
   * @memberof GetComments200Response
   */
  totalResults: number;
  /**
   *
   * @type {Array<GetComments200ResponseResultsInner>}
   * @memberof GetComments200Response
   */
  results: Array<GetComments200ResponseResultsInner>;
}
/**
 *
 * @export
 * @interface GetComments200ResponseResultsInner
 */
export interface GetComments200ResponseResultsInner {
  /**
   *
   * @type {number}
   * @memberof GetComments200ResponseResultsInner
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof GetComments200ResponseResultsInner
   */
  thread_id: number;
  /**
   *
   * @type {number}
   * @memberof GetComments200ResponseResultsInner
   */
  address_id: number;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInner
   */
  text: string;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInner
   */
  plaintext: string;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInner
   */
  parent_id?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInner
   */
  canvas_signed_data?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInner
   */
  canvas_msg_id?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInner
   */
  created_by?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInner
   */
  created_at?: string;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInner
   */
  updated_at?: string;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInner
   */
  deleted_at?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInner
   */
  marked_as_spam_at?: string | null;
  /**
   *
   * @type {GetComments200ResponseResultsInnerDiscordMeta}
   * @memberof GetComments200ResponseResultsInner
   */
  discord_meta?: GetComments200ResponseResultsInnerDiscordMeta | null;
  /**
   *
   * @type {number}
   * @memberof GetComments200ResponseResultsInner
   */
  reaction_count: number;
  /**
   *
   * @type {number}
   * @memberof GetComments200ResponseResultsInner
   */
  reaction_weights_sum?: number;
  /**
   *
   * @type {GetComments200ResponseResultsInnerAddress}
   * @memberof GetComments200ResponseResultsInner
   */
  Address?: GetComments200ResponseResultsInnerAddress | null;
  /**
   *
   * @type {GetComments200ResponseResultsInnerThread}
   * @memberof GetComments200ResponseResultsInner
   */
  Thread?: GetComments200ResponseResultsInnerThread | null;
  /**
   *
   * @type {GetComments200ResponseResultsInnerReaction}
   * @memberof GetComments200ResponseResultsInner
   */
  Reaction?: GetComments200ResponseResultsInnerReaction | null;
}
/**
 *
 * @export
 * @interface GetComments200ResponseResultsInnerAddress
 */
export interface GetComments200ResponseResultsInnerAddress {
  /**
   *
   * @type {number}
   * @memberof GetComments200ResponseResultsInnerAddress
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerAddress
   */
  address: string;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerAddress
   */
  community_id: string;
  /**
   *
   * @type {number}
   * @memberof GetComments200ResponseResultsInnerAddress
   */
  user_id?: number | null;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerAddress
   */
  verification_token?: string;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerAddress
   */
  verification_token_expires?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerAddress
   */
  verified?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerAddress
   */
  last_active?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetComments200ResponseResultsInnerAddress
   */
  ghost_address?: boolean;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerAddress
   */
  wallet_id?: GetComments200ResponseResultsInnerAddressWalletIdEnum | null;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerAddress
   */
  block_info?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetComments200ResponseResultsInnerAddress
   */
  is_user_default?: boolean;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerAddress
   */
  role?: GetComments200ResponseResultsInnerAddressRoleEnum;
  /**
   *
   * @type {boolean}
   * @memberof GetComments200ResponseResultsInnerAddress
   */
  is_banned?: boolean;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerAddress
   */
  hex?: string | null;
  /**
   *
   * @type {CreateCommunity200ResponseCommunityAddressesInnerUser}
   * @memberof GetComments200ResponseResultsInnerAddress
   */
  User?: CreateCommunity200ResponseCommunityAddressesInnerUser;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerAddress
   */
  created_at?: string;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerAddress
   */
  updated_at?: string;
}

export const GetComments200ResponseResultsInnerAddressWalletIdEnum = {
  Magic: 'magic',
  Polkadot: 'polkadot',
  Metamask: 'metamask',
  Walletconnect: 'walletconnect',
  KeplrEthereum: 'keplr-ethereum',
  Keplr: 'keplr',
  Leap: 'leap',
  Near: 'near',
  Terrastation: 'terrastation',
  TerraWalletconnect: 'terra-walletconnect',
  CosmMetamask: 'cosm-metamask',
  Phantom: 'phantom',
  Coinbase: 'coinbase',
} as const;

export type GetComments200ResponseResultsInnerAddressWalletIdEnum =
  (typeof GetComments200ResponseResultsInnerAddressWalletIdEnum)[keyof typeof GetComments200ResponseResultsInnerAddressWalletIdEnum];
export const GetComments200ResponseResultsInnerAddressRoleEnum = {
  Admin: 'admin',
  Moderator: 'moderator',
  Member: 'member',
} as const;

export type GetComments200ResponseResultsInnerAddressRoleEnum =
  (typeof GetComments200ResponseResultsInnerAddressRoleEnum)[keyof typeof GetComments200ResponseResultsInnerAddressRoleEnum];

/**
 *
 * @export
 * @interface GetComments200ResponseResultsInnerDiscordMeta
 */
export interface GetComments200ResponseResultsInnerDiscordMeta {
  /**
   *
   * @type {GetComments200ResponseResultsInnerDiscordMetaUser}
   * @memberof GetComments200ResponseResultsInnerDiscordMeta
   */
  user: GetComments200ResponseResultsInnerDiscordMetaUser;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerDiscordMeta
   */
  channel_id: string;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerDiscordMeta
   */
  message_id: string;
}
/**
 *
 * @export
 * @interface GetComments200ResponseResultsInnerDiscordMetaUser
 */
export interface GetComments200ResponseResultsInnerDiscordMetaUser {
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerDiscordMetaUser
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerDiscordMetaUser
   */
  username: string;
}
/**
 *
 * @export
 * @interface GetComments200ResponseResultsInnerReaction
 */
export interface GetComments200ResponseResultsInnerReaction {
  /**
   *
   * @type {number}
   * @memberof GetComments200ResponseResultsInnerReaction
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof GetComments200ResponseResultsInnerReaction
   */
  address_id: number;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerReaction
   */
  reaction: GetComments200ResponseResultsInnerReactionReactionEnum;
  /**
   *
   * @type {number}
   * @memberof GetComments200ResponseResultsInnerReaction
   */
  thread_id?: number | null;
  /**
   *
   * @type {number}
   * @memberof GetComments200ResponseResultsInnerReaction
   */
  comment_id?: number | null;
  /**
   *
   * @type {number}
   * @memberof GetComments200ResponseResultsInnerReaction
   */
  proposal_id?: number | null;
  /**
   *
   * @type {number}
   * @memberof GetComments200ResponseResultsInnerReaction
   */
  calculated_voting_weight?: number | null;
  /**
   *
   * @type {any}
   * @memberof GetComments200ResponseResultsInnerReaction
   */
  canvas_signed_data?: any | null;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerReaction
   */
  canvas_msg_id?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerReaction
   */
  created_at?: string;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerReaction
   */
  updated_at?: string;
  /**
   *
   * @type {CreateCommunity200ResponseCommunityAddressesInner}
   * @memberof GetComments200ResponseResultsInnerReaction
   */
  Address?: CreateCommunity200ResponseCommunityAddressesInner;
}

export const GetComments200ResponseResultsInnerReactionReactionEnum = {
  Like: 'like',
} as const;

export type GetComments200ResponseResultsInnerReactionReactionEnum =
  (typeof GetComments200ResponseResultsInnerReactionReactionEnum)[keyof typeof GetComments200ResponseResultsInnerReactionReactionEnum];

/**
 *
 * @export
 * @interface GetComments200ResponseResultsInnerThread
 */
export interface GetComments200ResponseResultsInnerThread {
  /**
   *
   * @type {number}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  address_id: number;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  kind: string;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  stage: string;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  body?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  plaintext?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  url?: string | null;
  /**
   *
   * @type {number}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  topic_id?: number | null;
  /**
   *
   * @type {boolean}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  pinned?: boolean | null;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  community_id: string;
  /**
   *
   * @type {number}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  view_count: number;
  /**
   *
   * @type {Array<GetComments200ResponseResultsInnerThreadLinksInner>}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  links?: Array<GetComments200ResponseResultsInnerThreadLinksInner> | null;
  /**
   *
   * @type {boolean}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  read_only?: boolean | null;
  /**
   *
   * @type {boolean}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  has_poll?: boolean | null;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  canvas_signed_data?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  canvas_msg_id?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  created_at?: string;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  updated_at?: string;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  last_edited?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  deleted_at?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  last_commented_on?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  marked_as_spam_at?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  archived_at?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  locked_at?: string | null;
  /**
   *
   * @type {GetComments200ResponseResultsInnerDiscordMeta}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  discord_meta?: GetComments200ResponseResultsInnerDiscordMeta | null;
  /**
   *
   * @type {number}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  reaction_count: number;
  /**
   *
   * @type {number}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  reaction_weights_sum: number;
  /**
   *
   * @type {number}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  comment_count: number;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  activity_rank_date?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  created_by?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  profile_name?: string | null;
  /**
   *
   * @type {GetComments200ResponseResultsInnerAddress}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  Address?: GetComments200ResponseResultsInnerAddress | null;
  /**
   *
   * @type {GetComments200ResponseResultsInnerThreadTopic}
   * @memberof GetComments200ResponseResultsInnerThread
   */
  topic?: GetComments200ResponseResultsInnerThreadTopic | null;
}
/**
 *
 * @export
 * @interface GetComments200ResponseResultsInnerThreadLinksInner
 */
export interface GetComments200ResponseResultsInnerThreadLinksInner {
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerThreadLinksInner
   */
  source: GetComments200ResponseResultsInnerThreadLinksInnerSourceEnum;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerThreadLinksInner
   */
  identifier: string;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerThreadLinksInner
   */
  title?: string | null;
}

export const GetComments200ResponseResultsInnerThreadLinksInnerSourceEnum = {
  Snapshot: 'snapshot',
  Proposal: 'proposal',
  Thread: 'thread',
  Web: 'web',
  Template: 'template',
} as const;

export type GetComments200ResponseResultsInnerThreadLinksInnerSourceEnum =
  (typeof GetComments200ResponseResultsInnerThreadLinksInnerSourceEnum)[keyof typeof GetComments200ResponseResultsInnerThreadLinksInnerSourceEnum];

/**
 *
 * @export
 * @interface GetComments200ResponseResultsInnerThreadTopic
 */
export interface GetComments200ResponseResultsInnerThreadTopic {
  /**
   *
   * @type {number}
   * @memberof GetComments200ResponseResultsInnerThreadTopic
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerThreadTopic
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerThreadTopic
   */
  community_id: string;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerThreadTopic
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerThreadTopic
   */
  telegram?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetComments200ResponseResultsInnerThreadTopic
   */
  featured_in_sidebar?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof GetComments200ResponseResultsInnerThreadTopic
   */
  featured_in_new_post?: boolean;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerThreadTopic
   */
  default_offchain_template?: string | null;
  /**
   *
   * @type {number}
   * @memberof GetComments200ResponseResultsInnerThreadTopic
   */
  order?: number | null;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerThreadTopic
   */
  channel_id?: string | null;
  /**
   *
   * @type {Array<number>}
   * @memberof GetComments200ResponseResultsInnerThreadTopic
   */
  group_ids?: Array<number>;
  /**
   *
   * @type {string}
   * @memberof GetComments200ResponseResultsInnerThreadTopic
   */
  default_offchain_template_backup?: string | null;
}
/**
 *
 * @export
 * @interface GetCommunities200Response
 */
export interface GetCommunities200Response {
  /**
   *
   * @type {number}
   * @memberof GetCommunities200Response
   */
  limit: number;
  /**
   *
   * @type {number}
   * @memberof GetCommunities200Response
   */
  page: number;
  /**
   *
   * @type {number}
   * @memberof GetCommunities200Response
   */
  totalPages: number;
  /**
   *
   * @type {number}
   * @memberof GetCommunities200Response
   */
  totalResults: number;
  /**
   *
   * @type {Array<GetCommunities200ResponseResultsInner>}
   * @memberof GetCommunities200Response
   */
  results: Array<GetCommunities200ResponseResultsInner>;
}
/**
 *
 * @export
 * @interface GetCommunities200ResponseResultsInner
 */
export interface GetCommunities200ResponseResultsInner {
  /**
   *
   * @type {string}
   * @memberof GetCommunities200ResponseResultsInner
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof GetCommunities200ResponseResultsInner
   */
  name: string;
  /**
   *
   * @type {number}
   * @memberof GetCommunities200ResponseResultsInner
   */
  chain_node_id?: number | null;
  /**
   *
   * @type {string}
   * @memberof GetCommunities200ResponseResultsInner
   */
  default_symbol?: string;
  /**
   *
   * @type {string}
   * @memberof GetCommunities200ResponseResultsInner
   */
  network?: string;
  /**
   *
   * @type {string}
   * @memberof GetCommunities200ResponseResultsInner
   */
  base: GetCommunities200ResponseResultsInnerBaseEnum;
  /**
   *
   * @type {string}
   * @memberof GetCommunities200ResponseResultsInner
   */
  icon_url?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetCommunities200ResponseResultsInner
   */
  active: boolean;
  /**
   *
   * @type {string}
   * @memberof GetCommunities200ResponseResultsInner
   */
  type?: GetCommunities200ResponseResultsInnerTypeEnum;
  /**
   *
   * @type {string}
   * @memberof GetCommunities200ResponseResultsInner
   */
  description?: string | null;
  /**
   *
   * @type {Array<CreateCommunity200ResponseCommunitySocialLinksInner>}
   * @memberof GetCommunities200ResponseResultsInner
   */
  social_links?: Array<CreateCommunity200ResponseCommunitySocialLinksInner>;
  /**
   *
   * @type {number}
   * @memberof GetCommunities200ResponseResultsInner
   */
  ss58_prefix?: number | null;
  /**
   *
   * @type {boolean}
   * @memberof GetCommunities200ResponseResultsInner
   */
  stages_enabled?: boolean;
  /**
   *
   * @type {Array<string>}
   * @memberof GetCommunities200ResponseResultsInner
   */
  custom_stages?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof GetCommunities200ResponseResultsInner
   */
  custom_domain?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetCommunities200ResponseResultsInner
   */
  block_explorer_ids?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetCommunities200ResponseResultsInner
   */
  collapsed_on_homepage?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof GetCommunities200ResponseResultsInner
   */
  default_summary_view?: boolean | null;
  /**
   *
   * @type {string}
   * @memberof GetCommunities200ResponseResultsInner
   */
  default_page?: GetCommunities200ResponseResultsInnerDefaultPageEnum | null;
  /**
   *
   * @type {string}
   * @memberof GetCommunities200ResponseResultsInner
   */
  has_homepage?: GetCommunities200ResponseResultsInnerHasHomepageEnum | null;
  /**
   *
   * @type {string}
   * @memberof GetCommunities200ResponseResultsInner
   */
  terms?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetCommunities200ResponseResultsInner
   */
  admin_only_polling?: boolean | null;
  /**
   *
   * @type {string}
   * @memberof GetCommunities200ResponseResultsInner
   */
  bech32_prefix?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetCommunities200ResponseResultsInner
   */
  hide_projects?: boolean | null;
  /**
   *
   * @type {string}
   * @memberof GetCommunities200ResponseResultsInner
   */
  token_name?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetCommunities200ResponseResultsInner
   */
  ce_verbose?: boolean | null;
  /**
   *
   * @type {number}
   * @memberof GetCommunities200ResponseResultsInner
   */
  discord_config_id?: number | null;
  /**
   *
   * @type {any}
   * @memberof GetCommunities200ResponseResultsInner
   */
  category?: any | null;
  /**
   *
   * @type {boolean}
   * @memberof GetCommunities200ResponseResultsInner
   */
  discord_bot_webhooks_enabled?: boolean | null;
  /**
   *
   * @type {boolean}
   * @memberof GetCommunities200ResponseResultsInner
   */
  directory_page_enabled?: boolean;
  /**
   *
   * @type {number}
   * @memberof GetCommunities200ResponseResultsInner
   */
  directory_page_chain_node_id?: number | null;
  /**
   *
   * @type {string}
   * @memberof GetCommunities200ResponseResultsInner
   */
  namespace?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetCommunities200ResponseResultsInner
   */
  namespace_address?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetCommunities200ResponseResultsInner
   */
  redirect?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof GetCommunities200ResponseResultsInner
   */
  snapshot_spaces?: Array<string>;
  /**
   *
   * @type {boolean}
   * @memberof GetCommunities200ResponseResultsInner
   */
  include_in_digest_email?: boolean | null;
  /**
   *
   * @type {number}
   * @memberof GetCommunities200ResponseResultsInner
   */
  profile_count?: number | null;
  /**
   *
   * @type {number}
   * @memberof GetCommunities200ResponseResultsInner
   */
  lifetime_thread_count?: number;
  /**
   *
   * @type {string}
   * @memberof GetCommunities200ResponseResultsInner
   */
  banner_text?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetCommunities200ResponseResultsInner
   */
  created_at?: string;
  /**
   *
   * @type {string}
   * @memberof GetCommunities200ResponseResultsInner
   */
  updated_at?: string;
  /**
   *
   * @type {Array<CreateCommunity200ResponseCommunityAddressesInner>}
   * @memberof GetCommunities200ResponseResultsInner
   */
  Addresses?: Array<CreateCommunity200ResponseCommunityAddressesInner>;
  /**
   *
   * @type {Array<CreateCommunity200ResponseCommunityCommunityStakesInner>}
   * @memberof GetCommunities200ResponseResultsInner
   */
  CommunityStakes?: Array<CreateCommunity200ResponseCommunityCommunityStakesInner> | null;
  /**
   *
   * @type {Array<CreateCommunity200ResponseCommunityCommunityTagsInner>}
   * @memberof GetCommunities200ResponseResultsInner
   */
  CommunityTags?: Array<CreateCommunity200ResponseCommunityCommunityTagsInner> | null;
  /**
   *
   * @type {CreateCommunity200ResponseCommunityChainNode}
   * @memberof GetCommunities200ResponseResultsInner
   */
  ChainNode?: CreateCommunity200ResponseCommunityChainNode | null;
  /**
   *
   * @type {Array<CreateCommunity200ResponseCommunityTopicsInner>}
   * @memberof GetCommunities200ResponseResultsInner
   */
  topics?: Array<CreateCommunity200ResponseCommunityTopicsInner>;
  /**
   *
   * @type {Array<CreateCommunity200ResponseCommunityGroupsInner>}
   * @memberof GetCommunities200ResponseResultsInner
   */
  groups?: Array<CreateCommunity200ResponseCommunityGroupsInner>;
  /**
   *
   * @type {Array<CreateCommunity200ResponseCommunityContestManagersInner>}
   * @memberof GetCommunities200ResponseResultsInner
   */
  contest_managers?: Array<CreateCommunity200ResponseCommunityContestManagersInner>;
  /**
   *
   * @type {number}
   * @memberof GetCommunities200ResponseResultsInner
   */
  last_30_day_thread_count?: number | null;
}

export const GetCommunities200ResponseResultsInnerBaseEnum = {
  Cosmos: 'cosmos',
  Substrate: 'substrate',
  Ethereum: 'ethereum',
  Near: 'near',
  Solana: 'solana',
} as const;

export type GetCommunities200ResponseResultsInnerBaseEnum =
  (typeof GetCommunities200ResponseResultsInnerBaseEnum)[keyof typeof GetCommunities200ResponseResultsInnerBaseEnum];
export const GetCommunities200ResponseResultsInnerTypeEnum = {
  Chain: 'chain',
  Dao: 'dao',
  Token: 'token',
  Offchain: 'offchain',
} as const;

export type GetCommunities200ResponseResultsInnerTypeEnum =
  (typeof GetCommunities200ResponseResultsInnerTypeEnum)[keyof typeof GetCommunities200ResponseResultsInnerTypeEnum];
export const GetCommunities200ResponseResultsInnerDefaultPageEnum = {
  DefaultAllDiscussionsView: 'default_all_discussions_view',
  DefaultSummaryView: 'default_summary_view',
  Homepage: 'homepage',
} as const;

export type GetCommunities200ResponseResultsInnerDefaultPageEnum =
  (typeof GetCommunities200ResponseResultsInnerDefaultPageEnum)[keyof typeof GetCommunities200ResponseResultsInnerDefaultPageEnum];
export const GetCommunities200ResponseResultsInnerHasHomepageEnum = {
  True: 'true',
  False: 'false',
} as const;

export type GetCommunities200ResponseResultsInnerHasHomepageEnum =
  (typeof GetCommunities200ResponseResultsInnerHasHomepageEnum)[keyof typeof GetCommunities200ResponseResultsInnerHasHomepageEnum];

/**
 *
 * @export
 * @interface GetCommunity200Response
 */
export interface GetCommunity200Response {
  /**
   *
   * @type {string}
   * @memberof GetCommunity200Response
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof GetCommunity200Response
   */
  name: string;
  /**
   *
   * @type {number}
   * @memberof GetCommunity200Response
   */
  chain_node_id?: number | null;
  /**
   *
   * @type {string}
   * @memberof GetCommunity200Response
   */
  default_symbol?: string;
  /**
   *
   * @type {string}
   * @memberof GetCommunity200Response
   */
  network?: string;
  /**
   *
   * @type {string}
   * @memberof GetCommunity200Response
   */
  base: GetCommunity200ResponseBaseEnum;
  /**
   *
   * @type {string}
   * @memberof GetCommunity200Response
   */
  icon_url?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetCommunity200Response
   */
  active: boolean;
  /**
   *
   * @type {string}
   * @memberof GetCommunity200Response
   */
  type?: GetCommunity200ResponseTypeEnum;
  /**
   *
   * @type {string}
   * @memberof GetCommunity200Response
   */
  description?: string | null;
  /**
   *
   * @type {Array<CreateCommunity200ResponseCommunitySocialLinksInner>}
   * @memberof GetCommunity200Response
   */
  social_links?: Array<CreateCommunity200ResponseCommunitySocialLinksInner>;
  /**
   *
   * @type {number}
   * @memberof GetCommunity200Response
   */
  ss58_prefix?: number | null;
  /**
   *
   * @type {boolean}
   * @memberof GetCommunity200Response
   */
  stages_enabled?: boolean;
  /**
   *
   * @type {Array<string>}
   * @memberof GetCommunity200Response
   */
  custom_stages?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof GetCommunity200Response
   */
  custom_domain?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetCommunity200Response
   */
  block_explorer_ids?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetCommunity200Response
   */
  collapsed_on_homepage?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof GetCommunity200Response
   */
  default_summary_view?: boolean | null;
  /**
   *
   * @type {string}
   * @memberof GetCommunity200Response
   */
  default_page?: GetCommunity200ResponseDefaultPageEnum | null;
  /**
   *
   * @type {string}
   * @memberof GetCommunity200Response
   */
  has_homepage?: GetCommunity200ResponseHasHomepageEnum | null;
  /**
   *
   * @type {string}
   * @memberof GetCommunity200Response
   */
  terms?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetCommunity200Response
   */
  admin_only_polling?: boolean | null;
  /**
   *
   * @type {string}
   * @memberof GetCommunity200Response
   */
  bech32_prefix?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetCommunity200Response
   */
  hide_projects?: boolean | null;
  /**
   *
   * @type {string}
   * @memberof GetCommunity200Response
   */
  token_name?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof GetCommunity200Response
   */
  ce_verbose?: boolean | null;
  /**
   *
   * @type {number}
   * @memberof GetCommunity200Response
   */
  discord_config_id?: number | null;
  /**
   *
   * @type {any}
   * @memberof GetCommunity200Response
   */
  category?: any | null;
  /**
   *
   * @type {boolean}
   * @memberof GetCommunity200Response
   */
  discord_bot_webhooks_enabled?: boolean | null;
  /**
   *
   * @type {boolean}
   * @memberof GetCommunity200Response
   */
  directory_page_enabled?: boolean;
  /**
   *
   * @type {number}
   * @memberof GetCommunity200Response
   */
  directory_page_chain_node_id?: number | null;
  /**
   *
   * @type {string}
   * @memberof GetCommunity200Response
   */
  namespace?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetCommunity200Response
   */
  namespace_address?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetCommunity200Response
   */
  redirect?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof GetCommunity200Response
   */
  snapshot_spaces?: Array<string>;
  /**
   *
   * @type {boolean}
   * @memberof GetCommunity200Response
   */
  include_in_digest_email?: boolean | null;
  /**
   *
   * @type {number}
   * @memberof GetCommunity200Response
   */
  profile_count?: number | null;
  /**
   *
   * @type {number}
   * @memberof GetCommunity200Response
   */
  lifetime_thread_count?: number;
  /**
   *
   * @type {string}
   * @memberof GetCommunity200Response
   */
  banner_text?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetCommunity200Response
   */
  created_at?: string;
  /**
   *
   * @type {string}
   * @memberof GetCommunity200Response
   */
  updated_at?: string;
  /**
   *
   * @type {Array<CreateCommunity200ResponseCommunityAddressesInner>}
   * @memberof GetCommunity200Response
   */
  Addresses?: Array<CreateCommunity200ResponseCommunityAddressesInner>;
  /**
   *
   * @type {Array<CreateCommunity200ResponseCommunityCommunityStakesInner>}
   * @memberof GetCommunity200Response
   */
  CommunityStakes?: Array<CreateCommunity200ResponseCommunityCommunityStakesInner> | null;
  /**
   *
   * @type {Array<CreateCommunity200ResponseCommunityCommunityTagsInner>}
   * @memberof GetCommunity200Response
   */
  CommunityTags?: Array<CreateCommunity200ResponseCommunityCommunityTagsInner> | null;
  /**
   *
   * @type {CreateCommunity200ResponseCommunityChainNode}
   * @memberof GetCommunity200Response
   */
  ChainNode?: CreateCommunity200ResponseCommunityChainNode | null;
  /**
   *
   * @type {Array<CreateCommunity200ResponseCommunityTopicsInner>}
   * @memberof GetCommunity200Response
   */
  topics?: Array<CreateCommunity200ResponseCommunityTopicsInner>;
  /**
   *
   * @type {Array<CreateCommunity200ResponseCommunityGroupsInner>}
   * @memberof GetCommunity200Response
   */
  groups?: Array<CreateCommunity200ResponseCommunityGroupsInner>;
  /**
   *
   * @type {Array<CreateCommunity200ResponseCommunityContestManagersInner>}
   * @memberof GetCommunity200Response
   */
  contest_managers?: Array<CreateCommunity200ResponseCommunityContestManagersInner>;
  /**
   *
   * @type {number}
   * @memberof GetCommunity200Response
   */
  numVotingThreads: number;
  /**
   *
   * @type {Array<GetCommunity200ResponseAdminsAndModsInner>}
   * @memberof GetCommunity200Response
   */
  adminsAndMods: Array<GetCommunity200ResponseAdminsAndModsInner>;
  /**
   *
   * @type {string}
   * @memberof GetCommunity200Response
   */
  communityBanner?: string | null;
}

export const GetCommunity200ResponseBaseEnum = {
  Cosmos: 'cosmos',
  Substrate: 'substrate',
  Ethereum: 'ethereum',
  Near: 'near',
  Solana: 'solana',
} as const;

export type GetCommunity200ResponseBaseEnum =
  (typeof GetCommunity200ResponseBaseEnum)[keyof typeof GetCommunity200ResponseBaseEnum];
export const GetCommunity200ResponseTypeEnum = {
  Chain: 'chain',
  Dao: 'dao',
  Token: 'token',
  Offchain: 'offchain',
} as const;

export type GetCommunity200ResponseTypeEnum =
  (typeof GetCommunity200ResponseTypeEnum)[keyof typeof GetCommunity200ResponseTypeEnum];
export const GetCommunity200ResponseDefaultPageEnum = {
  DefaultAllDiscussionsView: 'default_all_discussions_view',
  DefaultSummaryView: 'default_summary_view',
  Homepage: 'homepage',
} as const;

export type GetCommunity200ResponseDefaultPageEnum =
  (typeof GetCommunity200ResponseDefaultPageEnum)[keyof typeof GetCommunity200ResponseDefaultPageEnum];
export const GetCommunity200ResponseHasHomepageEnum = {
  True: 'true',
  False: 'false',
} as const;

export type GetCommunity200ResponseHasHomepageEnum =
  (typeof GetCommunity200ResponseHasHomepageEnum)[keyof typeof GetCommunity200ResponseHasHomepageEnum];

/**
 *
 * @export
 * @interface GetCommunity200ResponseAdminsAndModsInner
 */
export interface GetCommunity200ResponseAdminsAndModsInner {
  /**
   *
   * @type {string}
   * @memberof GetCommunity200ResponseAdminsAndModsInner
   */
  address: string;
  /**
   *
   * @type {string}
   * @memberof GetCommunity200ResponseAdminsAndModsInner
   */
  role: GetCommunity200ResponseAdminsAndModsInnerRoleEnum;
}

export const GetCommunity200ResponseAdminsAndModsInnerRoleEnum = {
  Admin: 'admin',
  Moderator: 'moderator',
} as const;

export type GetCommunity200ResponseAdminsAndModsInnerRoleEnum =
  (typeof GetCommunity200ResponseAdminsAndModsInnerRoleEnum)[keyof typeof GetCommunity200ResponseAdminsAndModsInnerRoleEnum];

/**
 *
 * @export
 * @interface GetMembers200Response
 */
export interface GetMembers200Response {
  /**
   *
   * @type {number}
   * @memberof GetMembers200Response
   */
  limit: number;
  /**
   *
   * @type {number}
   * @memberof GetMembers200Response
   */
  page: number;
  /**
   *
   * @type {number}
   * @memberof GetMembers200Response
   */
  totalPages: number;
  /**
   *
   * @type {number}
   * @memberof GetMembers200Response
   */
  totalResults: number;
  /**
   *
   * @type {Array<GetMembers200ResponseResultsInner>}
   * @memberof GetMembers200Response
   */
  results: Array<GetMembers200ResponseResultsInner>;
}
/**
 *
 * @export
 * @interface GetMembers200ResponseResultsInner
 */
export interface GetMembers200ResponseResultsInner {
  /**
   *
   * @type {number}
   * @memberof GetMembers200ResponseResultsInner
   */
  user_id: number;
  /**
   *
   * @type {string}
   * @memberof GetMembers200ResponseResultsInner
   */
  profile_name?: string | null;
  /**
   *
   * @type {string}
   * @memberof GetMembers200ResponseResultsInner
   */
  avatar_url?: string | null;
  /**
   *
   * @type {Array<GetMembers200ResponseResultsInnerAddressesInner>}
   * @memberof GetMembers200ResponseResultsInner
   */
  addresses: Array<GetMembers200ResponseResultsInnerAddressesInner>;
  /**
   *
   * @type {Array<number>}
   * @memberof GetMembers200ResponseResultsInner
   */
  group_ids: Array<number>;
  /**
   * string or date
   * @type {any}
   * @memberof GetMembers200ResponseResultsInner
   */
  last_active?: any | null;
}
/**
 *
 * @export
 * @interface GetMembers200ResponseResultsInnerAddressesInner
 */
export interface GetMembers200ResponseResultsInnerAddressesInner {
  /**
   *
   * @type {number}
   * @memberof GetMembers200ResponseResultsInnerAddressesInner
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof GetMembers200ResponseResultsInnerAddressesInner
   */
  community_id: string;
  /**
   *
   * @type {string}
   * @memberof GetMembers200ResponseResultsInnerAddressesInner
   */
  address: string;
  /**
   *
   * @type {number}
   * @memberof GetMembers200ResponseResultsInnerAddressesInner
   */
  stake_balance?: number | null;
  /**
   *
   * @type {string}
   * @memberof GetMembers200ResponseResultsInnerAddressesInner
   */
  role: string;
}
/**
 *
 * @export
 * @interface GetMembersMembershipsParameter
 */
export interface GetMembersMembershipsParameter {}
/**
 *
 * @export
 * @interface UpdateCommentRequest
 */
export interface UpdateCommentRequest {
  /**
   *
   * @type {number}
   * @memberof UpdateCommentRequest
   */
  comment_id: number;
  /**
   *
   * @type {string}
   * @memberof UpdateCommentRequest
   */
  text: string;
  /**
   *
   * @type {number}
   * @memberof UpdateCommentRequest
   */
  thread_id?: number;
  /**
   *
   * @type {CreateThreadRequestDiscordMeta}
   * @memberof UpdateCommentRequest
   */
  discord_meta?: CreateThreadRequestDiscordMeta;
}

/**
 * CommentApi - axios parameter creator
 * @export
 */
export const CommentApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {CreateCommentRequest} createCommentRequest
     * @param {string} [address]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createComment: async (
      createCommentRequest: CreateCommentRequest,
      address?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createCommentRequest' is not null or undefined
      assertParamExists(
        'createComment',
        'createCommentRequest',
        createCommentRequest,
      );
      const localVarPath = `/CreateComment`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication oauth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'oauth2',
        [],
        configuration,
      );

      if (address != null) {
        localVarHeaderParameter['address'] = String(address);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createCommentRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreateCommentReactionRequest} createCommentReactionRequest
     * @param {string} [address]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCommentReaction: async (
      createCommentReactionRequest: CreateCommentReactionRequest,
      address?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createCommentReactionRequest' is not null or undefined
      assertParamExists(
        'createCommentReaction',
        'createCommentReactionRequest',
        createCommentReactionRequest,
      );
      const localVarPath = `/CreateCommentReaction`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication oauth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'oauth2',
        [],
        configuration,
      );

      if (address != null) {
        localVarHeaderParameter['address'] = String(address);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createCommentReactionRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} threadId
     * @param {string} [address]
     * @param {number | null} [limit]
     * @param {number | null} [cursor] required for tRPC useInfiniteQuery hook, equivalent to page number
     * @param {string} [orderBy]
     * @param {GetCommentsOrderDirectionEnum} [orderDirection]
     * @param {number} [commentId]
     * @param {boolean} [includeUser]
     * @param {boolean} [includeReactions]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getComments: async (
      threadId: number,
      address?: string,
      limit?: number | null,
      cursor?: number | null,
      orderBy?: string,
      orderDirection?: GetCommentsOrderDirectionEnum,
      commentId?: number,
      includeUser?: boolean,
      includeReactions?: boolean,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'threadId' is not null or undefined
      assertParamExists('getComments', 'threadId', threadId);
      const localVarPath = `/GetComments`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      if (cursor !== undefined) {
        localVarQueryParameter['cursor'] = cursor;
      }

      if (orderBy !== undefined) {
        localVarQueryParameter['order_by'] = orderBy;
      }

      if (orderDirection !== undefined) {
        localVarQueryParameter['order_direction'] = orderDirection;
      }

      if (threadId !== undefined) {
        localVarQueryParameter['thread_id'] = threadId;
      }

      if (commentId !== undefined) {
        localVarQueryParameter['comment_id'] = commentId;
      }

      if (includeUser !== undefined) {
        localVarQueryParameter['include_user'] = includeUser;
      }

      if (includeReactions !== undefined) {
        localVarQueryParameter['include_reactions'] = includeReactions;
      }

      if (address != null) {
        localVarHeaderParameter['address'] = String(address);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {UpdateCommentRequest} updateCommentRequest
     * @param {string} [address]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateComment: async (
      updateCommentRequest: UpdateCommentRequest,
      address?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'updateCommentRequest' is not null or undefined
      assertParamExists(
        'updateComment',
        'updateCommentRequest',
        updateCommentRequest,
      );
      const localVarPath = `/UpdateComment`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication oauth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'oauth2',
        [],
        configuration,
      );

      if (address != null) {
        localVarHeaderParameter['address'] = String(address);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateCommentRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CommentApi - functional programming interface
 * @export
 */
export const CommentApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CommentApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {CreateCommentRequest} createCommentRequest
     * @param {string} [address]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createComment(
      createCommentRequest: CreateCommentRequest,
      address?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CreateComment200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createComment(
        createCommentRequest,
        address,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['CommentApi.createComment']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {CreateCommentReactionRequest} createCommentReactionRequest
     * @param {string} [address]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCommentReaction(
      createCommentReactionRequest: CreateCommentReactionRequest,
      address?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CreateThreadReaction200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createCommentReaction(
          createCommentReactionRequest,
          address,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['CommentApi.createCommentReaction']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} threadId
     * @param {string} [address]
     * @param {number | null} [limit]
     * @param {number | null} [cursor] required for tRPC useInfiniteQuery hook, equivalent to page number
     * @param {string} [orderBy]
     * @param {GetCommentsOrderDirectionEnum} [orderDirection]
     * @param {number} [commentId]
     * @param {boolean} [includeUser]
     * @param {boolean} [includeReactions]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getComments(
      threadId: number,
      address?: string,
      limit?: number | null,
      cursor?: number | null,
      orderBy?: string,
      orderDirection?: GetCommentsOrderDirectionEnum,
      commentId?: number,
      includeUser?: boolean,
      includeReactions?: boolean,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetComments200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getComments(
        threadId,
        address,
        limit,
        cursor,
        orderBy,
        orderDirection,
        commentId,
        includeUser,
        includeReactions,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['CommentApi.getComments']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {UpdateCommentRequest} updateCommentRequest
     * @param {string} [address]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateComment(
      updateCommentRequest: UpdateCommentRequest,
      address?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CreateComment200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateComment(
        updateCommentRequest,
        address,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['CommentApi.updateComment']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * CommentApi - factory interface
 * @export
 */
export const CommentApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = CommentApiFp(configuration);
  return {
    /**
     *
     * @param {CreateCommentRequest} createCommentRequest
     * @param {string} [address]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createComment(
      createCommentRequest: CreateCommentRequest,
      address?: string,
      options?: any,
    ): AxiosPromise<CreateComment200Response> {
      return localVarFp
        .createComment(createCommentRequest, address, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CreateCommentReactionRequest} createCommentReactionRequest
     * @param {string} [address]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCommentReaction(
      createCommentReactionRequest: CreateCommentReactionRequest,
      address?: string,
      options?: any,
    ): AxiosPromise<CreateThreadReaction200Response> {
      return localVarFp
        .createCommentReaction(createCommentReactionRequest, address, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} threadId
     * @param {string} [address]
     * @param {number | null} [limit]
     * @param {number | null} [cursor] required for tRPC useInfiniteQuery hook, equivalent to page number
     * @param {string} [orderBy]
     * @param {GetCommentsOrderDirectionEnum} [orderDirection]
     * @param {number} [commentId]
     * @param {boolean} [includeUser]
     * @param {boolean} [includeReactions]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getComments(
      threadId: number,
      address?: string,
      limit?: number | null,
      cursor?: number | null,
      orderBy?: string,
      orderDirection?: GetCommentsOrderDirectionEnum,
      commentId?: number,
      includeUser?: boolean,
      includeReactions?: boolean,
      options?: any,
    ): AxiosPromise<GetComments200Response> {
      return localVarFp
        .getComments(
          threadId,
          address,
          limit,
          cursor,
          orderBy,
          orderDirection,
          commentId,
          includeUser,
          includeReactions,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {UpdateCommentRequest} updateCommentRequest
     * @param {string} [address]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateComment(
      updateCommentRequest: UpdateCommentRequest,
      address?: string,
      options?: any,
    ): AxiosPromise<CreateComment200Response> {
      return localVarFp
        .updateComment(updateCommentRequest, address, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * CommentApi - object-oriented interface
 * @export
 * @class CommentApi
 * @extends {BaseAPI}
 */
export class CommentApi extends BaseAPI {
  /**
   *
   * @param {CreateCommentRequest} createCommentRequest
   * @param {string} [address]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommentApi
   */
  public createComment(
    createCommentRequest: CreateCommentRequest,
    address?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return CommentApiFp(this.configuration)
      .createComment(createCommentRequest, address, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CreateCommentReactionRequest} createCommentReactionRequest
   * @param {string} [address]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommentApi
   */
  public createCommentReaction(
    createCommentReactionRequest: CreateCommentReactionRequest,
    address?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return CommentApiFp(this.configuration)
      .createCommentReaction(createCommentReactionRequest, address, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} threadId
   * @param {string} [address]
   * @param {number | null} [limit]
   * @param {number | null} [cursor] required for tRPC useInfiniteQuery hook, equivalent to page number
   * @param {string} [orderBy]
   * @param {GetCommentsOrderDirectionEnum} [orderDirection]
   * @param {number} [commentId]
   * @param {boolean} [includeUser]
   * @param {boolean} [includeReactions]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommentApi
   */
  public getComments(
    threadId: number,
    address?: string,
    limit?: number | null,
    cursor?: number | null,
    orderBy?: string,
    orderDirection?: GetCommentsOrderDirectionEnum,
    commentId?: number,
    includeUser?: boolean,
    includeReactions?: boolean,
    options?: RawAxiosRequestConfig,
  ) {
    return CommentApiFp(this.configuration)
      .getComments(
        threadId,
        address,
        limit,
        cursor,
        orderBy,
        orderDirection,
        commentId,
        includeUser,
        includeReactions,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UpdateCommentRequest} updateCommentRequest
   * @param {string} [address]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommentApi
   */
  public updateComment(
    updateCommentRequest: UpdateCommentRequest,
    address?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return CommentApiFp(this.configuration)
      .updateComment(updateCommentRequest, address, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const GetCommentsOrderDirectionEnum = {
  Asc: 'ASC',
  Desc: 'DESC',
} as const;
export type GetCommentsOrderDirectionEnum =
  (typeof GetCommentsOrderDirectionEnum)[keyof typeof GetCommentsOrderDirectionEnum];

/**
 * CommunityApi - axios parameter creator
 * @export
 */
export const CommunityApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {CreateCommunityRequest} createCommunityRequest
     * @param {string} [address]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCommunity: async (
      createCommunityRequest: CreateCommunityRequest,
      address?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createCommunityRequest' is not null or undefined
      assertParamExists(
        'createCommunity',
        'createCommunityRequest',
        createCommunityRequest,
      );
      const localVarPath = `/CreateCommunity`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication oauth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'oauth2',
        [],
        configuration,
      );

      if (address != null) {
        localVarHeaderParameter['address'] = String(address);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createCommunityRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [address]
     * @param {number | null} [limit]
     * @param {number | null} [cursor] required for tRPC useInfiniteQuery hook, equivalent to page number
     * @param {GetCommunitiesOrderByEnum} [orderBy]
     * @param {GetCommunitiesOrderDirectionEnum} [orderDirection]
     * @param {GetCommunitiesRelevanceByEnum} [relevanceBy]
     * @param {GetCommunitiesNetworkEnum} [network]
     * @param {GetCommunitiesBaseEnum} [base]
     * @param {Array<number>} [tagIds]
     * @param {boolean} [includeNodeInfo]
     * @param {boolean} [stakeEnabled]
     * @param {boolean} [hasGroups]
     * @param {boolean} [includeLast30DayThreadCount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCommunities: async (
      address?: string,
      limit?: number | null,
      cursor?: number | null,
      orderBy?: GetCommunitiesOrderByEnum,
      orderDirection?: GetCommunitiesOrderDirectionEnum,
      relevanceBy?: GetCommunitiesRelevanceByEnum,
      network?: GetCommunitiesNetworkEnum,
      base?: GetCommunitiesBaseEnum,
      tagIds?: Array<number>,
      includeNodeInfo?: boolean,
      stakeEnabled?: boolean,
      hasGroups?: boolean,
      includeLast30DayThreadCount?: boolean,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/GetCommunities`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      if (cursor !== undefined) {
        localVarQueryParameter['cursor'] = cursor;
      }

      if (orderBy !== undefined) {
        localVarQueryParameter['order_by'] = orderBy;
      }

      if (orderDirection !== undefined) {
        localVarQueryParameter['order_direction'] = orderDirection;
      }

      if (relevanceBy !== undefined) {
        localVarQueryParameter['relevance_by'] = relevanceBy;
      }

      if (network !== undefined) {
        localVarQueryParameter['network'] = network;
      }

      if (base !== undefined) {
        localVarQueryParameter['base'] = base;
      }

      if (tagIds) {
        localVarQueryParameter['tag_ids'] = tagIds;
      }

      if (includeNodeInfo !== undefined) {
        localVarQueryParameter['include_node_info'] = includeNodeInfo;
      }

      if (stakeEnabled !== undefined) {
        localVarQueryParameter['stake_enabled'] = stakeEnabled;
      }

      if (hasGroups !== undefined) {
        localVarQueryParameter['has_groups'] = hasGroups;
      }

      if (includeLast30DayThreadCount !== undefined) {
        localVarQueryParameter['include_last_30_day_thread_count'] =
          includeLast30DayThreadCount;
      }

      if (address != null) {
        localVarHeaderParameter['address'] = String(address);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {string} [address]
     * @param {boolean} [includeNodeInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCommunity: async (
      id: string,
      address?: string,
      includeNodeInfo?: boolean,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getCommunity', 'id', id);
      const localVarPath = `/GetCommunity`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (id !== undefined) {
        localVarQueryParameter['id'] = id;
      }

      if (includeNodeInfo !== undefined) {
        localVarQueryParameter['include_node_info'] = includeNodeInfo;
      }

      if (address != null) {
        localVarHeaderParameter['address'] = String(address);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} communityId
     * @param {string} [address]
     * @param {number | null} [limit]
     * @param {number | null} [cursor] required for tRPC useInfiniteQuery hook, equivalent to page number
     * @param {GetMembersOrderByEnum} [orderBy]
     * @param {GetMembersOrderDirectionEnum} [orderDirection]
     * @param {string} [search]
     * @param {boolean} [includeRoles]
     * @param {GetMembersMembershipsParameter} [memberships]
     * @param {boolean} [includeGroupIds]
     * @param {boolean} [includeStakeBalances]
     * @param {string} [allowedAddresses]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMembers: async (
      communityId: string,
      address?: string,
      limit?: number | null,
      cursor?: number | null,
      orderBy?: GetMembersOrderByEnum,
      orderDirection?: GetMembersOrderDirectionEnum,
      search?: string,
      includeRoles?: boolean,
      memberships?: GetMembersMembershipsParameter,
      includeGroupIds?: boolean,
      includeStakeBalances?: boolean,
      allowedAddresses?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'communityId' is not null or undefined
      assertParamExists('getMembers', 'communityId', communityId);
      const localVarPath = `/GetMembers`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      if (cursor !== undefined) {
        localVarQueryParameter['cursor'] = cursor;
      }

      if (orderBy !== undefined) {
        localVarQueryParameter['order_by'] = orderBy;
      }

      if (orderDirection !== undefined) {
        localVarQueryParameter['order_direction'] = orderDirection;
      }

      if (search !== undefined) {
        localVarQueryParameter['search'] = search;
      }

      if (communityId !== undefined) {
        localVarQueryParameter['community_id'] = communityId;
      }

      if (includeRoles !== undefined) {
        localVarQueryParameter['include_roles'] = includeRoles;
      }

      if (memberships !== undefined) {
        for (const [key, value] of Object.entries(memberships)) {
          localVarQueryParameter[key] = value;
        }
      }

      if (includeGroupIds !== undefined) {
        localVarQueryParameter['include_group_ids'] = includeGroupIds;
      }

      if (includeStakeBalances !== undefined) {
        localVarQueryParameter['include_stake_balances'] = includeStakeBalances;
      }

      if (allowedAddresses !== undefined) {
        localVarQueryParameter['allowedAddresses'] = allowedAddresses;
      }

      if (address != null) {
        localVarHeaderParameter['address'] = String(address);
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CommunityApi - functional programming interface
 * @export
 */
export const CommunityApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    CommunityApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {CreateCommunityRequest} createCommunityRequest
     * @param {string} [address]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCommunity(
      createCommunityRequest: CreateCommunityRequest,
      address?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CreateCommunity200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createCommunity(
        createCommunityRequest,
        address,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['CommunityApi.createCommunity']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} [address]
     * @param {number | null} [limit]
     * @param {number | null} [cursor] required for tRPC useInfiniteQuery hook, equivalent to page number
     * @param {GetCommunitiesOrderByEnum} [orderBy]
     * @param {GetCommunitiesOrderDirectionEnum} [orderDirection]
     * @param {GetCommunitiesRelevanceByEnum} [relevanceBy]
     * @param {GetCommunitiesNetworkEnum} [network]
     * @param {GetCommunitiesBaseEnum} [base]
     * @param {Array<number>} [tagIds]
     * @param {boolean} [includeNodeInfo]
     * @param {boolean} [stakeEnabled]
     * @param {boolean} [hasGroups]
     * @param {boolean} [includeLast30DayThreadCount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCommunities(
      address?: string,
      limit?: number | null,
      cursor?: number | null,
      orderBy?: GetCommunitiesOrderByEnum,
      orderDirection?: GetCommunitiesOrderDirectionEnum,
      relevanceBy?: GetCommunitiesRelevanceByEnum,
      network?: GetCommunitiesNetworkEnum,
      base?: GetCommunitiesBaseEnum,
      tagIds?: Array<number>,
      includeNodeInfo?: boolean,
      stakeEnabled?: boolean,
      hasGroups?: boolean,
      includeLast30DayThreadCount?: boolean,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetCommunities200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCommunities(
        address,
        limit,
        cursor,
        orderBy,
        orderDirection,
        relevanceBy,
        network,
        base,
        tagIds,
        includeNodeInfo,
        stakeEnabled,
        hasGroups,
        includeLast30DayThreadCount,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['CommunityApi.getCommunities']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {string} [address]
     * @param {boolean} [includeNodeInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCommunity(
      id: string,
      address?: string,
      includeNodeInfo?: boolean,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetCommunity200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCommunity(
        id,
        address,
        includeNodeInfo,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['CommunityApi.getCommunity']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} communityId
     * @param {string} [address]
     * @param {number | null} [limit]
     * @param {number | null} [cursor] required for tRPC useInfiniteQuery hook, equivalent to page number
     * @param {GetMembersOrderByEnum} [orderBy]
     * @param {GetMembersOrderDirectionEnum} [orderDirection]
     * @param {string} [search]
     * @param {boolean} [includeRoles]
     * @param {GetMembersMembershipsParameter} [memberships]
     * @param {boolean} [includeGroupIds]
     * @param {boolean} [includeStakeBalances]
     * @param {string} [allowedAddresses]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMembers(
      communityId: string,
      address?: string,
      limit?: number | null,
      cursor?: number | null,
      orderBy?: GetMembersOrderByEnum,
      orderDirection?: GetMembersOrderDirectionEnum,
      search?: string,
      includeRoles?: boolean,
      memberships?: GetMembersMembershipsParameter,
      includeGroupIds?: boolean,
      includeStakeBalances?: boolean,
      allowedAddresses?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetMembers200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMembers(
        communityId,
        address,
        limit,
        cursor,
        orderBy,
        orderDirection,
        search,
        includeRoles,
        memberships,
        includeGroupIds,
        includeStakeBalances,
        allowedAddresses,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['CommunityApi.getMembers']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * CommunityApi - factory interface
 * @export
 */
export const CommunityApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = CommunityApiFp(configuration);
  return {
    /**
     *
     * @param {CreateCommunityRequest} createCommunityRequest
     * @param {string} [address]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCommunity(
      createCommunityRequest: CreateCommunityRequest,
      address?: string,
      options?: any,
    ): AxiosPromise<CreateCommunity200Response> {
      return localVarFp
        .createCommunity(createCommunityRequest, address, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [address]
     * @param {number | null} [limit]
     * @param {number | null} [cursor] required for tRPC useInfiniteQuery hook, equivalent to page number
     * @param {GetCommunitiesOrderByEnum} [orderBy]
     * @param {GetCommunitiesOrderDirectionEnum} [orderDirection]
     * @param {GetCommunitiesRelevanceByEnum} [relevanceBy]
     * @param {GetCommunitiesNetworkEnum} [network]
     * @param {GetCommunitiesBaseEnum} [base]
     * @param {Array<number>} [tagIds]
     * @param {boolean} [includeNodeInfo]
     * @param {boolean} [stakeEnabled]
     * @param {boolean} [hasGroups]
     * @param {boolean} [includeLast30DayThreadCount]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCommunities(
      address?: string,
      limit?: number | null,
      cursor?: number | null,
      orderBy?: GetCommunitiesOrderByEnum,
      orderDirection?: GetCommunitiesOrderDirectionEnum,
      relevanceBy?: GetCommunitiesRelevanceByEnum,
      network?: GetCommunitiesNetworkEnum,
      base?: GetCommunitiesBaseEnum,
      tagIds?: Array<number>,
      includeNodeInfo?: boolean,
      stakeEnabled?: boolean,
      hasGroups?: boolean,
      includeLast30DayThreadCount?: boolean,
      options?: any,
    ): AxiosPromise<GetCommunities200Response> {
      return localVarFp
        .getCommunities(
          address,
          limit,
          cursor,
          orderBy,
          orderDirection,
          relevanceBy,
          network,
          base,
          tagIds,
          includeNodeInfo,
          stakeEnabled,
          hasGroups,
          includeLast30DayThreadCount,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {string} [address]
     * @param {boolean} [includeNodeInfo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCommunity(
      id: string,
      address?: string,
      includeNodeInfo?: boolean,
      options?: any,
    ): AxiosPromise<GetCommunity200Response> {
      return localVarFp
        .getCommunity(id, address, includeNodeInfo, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} communityId
     * @param {string} [address]
     * @param {number | null} [limit]
     * @param {number | null} [cursor] required for tRPC useInfiniteQuery hook, equivalent to page number
     * @param {GetMembersOrderByEnum} [orderBy]
     * @param {GetMembersOrderDirectionEnum} [orderDirection]
     * @param {string} [search]
     * @param {boolean} [includeRoles]
     * @param {GetMembersMembershipsParameter} [memberships]
     * @param {boolean} [includeGroupIds]
     * @param {boolean} [includeStakeBalances]
     * @param {string} [allowedAddresses]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMembers(
      communityId: string,
      address?: string,
      limit?: number | null,
      cursor?: number | null,
      orderBy?: GetMembersOrderByEnum,
      orderDirection?: GetMembersOrderDirectionEnum,
      search?: string,
      includeRoles?: boolean,
      memberships?: GetMembersMembershipsParameter,
      includeGroupIds?: boolean,
      includeStakeBalances?: boolean,
      allowedAddresses?: string,
      options?: any,
    ): AxiosPromise<GetMembers200Response> {
      return localVarFp
        .getMembers(
          communityId,
          address,
          limit,
          cursor,
          orderBy,
          orderDirection,
          search,
          includeRoles,
          memberships,
          includeGroupIds,
          includeStakeBalances,
          allowedAddresses,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * CommunityApi - object-oriented interface
 * @export
 * @class CommunityApi
 * @extends {BaseAPI}
 */
export class CommunityApi extends BaseAPI {
  /**
   *
   * @param {CreateCommunityRequest} createCommunityRequest
   * @param {string} [address]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommunityApi
   */
  public createCommunity(
    createCommunityRequest: CreateCommunityRequest,
    address?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return CommunityApiFp(this.configuration)
      .createCommunity(createCommunityRequest, address, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [address]
   * @param {number | null} [limit]
   * @param {number | null} [cursor] required for tRPC useInfiniteQuery hook, equivalent to page number
   * @param {GetCommunitiesOrderByEnum} [orderBy]
   * @param {GetCommunitiesOrderDirectionEnum} [orderDirection]
   * @param {GetCommunitiesRelevanceByEnum} [relevanceBy]
   * @param {GetCommunitiesNetworkEnum} [network]
   * @param {GetCommunitiesBaseEnum} [base]
   * @param {Array<number>} [tagIds]
   * @param {boolean} [includeNodeInfo]
   * @param {boolean} [stakeEnabled]
   * @param {boolean} [hasGroups]
   * @param {boolean} [includeLast30DayThreadCount]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommunityApi
   */
  public getCommunities(
    address?: string,
    limit?: number | null,
    cursor?: number | null,
    orderBy?: GetCommunitiesOrderByEnum,
    orderDirection?: GetCommunitiesOrderDirectionEnum,
    relevanceBy?: GetCommunitiesRelevanceByEnum,
    network?: GetCommunitiesNetworkEnum,
    base?: GetCommunitiesBaseEnum,
    tagIds?: Array<number>,
    includeNodeInfo?: boolean,
    stakeEnabled?: boolean,
    hasGroups?: boolean,
    includeLast30DayThreadCount?: boolean,
    options?: RawAxiosRequestConfig,
  ) {
    return CommunityApiFp(this.configuration)
      .getCommunities(
        address,
        limit,
        cursor,
        orderBy,
        orderDirection,
        relevanceBy,
        network,
        base,
        tagIds,
        includeNodeInfo,
        stakeEnabled,
        hasGroups,
        includeLast30DayThreadCount,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {string} [address]
   * @param {boolean} [includeNodeInfo]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommunityApi
   */
  public getCommunity(
    id: string,
    address?: string,
    includeNodeInfo?: boolean,
    options?: RawAxiosRequestConfig,
  ) {
    return CommunityApiFp(this.configuration)
      .getCommunity(id, address, includeNodeInfo, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} communityId
   * @param {string} [address]
   * @param {number | null} [limit]
   * @param {number | null} [cursor] required for tRPC useInfiniteQuery hook, equivalent to page number
   * @param {GetMembersOrderByEnum} [orderBy]
   * @param {GetMembersOrderDirectionEnum} [orderDirection]
   * @param {string} [search]
   * @param {boolean} [includeRoles]
   * @param {GetMembersMembershipsParameter} [memberships]
   * @param {boolean} [includeGroupIds]
   * @param {boolean} [includeStakeBalances]
   * @param {string} [allowedAddresses]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommunityApi
   */
  public getMembers(
    communityId: string,
    address?: string,
    limit?: number | null,
    cursor?: number | null,
    orderBy?: GetMembersOrderByEnum,
    orderDirection?: GetMembersOrderDirectionEnum,
    search?: string,
    includeRoles?: boolean,
    memberships?: GetMembersMembershipsParameter,
    includeGroupIds?: boolean,
    includeStakeBalances?: boolean,
    allowedAddresses?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return CommunityApiFp(this.configuration)
      .getMembers(
        communityId,
        address,
        limit,
        cursor,
        orderBy,
        orderDirection,
        search,
        includeRoles,
        memberships,
        includeGroupIds,
        includeStakeBalances,
        allowedAddresses,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const GetCommunitiesOrderByEnum = {
  ProfileCount: 'profile_count',
  LifetimeThreadCount: 'lifetime_thread_count',
  Last30DayThreadCount: 'last_30_day_thread_count',
} as const;
export type GetCommunitiesOrderByEnum =
  (typeof GetCommunitiesOrderByEnum)[keyof typeof GetCommunitiesOrderByEnum];
/**
 * @export
 */
export const GetCommunitiesOrderDirectionEnum = {
  Asc: 'ASC',
  Desc: 'DESC',
} as const;
export type GetCommunitiesOrderDirectionEnum =
  (typeof GetCommunitiesOrderDirectionEnum)[keyof typeof GetCommunitiesOrderDirectionEnum];
/**
 * @export
 */
export const GetCommunitiesRelevanceByEnum = {
  TagIds: 'tag_ids',
  Membership: 'membership',
} as const;
export type GetCommunitiesRelevanceByEnum =
  (typeof GetCommunitiesRelevanceByEnum)[keyof typeof GetCommunitiesRelevanceByEnum];
/**
 * @export
 */
export const GetCommunitiesNetworkEnum = {
  Ethereum: 'ethereum',
  Erc20: 'erc20',
  Erc721: 'erc721',
  Erc1155: 'erc1155',
  Edgeware: 'edgeware',
  Osmosis: 'osmosis',
  Injective: 'injective',
  Solana: 'solana',
  Terra: 'terra',
  Near: 'near',
  Stargaze: 'stargaze',
  Compound: 'compound',
  Evmos: 'evmos',
  Kava: 'kava',
  Kyve: 'kyve',
} as const;
export type GetCommunitiesNetworkEnum =
  (typeof GetCommunitiesNetworkEnum)[keyof typeof GetCommunitiesNetworkEnum];
/**
 * @export
 */
export const GetCommunitiesBaseEnum = {
  Cosmos: 'cosmos',
  Substrate: 'substrate',
  Ethereum: 'ethereum',
  Near: 'near',
  Solana: 'solana',
} as const;
export type GetCommunitiesBaseEnum =
  (typeof GetCommunitiesBaseEnum)[keyof typeof GetCommunitiesBaseEnum];
/**
 * @export
 */
export const GetMembersOrderByEnum = {
  LastActive: 'last_active',
  Name: 'name',
} as const;
export type GetMembersOrderByEnum =
  (typeof GetMembersOrderByEnum)[keyof typeof GetMembersOrderByEnum];
/**
 * @export
 */
export const GetMembersOrderDirectionEnum = {
  Asc: 'ASC',
  Desc: 'DESC',
} as const;
export type GetMembersOrderDirectionEnum =
  (typeof GetMembersOrderDirectionEnum)[keyof typeof GetMembersOrderDirectionEnum];

/**
 * ThreadApi - axios parameter creator
 * @export
 */
export const ThreadApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {CreateThreadRequest} createThreadRequest
     * @param {string} [address]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createThread: async (
      createThreadRequest: CreateThreadRequest,
      address?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createThreadRequest' is not null or undefined
      assertParamExists(
        'createThread',
        'createThreadRequest',
        createThreadRequest,
      );
      const localVarPath = `/CreateThread`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication oauth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'oauth2',
        [],
        configuration,
      );

      if (address != null) {
        localVarHeaderParameter['address'] = String(address);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createThreadRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreateThreadReactionRequest} createThreadReactionRequest
     * @param {string} [address]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createThreadReaction: async (
      createThreadReactionRequest: CreateThreadReactionRequest,
      address?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createThreadReactionRequest' is not null or undefined
      assertParamExists(
        'createThreadReaction',
        'createThreadReactionRequest',
        createThreadReactionRequest,
      );
      const localVarPath = `/CreateThreadReaction`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication oauth2 required
      // oauth required
      await setOAuthToObject(
        localVarHeaderParameter,
        'oauth2',
        [],
        configuration,
      );

      if (address != null) {
        localVarHeaderParameter['address'] = String(address);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createThreadReactionRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ThreadApi - functional programming interface
 * @export
 */
export const ThreadApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ThreadApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {CreateThreadRequest} createThreadRequest
     * @param {string} [address]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createThread(
      createThreadRequest: CreateThreadRequest,
      address?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CreateThread200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createThread(
        createThreadRequest,
        address,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ThreadApi.createThread']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {CreateThreadReactionRequest} createThreadReactionRequest
     * @param {string} [address]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createThreadReaction(
      createThreadReactionRequest: CreateThreadReactionRequest,
      address?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<CreateThreadReaction200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createThreadReaction(
          createThreadReactionRequest,
          address,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ThreadApi.createThreadReaction']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ThreadApi - factory interface
 * @export
 */
export const ThreadApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ThreadApiFp(configuration);
  return {
    /**
     *
     * @param {CreateThreadRequest} createThreadRequest
     * @param {string} [address]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createThread(
      createThreadRequest: CreateThreadRequest,
      address?: string,
      options?: any,
    ): AxiosPromise<CreateThread200Response> {
      return localVarFp
        .createThread(createThreadRequest, address, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CreateThreadReactionRequest} createThreadReactionRequest
     * @param {string} [address]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createThreadReaction(
      createThreadReactionRequest: CreateThreadReactionRequest,
      address?: string,
      options?: any,
    ): AxiosPromise<CreateThreadReaction200Response> {
      return localVarFp
        .createThreadReaction(createThreadReactionRequest, address, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ThreadApi - object-oriented interface
 * @export
 * @class ThreadApi
 * @extends {BaseAPI}
 */
export class ThreadApi extends BaseAPI {
  /**
   *
   * @param {CreateThreadRequest} createThreadRequest
   * @param {string} [address]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ThreadApi
   */
  public createThread(
    createThreadRequest: CreateThreadRequest,
    address?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ThreadApiFp(this.configuration)
      .createThread(createThreadRequest, address, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CreateThreadReactionRequest} createThreadReactionRequest
   * @param {string} [address]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ThreadApi
   */
  public createThreadReaction(
    createThreadReactionRequest: CreateThreadReactionRequest,
    address?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ThreadApiFp(this.configuration)
      .createThreadReaction(createThreadReactionRequest, address, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
