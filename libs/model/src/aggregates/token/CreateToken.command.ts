import { InvalidState, logger, type Command } from '@hicommonwealth/core';
import {
  commonProtocol,
  getErc20TokenInfo,
  getLaunchpadTokenCreatedTransaction,
} from '@hicommonwealth/evm-protocols';
import * as schemas from '@hicommonwealth/schemas';
import { BalanceSourceType } from '@hicommonwealth/shared';
import { z } from 'zod';
import { models } from '../../database';
import { authRoles } from '../../middleware';
import { mustExist } from '../../middleware/guards';

const log = logger(import.meta);

export function CreateToken(): Command<typeof schemas.CreateToken> {
  return {
    ...schemas.CreateToken,
    auth: [authRoles('admin')],
    body: async ({ actor, payload }) => {
      const {
        chain_node_id,
        community_id,
        transaction_hash,
        description,
        icon_url,
      } = payload;

      const chainNode = await models.ChainNode.scope('withPrivateData').findOne(
        {
          where: { id: chain_node_id },
          attributes: ['eth_chain_id', 'url', 'private_url'],
        },
      );
      mustExist('Chain Node', chainNode);

      const tokenData = await getLaunchpadTokenCreatedTransaction({
        rpc: chainNode.private_url! || chainNode.url!,
        transactionHash: transaction_hash,
      });
      if (!tokenData) {
        throw new InvalidState('Transaction not found');
      }

      let tokenInfo: { name: string; symbol: string; totalSupply: bigint };
      try {
        tokenInfo = await getErc20TokenInfo({
          rpc: chainNode.private_url || chainNode.url,
          tokenAddress: tokenData.parsedArgs.tokenAddress,
        });
      } catch (e) {
        log.error(
          `Failed to get erc20 token properties for token ${tokenData.parsedArgs.tokenAddress}`,
          e instanceof Error ? e : undefined,
          {
            e,
          },
        );
        throw new Error(
          `Failed to get erc20 token properties for token ${tokenData.parsedArgs.tokenAddress}`,
        );
      }

      return models.sequelize.transaction(async (transaction) => {
        const [token, created] = await models.LaunchpadToken.findOrCreate({
          where: {
            token_address: tokenData.parsedArgs.tokenAddress.toLowerCase(),
            namespace: tokenData.parsedArgs.namespace,
          },
          defaults: {
            token_address: tokenData.parsedArgs.tokenAddress.toLowerCase(),
            namespace: tokenData.parsedArgs.namespace,
            name: tokenInfo.name,
            symbol: tokenInfo.symbol,
            initial_supply: Number(tokenInfo.totalSupply / BigInt(1e18)),
            liquidity_transferred: false,
            launchpad_liquidity: tokenData.parsedArgs.launchpadLiquidity,
            eth_market_cap_target: commonProtocol.getTargetMarketCap(),
            description: description ?? null,
            icon_url: icon_url ?? null,
            creator_address: actor.address,
          },
          transaction,
        });

        // create token holders group
        let group_id: number | undefined = undefined;
        if (community_id && created) {
          const group = await models.Group.create(
            {
              community_id,
              metadata: {
                name: `${tokenInfo.symbol} Holders`,
                description: `Autogenerated`,
                required_requirements: 1,
              },
              requirements: [
                {
                  rule: 'threshold',
                  data: {
                    threshold: '0',
                    source: {
                      source_type: BalanceSourceType.ERC20,
                      evm_chain_id: chain_node_id,
                      contract_address: tokenData.parsedArgs.tokenAddress,
                    },
                  },
                },
              ],
              is_system_managed: true,
            },
            { transaction },
          );
          group_id = group.id;
        }

        // If token launch is a tokenized thread, link to thread
        if (Number(tokenInfo.name))
          await models.sequelize.query(
            `UPDATE "Threads"
             SET launchpad_token_address = :launchpadTokenAddress,
                 is_linking_token = false
             WHERE id = :threadId
               AND is_linking_token = false;`,
            {
              replacements: {
                launchpadTokenAddress:
                  tokenData.parsedArgs.tokenAddress.toLowerCase(),
                threadId: tokenInfo.name,
              },
              transaction,
            },
          );

        return {
          ...token!.toJSON(),
          community_id,
          group_id,
        } as unknown as z.infer<(typeof schemas.CreateToken)['output']>;
      });
    },
  };
}
