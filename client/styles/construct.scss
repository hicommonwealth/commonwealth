@import 'construct-ui/src/_shared/_colors';
@import 'shared.scss';

//
// text sizing and typography
//

$cui-base-size: 13px;

$cui-font-weight-normal: 400;
$cui-font-weight-bold: 500;
$cui-font-weight-heavy: 500; // this is only used in overrides
$cui-font-weight: $cui-font-weight-normal;

$cui-font-size: floor($cui-base-size * 1.4);

//
// text colors
//

$cui-body-color: $text-color-black;
$cui-hover-color: tint($blue-grey50, 25%);
$cui-base-text-color: lighten($grey800, 3%);

//
// component styling
//

$cui-base-height: floor($cui-base-size * 2.8);

//
// component colors
//

$cui-base-bg-color: $base-bg-color;
$cui-primary-bg-color: $primary-bg-color;
$cui-positive-bg-color: $positive-bg-color;
$cui-negative-bg-color: $negative-bg-color;
$cui-base-border-color: #c5cdd1;
$cui-popover-arrow-border-color: lighten($cui-base-border-color, 8%);

@import 'construct-ui/src/utils/focus-manager/index.scss';
@import 'construct-ui/src/components/index.scss';

//
// construct theme overrides
//

.cui-button {
  font-size: inherit;
}

.cui-button.cui-sm,
.cui-button-group.cui-sm .cui-button,
.cui-menu.cui-sm .cui-button {
  font-size: 16px;
  height: 24px;
  min-height: 24px;
}

.cui-popover-content {
  border-color: $cui-popover-arrow-border-color;
}

.cui-menu .cui-menu-divider {
  border-color: lighten($cui-popover-arrow-border-color, 2%);
}

.cui-button {
  font-weight: $cui-font-weight-bold !important; // fix weight
}

.cui-form .cui-form-label {
  font-size: $cui-font-size * 0.9;
  margin-bottom: 8px;
  font-weight: $cui-font-weight-bold; // fix weight
}

.cui-empty-state .cui-empty-state-header {
  font-weight: $cui-font-weight-bold; // fix weight
}

.cui-callout .cui-callout-header {
  font-weight: $cui-font-weight-bold; // fix weight
}

.cui-list .cui-list-item.cui-selected {
  font-weight: $cui-font-weight-bold; // fix weight
}

.cui-menu .cui-menu-heading {
  font-weight: $cui-font-weight-bold; // fix weight
}

.cui-tabs .cui-tabs-item {
  font-weight: $cui-font-weight-bold; // fix weight
}

.cui-card h4 {
  font-weight: $cui-font-weight-bold; // fix weight
}

.cui-table th {
  font-weight: $cui-font-weight-heavy; // fix weight
}

.cui-switch .cui-control-indicator::after {
  box-sizing: border-box; // fix switch sizing
}

// button link fixes
button,
.cui-button {
  a:hover {
    text-decoration: inherit;
  }
}

// button color fixes
.cui-button {
  background: $background-color-white;
  transition: none;

  &:active,
  &.cui-active {
    background: $background-color-white;
    box-shadow: none;
  }

  &:hover {
    background: $background-color-white;
  }

  // adjust rounded button styles
  &.cui-rounded {
    border-color: $grey200;

    &:hover {
      border-color: $grey700;
    }

    &:active,
    &.cui-active {
      border-color: $grey700;
    }
  }

  // adjust sublabel colors to grey from blue grey
  .cui-button-sublabel {
    color: $grey400;
  }

  &.cui-basic .cui-button-sublabel,
  &.cui-outlined .cui-button-sublabel {
    color: $grey400;
  }

  // adjust basic button styles
  &.cui-basic,
  .cui-button-group.cui-basic & {
    &:hover {
      background: $background-color-white-hover;
      color: $cui-base-text-color;
    }

    &:active,
    &.cui-active {
      background: $background-color-light;
      color: $cui-base-text-color;
    }
  }
}

// set text color on active buttons
.cui-button.cui-primary,
.cui-button-group.cui-primary .cui-button {
  a {
    color: $text-color-white;
  }
}

// set z-index
.cui-button-group .cui-button:active,
.cui-button-group .cui-button.cui-active,
.cui-button-group .cui-button:focus,
.cui-button-group .cui-button:hover {
  z-index: 2;
}

.cui-callout.cui-primary {
  border-color: $text-color-primary-light;
}

.cui-callout a {
  font-weight: 500;
  color: $text-color-primary;
}

// adjust input padding
.cui-input input {
  padding: 4px 8px;
}

// adjust select height
.cui-select select {
  height: 40px;
}

// reduce tag padding
.cui-tag {
  @include cui-tag-sizing(
    $cui-base-height * 0.5,
    $cui-base-padding,
    $cui-font-size
  );

  .cui-icon svg {
    $icon-size: $cui-font-size * 0.75;
    height: $icon-size;
    width: $icon-size;
    max-height: $icon-size;
    max-width: $icon-size;
    min-height: $icon-size;
    min-width: $icon-size;
  }

  @include cui-tag-style(
    $cui-base-text-color,
    $cui-hover-color,
    tint($blue-grey100, 10%)
  );

  @each $size in $cui-sizes {
    &.cui-#{$size},
    .cui-#{$size} & {
      @include cui-tag-sizing(
        map-get($cui-height-map, $size) * 0.5,
        map-get($cui-padding-map, $size),
        map-get($cui-font-size-map, $size)
      );
    }

    &.cui-#{$size} {
      .cui-icon svg {
        $icon-size: map-get($cui-font-size-map, $size) * 0.75;
        height: $icon-size;
        width: $icon-size;
        max-height: $icon-size;
        max-width: $icon-size;
        min-height: $icon-size;
        min-width: $icon-size;
      }
    }
  }
}

// reduce tab padding
.cui-tabs {
  .cui-tabs-item {
    &:first-child {
      margin-left: 0;
    }

    &:last-child {
      margin-right: 0;
    }
  }

  @each $size in $cui-sizes {
    &.cui-#{$size} {
      @include cui-tabs-size(
        map-get($cui-padding-map, $size),
        map-get($cui-font-size-map, $size)
      );
    }
  }
}

.cui-icon {
  color: $text-color-black;
}

// reduce menu padding
.cui-menu {
  max-width: none;
  padding: 4px 0;

  .cui-menu-item.cui-button {
    padding: 0 16px;
    width: 100%;
  }

  > .cui-button.cui-basic {
    color: $text-color-black;

    .cui-icon svg {
      stroke: $text-color-black;
    }

    a {
      color: $text-color-black;
    }
  }

  > .cui-menu-divider {
    margin: 8px 0;
  }

  .cui-button-label {
    width: 100%;
    text-align: left;
  }

  button.cui-button.cui-menu-item {
    font-weight: $cui-font-weight-normal !important; // !important to override the .cui-button style
  }
}

// position items relatively inside cards
.cui-card {
  position: relative;
}

// icon styles
.cui-icon.filled-icon svg {
  fill: currentColor;
}

// empty state override
.cui-empty-state.cui-empty-state-fill {
  z-index: initial;
}

.cui-spinner.cui-spinner-fill {
  z-index: initial;
}

// make spinner visually minimal
.cui-spinner .cui-spinner-icon {
  border-color: transparent;
  border-top-color: $text-color-darker !important;
  border-right-color: $text-color-darker !important;
}

.cui-spinner-message {
  margin-top: 0.8em;
  color: $text-color-darker;
}

// make spinner slower
$spinner-animation-duration: 1700ms;

.cui-spinner-icon {
  animation: loading $spinner-animation-duration infinite linear;
}

// make large spinners bigger
.cui-spinner.cui-lg .cui-spinner-icon,
.cui-lg .cui-spinner .cui-spinner-icon {
  height: 24px;
  width: 24px;
}

.cui-spinner.cui-xl .cui-spinner-icon,
.cui-xl .cui-spinner .cui-spinner-icon {
  height: 40px;
  width: 40px;
  border-width: 4px;
}

// the declarative construct-ui toaster doesn't allow position to be set by default, so we override it here
.cui-toaster.cui-toaster-top {
  top: auto;
  bottom: 0;
  z-index: 99999;
}

// portal z-index
.cui-portal {
  z-index: 102;
}

// prevent overlay from breaking inline text
.cui-overlay-inline {
  display: inline-block;
}

// dialog headers
.cui-dialog-header {
  padding: 16px;

  h3 {
    margin: 6px 0 0;
    font-weight: 600;
  }
}

// dialog entry animation
.cui-overlay-backdrop {
  background: rgba(0, 0, 0, 0.2);

  .fade-enter & {
    opacity: 0.01;
    transition: opacity 0.05s ease;
  }

  .fade-enter-active & {
    opacity: 1;
  }

  .fade-exit & {
    opacity: 0.01;
    transition: opacity 0.05s ease;
  }

  .fade-exit-active & {
    opacity: 0;
  }
}

.cui-dialog-content {
  .fade-enter & {
    opacity: 0.01;
    transform: scale(0.95);
    transition: opacity 0.05s ease, popout 0.05s ease,
      transform 0.05s cubic-bezier(0.54, 1.12, 0.38, 1.11);
  }

  .fade-enter-active & {
    opacity: 1;
    transform: scale(1);
  }

  .fade-exit & {
    transition: opacity 0.05s ease, popout 0.05s ease,
      transform 0.05s cubic-bezier(0.54, 1.12, 0.38, 1.11);
  }

  .fade-exit-active & {
    opacity: 0;
    transform: scale(0.95);
  }
}
