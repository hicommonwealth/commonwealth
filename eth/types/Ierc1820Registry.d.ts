/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface Ierc1820RegistryInterface extends Interface {
  functions: {
    setManager: TypedFunctionDescription<{
      encode([account, newManager]: [string, string]): string;
    }>;

    getManager: TypedFunctionDescription<{
      encode([account]: [string]): string;
    }>;

    setInterfaceImplementer: TypedFunctionDescription<{
      encode([account, interfaceHash, implementer]: [
        string,
        Arrayish,
        string
      ]): string;
    }>;

    getInterfaceImplementer: TypedFunctionDescription<{
      encode([account, interfaceHash]: [string, Arrayish]): string;
    }>;

    interfaceHash: TypedFunctionDescription<{
      encode([interfaceName]: [string]): string;
    }>;

    updateERC165Cache: TypedFunctionDescription<{
      encode([account, interfaceId]: [string, Arrayish]): string;
    }>;

    implementsERC165Interface: TypedFunctionDescription<{
      encode([account, interfaceId]: [string, Arrayish]): string;
    }>;

    implementsERC165InterfaceNoCache: TypedFunctionDescription<{
      encode([account, interfaceId]: [string, Arrayish]): string;
    }>;
  };

  events: {
    InterfaceImplementerSet: TypedEventDescription<{
      encodeTopics([account, interfaceHash, implementer]: [
        string | null,
        Arrayish | null,
        string | null
      ]): string[];
    }>;

    ManagerChanged: TypedEventDescription<{
      encodeTopics([account, newManager]: [
        string | null,
        string | null
      ]): string[];
    }>;
  };
}

export class Ierc1820Registry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Ierc1820Registry;
  attach(addressOrName: string): Ierc1820Registry;
  deployed(): Promise<Ierc1820Registry>;

  on(event: EventFilter | string, listener: Listener): Ierc1820Registry;
  once(event: EventFilter | string, listener: Listener): Ierc1820Registry;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): Ierc1820Registry;
  removeAllListeners(eventName: EventFilter | string): Ierc1820Registry;
  removeListener(eventName: any, listener: Listener): Ierc1820Registry;

  interface: Ierc1820RegistryInterface;

  functions: {
    /**
     * Sets `newManager` as the manager for `account`. A manager of an account is able to set interface implementers for it.     * By default, each account is its own manager. Passing a value of `0x0` in `newManager` will reset the manager to this initial state.     * Emits a {ManagerChanged} event.     * Requirements:     * - the caller must be the current manager for `account`.
     */
    setManager(
      account: string,
      newManager: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Returns the manager for `account`.     * See {setManager}.
     */
    getManager(account: string): Promise<string>;

    /**
     * Sets the `implementer` contract as `account`'s implementer for `interfaceHash`.     * `account` being the zero address is an alias for the caller's address. The zero address can also be used in `implementer` to remove an old one.     * See {interfaceHash} to learn how these are created.     * Emits an {InterfaceImplementerSet} event.     * Requirements:     * - the caller must be the current manager for `account`. - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not end in 28 zeroes). - `implementer` must implement {IERC1820Implementer} and return true when queried for support, unless `implementer` is the caller. See {IERC1820Implementer-canImplementInterfaceForAddress}.
     */
    setInterfaceImplementer(
      account: string,
      interfaceHash: Arrayish,
      implementer: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Returns the implementer of `interfaceHash` for `account`. If no such implementer is registered, returns the zero address.     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28 zeroes), `account` will be queried for support of it.     * `account` being the zero address is an alias for the caller's address.
     */
    getInterfaceImplementer(
      account: string,
      interfaceHash: Arrayish
    ): Promise<string>;

    /**
     * Returns the interface hash for an `interfaceName`, as defined in the corresponding https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].
     */
    interfaceHash(interfaceName: string): Promise<string>;

    /**
     * Updates the cache with whether the contract implements an ERC165 interface or not.
     * @param account Address of the contract for which to update the cache.
     * @param interfaceId ERC165 interface for which to update the cache.
     */
    updateERC165Cache(
      account: string,
      interfaceId: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Checks whether a contract implements an ERC165 interface or not. If the result is not cached a direct lookup on the contract address is performed. If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling {updateERC165Cache} with the contract address.
     * @param account Address of the contract to check.
     * @param interfaceId ERC165 interface to check.
     * @returns True if `account` implements `interfaceId`, false otherwise.
     */
    implementsERC165Interface(
      account: string,
      interfaceId: Arrayish
    ): Promise<boolean>;

    /**
     * Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.
     * @param account Address of the contract to check.
     * @param interfaceId ERC165 interface to check.
     * @returns True if `account` implements `interfaceId`, false otherwise.
     */
    implementsERC165InterfaceNoCache(
      account: string,
      interfaceId: Arrayish
    ): Promise<boolean>;
  };

  /**
   * Sets `newManager` as the manager for `account`. A manager of an account is able to set interface implementers for it.     * By default, each account is its own manager. Passing a value of `0x0` in `newManager` will reset the manager to this initial state.     * Emits a {ManagerChanged} event.     * Requirements:     * - the caller must be the current manager for `account`.
   */
  setManager(
    account: string,
    newManager: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Returns the manager for `account`.     * See {setManager}.
   */
  getManager(account: string): Promise<string>;

  /**
   * Sets the `implementer` contract as `account`'s implementer for `interfaceHash`.     * `account` being the zero address is an alias for the caller's address. The zero address can also be used in `implementer` to remove an old one.     * See {interfaceHash} to learn how these are created.     * Emits an {InterfaceImplementerSet} event.     * Requirements:     * - the caller must be the current manager for `account`. - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not end in 28 zeroes). - `implementer` must implement {IERC1820Implementer} and return true when queried for support, unless `implementer` is the caller. See {IERC1820Implementer-canImplementInterfaceForAddress}.
   */
  setInterfaceImplementer(
    account: string,
    interfaceHash: Arrayish,
    implementer: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Returns the implementer of `interfaceHash` for `account`. If no such implementer is registered, returns the zero address.     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28 zeroes), `account` will be queried for support of it.     * `account` being the zero address is an alias for the caller's address.
   */
  getInterfaceImplementer(
    account: string,
    interfaceHash: Arrayish
  ): Promise<string>;

  /**
   * Returns the interface hash for an `interfaceName`, as defined in the corresponding https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].
   */
  interfaceHash(interfaceName: string): Promise<string>;

  /**
   * Updates the cache with whether the contract implements an ERC165 interface or not.
   * @param account Address of the contract for which to update the cache.
   * @param interfaceId ERC165 interface for which to update the cache.
   */
  updateERC165Cache(
    account: string,
    interfaceId: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Checks whether a contract implements an ERC165 interface or not. If the result is not cached a direct lookup on the contract address is performed. If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling {updateERC165Cache} with the contract address.
   * @param account Address of the contract to check.
   * @param interfaceId ERC165 interface to check.
   * @returns True if `account` implements `interfaceId`, false otherwise.
   */
  implementsERC165Interface(
    account: string,
    interfaceId: Arrayish
  ): Promise<boolean>;

  /**
   * Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.
   * @param account Address of the contract to check.
   * @param interfaceId ERC165 interface to check.
   * @returns True if `account` implements `interfaceId`, false otherwise.
   */
  implementsERC165InterfaceNoCache(
    account: string,
    interfaceId: Arrayish
  ): Promise<boolean>;

  filters: {
    InterfaceImplementerSet(
      account: string | null,
      interfaceHash: Arrayish | null,
      implementer: string | null
    ): EventFilter;

    ManagerChanged(
      account: string | null,
      newManager: string | null
    ): EventFilter;
  };

  estimate: {
    setManager(account: string, newManager: string): Promise<BigNumber>;

    getManager(account: string): Promise<BigNumber>;

    setInterfaceImplementer(
      account: string,
      interfaceHash: Arrayish,
      implementer: string
    ): Promise<BigNumber>;

    getInterfaceImplementer(
      account: string,
      interfaceHash: Arrayish
    ): Promise<BigNumber>;

    interfaceHash(interfaceName: string): Promise<BigNumber>;

    updateERC165Cache(
      account: string,
      interfaceId: Arrayish
    ): Promise<BigNumber>;

    implementsERC165Interface(
      account: string,
      interfaceId: Arrayish
    ): Promise<BigNumber>;

    implementsERC165InterfaceNoCache(
      account: string,
      interfaceId: Arrayish
    ): Promise<BigNumber>;
  };
}
