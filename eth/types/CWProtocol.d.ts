/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface CwProtocolInterface extends Interface {
  functions: {
    allProjects: TypedFunctionDescription<{
      encode([]: [BigNumberish]): string;
    }>;

    feeTo: TypedFunctionDescription<{ encode([]: []): string }>;

    maxFee: TypedFunctionDescription<{ encode([]: []): string }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    projects: TypedFunctionDescription<{ encode([]: [Arrayish]): string }>;

    protocolFee: TypedFunctionDescription<{ encode([]: []): string }>;

    renounceOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    transferOwnership: TypedFunctionDescription<{
      encode([newOwner]: [string]): string;
    }>;

    protocolVersion: TypedFunctionDescription<{ encode([]: []): string }>;

    initialize: TypedFunctionDescription<{ encode([nn]: [string]): string }>;

    createProject: TypedFunctionDescription<{
      encode([
        name,
        ipfsHash,
        cwUrl,
        recipient,
        acceptedTokens,
        nominations,
        threshold,
        deadline,
        curatorFee,
        projectId
      ]: [
        Arrayish,
        Arrayish,
        Arrayish,
        string,
        string[],
        string[],
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    allProjectsLength: TypedFunctionDescription<{ encode([]: []): string }>;

    getAllProjects: TypedFunctionDescription<{ encode([]: []): string }>;

    setFeeTo: TypedFunctionDescription<{ encode([_feeTo]: [string]): string }>;

    setProtocolFee: TypedFunctionDescription<{
      encode([_protocolFee]: [BigNumberish]): string;
    }>;
  };

  events: {
    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [
        string | null,
        string | null
      ]): string[];
    }>;

    ProjectCreation: TypedEventDescription<{
      encodeTopics([projectHash, project, isCollective]: [
        null,
        null,
        null
      ]): string[];
    }>;
  };
}

export class CwProtocol extends Contract {
  connect(signerOrProvider: Signer | Provider | string): CwProtocol;
  attach(addressOrName: string): CwProtocol;
  deployed(): Promise<CwProtocol>;

  on(event: EventFilter | string, listener: Listener): CwProtocol;
  once(event: EventFilter | string, listener: Listener): CwProtocol;
  addListener(eventName: EventFilter | string, listener: Listener): CwProtocol;
  removeAllListeners(eventName: EventFilter | string): CwProtocol;
  removeListener(eventName: any, listener: Listener): CwProtocol;

  interface: CwProtocolInterface;

  functions: {
    allProjects(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "allProjects(uint256)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    feeTo(overrides?: TransactionOverrides): Promise<string>;

    "feeTo()"(overrides?: TransactionOverrides): Promise<string>;

    maxFee(overrides?: TransactionOverrides): Promise<BigNumber>;

    "maxFee()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: TransactionOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: TransactionOverrides): Promise<string>;

    projects(arg0: Arrayish, overrides?: TransactionOverrides): Promise<string>;

    "projects(bytes32)"(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    protocolFee(overrides?: TransactionOverrides): Promise<BigNumber>;

    "protocolFee()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    protocolVersion(overrides?: TransactionOverrides): Promise<string>;

    "protocolVersion()"(overrides?: TransactionOverrides): Promise<string>;

    initialize(
      nn: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      nn: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    createProject(
      name: Arrayish,
      ipfsHash: Arrayish,
      cwUrl: Arrayish,
      recipient: string,
      acceptedTokens: string[],
      nominations: string[],
      threshold: BigNumberish,
      deadline: BigNumberish,
      curatorFee: BigNumberish,
      projectId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "createProject(bytes32,bytes32,bytes32,address,address[],address[],uint256,uint256,uint256,uint256)"(
      name: Arrayish,
      ipfsHash: Arrayish,
      cwUrl: Arrayish,
      recipient: string,
      acceptedTokens: string[],
      nominations: string[],
      threshold: BigNumberish,
      deadline: BigNumberish,
      curatorFee: BigNumberish,
      projectId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    allProjectsLength(overrides?: TransactionOverrides): Promise<BigNumber>;

    "allProjectsLength()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getAllProjects(overrides?: TransactionOverrides): Promise<string[]>;

    "getAllProjects()"(overrides?: TransactionOverrides): Promise<string[]>;

    setFeeTo(
      _feeTo: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setFeeTo(address)"(
      _feeTo: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setProtocolFee(
      _protocolFee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setProtocolFee(uint256)"(
      _protocolFee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  allProjects(
    arg0: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "allProjects(uint256)"(
    arg0: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  feeTo(overrides?: TransactionOverrides): Promise<string>;

  "feeTo()"(overrides?: TransactionOverrides): Promise<string>;

  maxFee(overrides?: TransactionOverrides): Promise<BigNumber>;

  "maxFee()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: TransactionOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  "owner()"(overrides?: TransactionOverrides): Promise<string>;

  projects(arg0: Arrayish, overrides?: TransactionOverrides): Promise<string>;

  "projects(bytes32)"(
    arg0: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  protocolFee(overrides?: TransactionOverrides): Promise<BigNumber>;

  "protocolFee()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  "renounceOwnership()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  protocolVersion(overrides?: TransactionOverrides): Promise<string>;

  "protocolVersion()"(overrides?: TransactionOverrides): Promise<string>;

  initialize(
    nn: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    nn: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  createProject(
    name: Arrayish,
    ipfsHash: Arrayish,
    cwUrl: Arrayish,
    recipient: string,
    acceptedTokens: string[],
    nominations: string[],
    threshold: BigNumberish,
    deadline: BigNumberish,
    curatorFee: BigNumberish,
    projectId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "createProject(bytes32,bytes32,bytes32,address,address[],address[],uint256,uint256,uint256,uint256)"(
    name: Arrayish,
    ipfsHash: Arrayish,
    cwUrl: Arrayish,
    recipient: string,
    acceptedTokens: string[],
    nominations: string[],
    threshold: BigNumberish,
    deadline: BigNumberish,
    curatorFee: BigNumberish,
    projectId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  allProjectsLength(overrides?: TransactionOverrides): Promise<BigNumber>;

  "allProjectsLength()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  getAllProjects(overrides?: TransactionOverrides): Promise<string[]>;

  "getAllProjects()"(overrides?: TransactionOverrides): Promise<string[]>;

  setFeeTo(
    _feeTo: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setFeeTo(address)"(
    _feeTo: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setProtocolFee(
    _protocolFee: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setProtocolFee(uint256)"(
    _protocolFee: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    ProjectCreation(
      projectHash: null,
      project: null,
      isCollective: null
    ): EventFilter;
  };

  estimate: {
    allProjects(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "allProjects(uint256)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    feeTo(overrides?: TransactionOverrides): Promise<BigNumber>;

    "feeTo()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    maxFee(overrides?: TransactionOverrides): Promise<BigNumber>;

    "maxFee()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    projects(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "projects(bytes32)"(
      arg0: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    protocolFee(overrides?: TransactionOverrides): Promise<BigNumber>;

    "protocolFee()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    protocolVersion(overrides?: TransactionOverrides): Promise<BigNumber>;

    "protocolVersion()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    initialize(
      nn: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "initialize(address)"(
      nn: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    createProject(
      name: Arrayish,
      ipfsHash: Arrayish,
      cwUrl: Arrayish,
      recipient: string,
      acceptedTokens: string[],
      nominations: string[],
      threshold: BigNumberish,
      deadline: BigNumberish,
      curatorFee: BigNumberish,
      projectId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "createProject(bytes32,bytes32,bytes32,address,address[],address[],uint256,uint256,uint256,uint256)"(
      name: Arrayish,
      ipfsHash: Arrayish,
      cwUrl: Arrayish,
      recipient: string,
      acceptedTokens: string[],
      nominations: string[],
      threshold: BigNumberish,
      deadline: BigNumberish,
      curatorFee: BigNumberish,
      projectId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    allProjectsLength(overrides?: TransactionOverrides): Promise<BigNumber>;

    "allProjectsLength()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getAllProjects(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getAllProjects()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    setFeeTo(
      _feeTo: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setFeeTo(address)"(
      _feeTo: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setProtocolFee(
      _protocolFee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setProtocolFee(uint256)"(
      _protocolFee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
