/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface Erc777Interface extends Interface {
  functions: {
    name: TypedFunctionDescription<{ encode([]: []): string }>;

    symbol: TypedFunctionDescription<{ encode([]: []): string }>;

    decimals: TypedFunctionDescription<{ encode([]: []): string }>;

    granularity: TypedFunctionDescription<{ encode([]: []): string }>;

    totalSupply: TypedFunctionDescription<{ encode([]: []): string }>;

    balanceOf: TypedFunctionDescription<{
      encode([tokenHolder]: [string]): string;
    }>;

    send: TypedFunctionDescription<{
      encode([recipient, amount, data]: [
        string,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    transfer: TypedFunctionDescription<{
      encode([recipient, amount]: [string, BigNumberish]): string;
    }>;

    burn: TypedFunctionDescription<{
      encode([amount, data]: [BigNumberish, Arrayish]): string;
    }>;

    isOperatorFor: TypedFunctionDescription<{
      encode([operator, tokenHolder]: [string, string]): string;
    }>;

    authorizeOperator: TypedFunctionDescription<{
      encode([operator]: [string]): string;
    }>;

    revokeOperator: TypedFunctionDescription<{
      encode([operator]: [string]): string;
    }>;

    defaultOperators: TypedFunctionDescription<{ encode([]: []): string }>;

    operatorSend: TypedFunctionDescription<{
      encode([sender, recipient, amount, data, operatorData]: [
        string,
        string,
        BigNumberish,
        Arrayish,
        Arrayish
      ]): string;
    }>;

    operatorBurn: TypedFunctionDescription<{
      encode([account, amount, data, operatorData]: [
        string,
        BigNumberish,
        Arrayish,
        Arrayish
      ]): string;
    }>;

    allowance: TypedFunctionDescription<{
      encode([holder, spender]: [string, string]): string;
    }>;

    approve: TypedFunctionDescription<{
      encode([spender, value]: [string, BigNumberish]): string;
    }>;

    transferFrom: TypedFunctionDescription<{
      encode([holder, recipient, amount]: [
        string,
        string,
        BigNumberish
      ]): string;
    }>;
  };

  events: {
    Approval: TypedEventDescription<{
      encodeTopics([owner, spender, value]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    AuthorizedOperator: TypedEventDescription<{
      encodeTopics([operator, tokenHolder]: [
        string | null,
        string | null
      ]): string[];
    }>;

    Burned: TypedEventDescription<{
      encodeTopics([operator, from, amount, data, operatorData]: [
        string | null,
        string | null,
        null,
        null,
        null
      ]): string[];
    }>;

    Minted: TypedEventDescription<{
      encodeTopics([operator, to, amount, data, operatorData]: [
        string | null,
        string | null,
        null,
        null,
        null
      ]): string[];
    }>;

    RevokedOperator: TypedEventDescription<{
      encodeTopics([operator, tokenHolder]: [
        string | null,
        string | null
      ]): string[];
    }>;

    Sent: TypedEventDescription<{
      encodeTopics([operator, from, to, amount, data, operatorData]: [
        string | null,
        string | null,
        string | null,
        null,
        null,
        null
      ]): string[];
    }>;

    Transfer: TypedEventDescription<{
      encodeTopics([from, to, value]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;
  };
}

export class Erc777 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Erc777;
  attach(addressOrName: string): Erc777;
  deployed(): Promise<Erc777>;

  on(event: EventFilter | string, listener: Listener): Erc777;
  once(event: EventFilter | string, listener: Listener): Erc777;
  addListener(eventName: EventFilter | string, listener: Listener): Erc777;
  removeAllListeners(eventName: EventFilter | string): Erc777;
  removeListener(eventName: any, listener: Listener): Erc777;

  interface: Erc777Interface;

  functions: {
    /**
     * See {IERC777-name}.
     */
    name(): Promise<string>;

    /**
     * See {IERC777-symbol}.
     */
    symbol(): Promise<string>;

    /**
     * See {ERC20Detailed-decimals}.     * Always returns 18, as per the [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).
     */
    decimals(): Promise<number>;

    /**
     * See {IERC777-granularity}.     * This implementation always returns `1`.
     */
    granularity(): Promise<BigNumber>;

    /**
     * See {IERC777-totalSupply}.
     */
    totalSupply(): Promise<BigNumber>;

    /**
     * Returns the amount of tokens owned by an account (`tokenHolder`).
     */
    balanceOf(tokenHolder: string): Promise<BigNumber>;

    /**
     * See {IERC777-send}.     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.
     */
    send(
      recipient: string,
      amount: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * See {IERC20-transfer}.     * Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient} interface if it is a contract.     * Also emits a {Sent} event.
     */
    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * See {IERC777-burn}.     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.
     */
    burn(
      amount: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * See {IERC777-isOperatorFor}.
     */
    isOperatorFor(operator: string, tokenHolder: string): Promise<boolean>;

    /**
     * See {IERC777-authorizeOperator}.
     */
    authorizeOperator(
      operator: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * See {IERC777-revokeOperator}.
     */
    revokeOperator(
      operator: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * See {IERC777-defaultOperators}.
     */
    defaultOperators(): Promise<string[]>;

    /**
     * See {IERC777-operatorSend}.     * Emits {Sent} and {IERC20-Transfer} events.
     */
    operatorSend(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: Arrayish,
      operatorData: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * See {IERC777-operatorBurn}.     * Emits {Burned} and {IERC20-Transfer} events.
     */
    operatorBurn(
      account: string,
      amount: BigNumberish,
      data: Arrayish,
      operatorData: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * See {IERC20-allowance}.     * Note that operator and allowance concepts are orthogonal: operators may not have allowance, and accounts with allowance may not be operators themselves.
     */
    allowance(holder: string, spender: string): Promise<BigNumber>;

    /**
     * See {IERC20-approve}.     * Note that accounts cannot have allowance issued by their operators.
     */
    approve(
      spender: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * See {IERC20-transferFrom}.    * Note that operator and allowance concepts are orthogonal: operators cannot call `transferFrom` (unless they have allowance), and accounts with allowance cannot call `operatorSend` (unless they are operators).    * Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.
     */
    transferFrom(
      holder: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  /**
   * See {IERC777-name}.
   */
  name(): Promise<string>;

  /**
   * See {IERC777-symbol}.
   */
  symbol(): Promise<string>;

  /**
   * See {ERC20Detailed-decimals}.     * Always returns 18, as per the [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).
   */
  decimals(): Promise<number>;

  /**
   * See {IERC777-granularity}.     * This implementation always returns `1`.
   */
  granularity(): Promise<BigNumber>;

  /**
   * See {IERC777-totalSupply}.
   */
  totalSupply(): Promise<BigNumber>;

  /**
   * Returns the amount of tokens owned by an account (`tokenHolder`).
   */
  balanceOf(tokenHolder: string): Promise<BigNumber>;

  /**
   * See {IERC777-send}.     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.
   */
  send(
    recipient: string,
    amount: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * See {IERC20-transfer}.     * Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient} interface if it is a contract.     * Also emits a {Sent} event.
   */
  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * See {IERC777-burn}.     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.
   */
  burn(
    amount: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * See {IERC777-isOperatorFor}.
   */
  isOperatorFor(operator: string, tokenHolder: string): Promise<boolean>;

  /**
   * See {IERC777-authorizeOperator}.
   */
  authorizeOperator(
    operator: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * See {IERC777-revokeOperator}.
   */
  revokeOperator(
    operator: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * See {IERC777-defaultOperators}.
   */
  defaultOperators(): Promise<string[]>;

  /**
   * See {IERC777-operatorSend}.     * Emits {Sent} and {IERC20-Transfer} events.
   */
  operatorSend(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    data: Arrayish,
    operatorData: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * See {IERC777-operatorBurn}.     * Emits {Burned} and {IERC20-Transfer} events.
   */
  operatorBurn(
    account: string,
    amount: BigNumberish,
    data: Arrayish,
    operatorData: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * See {IERC20-allowance}.     * Note that operator and allowance concepts are orthogonal: operators may not have allowance, and accounts with allowance may not be operators themselves.
   */
  allowance(holder: string, spender: string): Promise<BigNumber>;

  /**
   * See {IERC20-approve}.     * Note that accounts cannot have allowance issued by their operators.
   */
  approve(
    spender: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * See {IERC20-transferFrom}.    * Note that operator and allowance concepts are orthogonal: operators cannot call `transferFrom` (unless they have allowance), and accounts with allowance cannot call `operatorSend` (unless they are operators).    * Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.
   */
  transferFrom(
    holder: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    AuthorizedOperator(
      operator: string | null,
      tokenHolder: string | null
    ): EventFilter;

    Burned(
      operator: string | null,
      from: string | null,
      amount: null,
      data: null,
      operatorData: null
    ): EventFilter;

    Minted(
      operator: string | null,
      to: string | null,
      amount: null,
      data: null,
      operatorData: null
    ): EventFilter;

    RevokedOperator(
      operator: string | null,
      tokenHolder: string | null
    ): EventFilter;

    Sent(
      operator: string | null,
      from: string | null,
      to: string | null,
      amount: null,
      data: null,
      operatorData: null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;
  };

  estimate: {
    name(): Promise<BigNumber>;

    symbol(): Promise<BigNumber>;

    decimals(): Promise<BigNumber>;

    granularity(): Promise<BigNumber>;

    totalSupply(): Promise<BigNumber>;

    balanceOf(tokenHolder: string): Promise<BigNumber>;

    send(
      recipient: string,
      amount: BigNumberish,
      data: Arrayish
    ): Promise<BigNumber>;

    transfer(recipient: string, amount: BigNumberish): Promise<BigNumber>;

    burn(amount: BigNumberish, data: Arrayish): Promise<BigNumber>;

    isOperatorFor(operator: string, tokenHolder: string): Promise<BigNumber>;

    authorizeOperator(operator: string): Promise<BigNumber>;

    revokeOperator(operator: string): Promise<BigNumber>;

    defaultOperators(): Promise<BigNumber>;

    operatorSend(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: Arrayish,
      operatorData: Arrayish
    ): Promise<BigNumber>;

    operatorBurn(
      account: string,
      amount: BigNumberish,
      data: Arrayish,
      operatorData: Arrayish
    ): Promise<BigNumber>;

    allowance(holder: string, spender: string): Promise<BigNumber>;

    approve(spender: string, value: BigNumberish): Promise<BigNumber>;

    transferFrom(
      holder: string,
      recipient: string,
      amount: BigNumberish
    ): Promise<BigNumber>;
  };
}
