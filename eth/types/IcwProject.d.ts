/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface IcwProjectInterface extends Interface {
  functions: {
    funded: TypedFunctionDescription<{ encode([]: []): string }>;

    name: TypedFunctionDescription<{ encode([]: []): string }>;

    ipfsHash: TypedFunctionDescription<{ encode([]: []): string }>;

    cwUrl: TypedFunctionDescription<{ encode([]: []): string }>;

    beneficiary: TypedFunctionDescription<{ encode([]: []): string }>;

    creator: TypedFunctionDescription<{ encode([]: []): string }>;

    projectId: TypedFunctionDescription<{ encode([]: []): string }>;

    totalFunding: TypedFunctionDescription<{ encode([]: []): string }>;

    threshold: TypedFunctionDescription<{ encode([]: []): string }>;

    deadline: TypedFunctionDescription<{ encode([]: []): string }>;

    curatorFee: TypedFunctionDescription<{ encode([]: []): string }>;

    factory: TypedFunctionDescription<{ encode([]: []): string }>;

    bToken: TypedFunctionDescription<{ encode([]: []): string }>;

    cToken: TypedFunctionDescription<{ encode([]: []): string }>;

    isAcceptedToken: TypedFunctionDescription<{
      encode([token]: [string]): string;
    }>;

    backWithETH: TypedFunctionDescription<{ encode([]: []): string }>;

    back: TypedFunctionDescription<{
      encode([token, value]: [string, BigNumberish]): string;
    }>;

    curateWithETH: TypedFunctionDescription<{ encode([]: []): string }>;

    curate: TypedFunctionDescription<{
      encode([token, value]: [string, BigNumberish]): string;
    }>;

    withdraw: TypedFunctionDescription<{ encode([]: []): string }>;

    redeemBToken: TypedFunctionDescription<{
      encode([token, valueToRemove]: [string, BigNumberish]): string;
    }>;

    redeemCToken: TypedFunctionDescription<{
      encode([token, valueToRemove]: [string, BigNumberish]): string;
    }>;

    setName: TypedFunctionDescription<{ encode([_name]: [Arrayish]): string }>;

    setIpfsHash: TypedFunctionDescription<{
      encode([_ipfsHash]: [Arrayish]): string;
    }>;

    setCwUrl: TypedFunctionDescription<{
      encode([_cwUrl]: [Arrayish]): string;
    }>;

    setBeneficiary: TypedFunctionDescription<{
      encode([_beneficiary]: [string]): string;
    }>;

    setThreshold: TypedFunctionDescription<{
      encode([_threshold]: [BigNumberish]): string;
    }>;

    addNominations: TypedFunctionDescription<{
      encode([_nominations]: [string[]]): string;
    }>;

    removeNominations: TypedFunctionDescription<{
      encode([_nominations]: [string[]]): string;
    }>;

    addAcceptedTokens: TypedFunctionDescription<{
      encode([_tokens]: [string[]]): string;
    }>;

    isNominationed: TypedFunctionDescription<{
      encode([nomination]: [string]): string;
    }>;
  };

  events: {
    Curate: TypedEventDescription<{
      encodeTopics([sender, amount]: [null, null]): string[];
    }>;

    Deposit: TypedEventDescription<{
      encodeTopics([sender, amount]: [null, null]): string[];
    }>;

    Failed: TypedEventDescription<{ encodeTopics([]: []): string[] }>;

    Nominated: TypedEventDescription<{
      encodeTopics([_projectId, _address]: [null, null]): string[];
    }>;

    Proposed: TypedEventDescription<{
      encodeTopics([creator, threshold, deadline]: [
        null,
        null,
        null
      ]): string[];
    }>;

    Succeeded: TypedEventDescription<{ encodeTopics([]: []): string[] }>;

    Withdraw: TypedEventDescription<{
      encodeTopics([sender, amount]: [null, null]): string[];
    }>;
  };
}

export class IcwProject extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IcwProject;
  attach(addressOrName: string): IcwProject;
  deployed(): Promise<IcwProject>;

  on(event: EventFilter | string, listener: Listener): IcwProject;
  once(event: EventFilter | string, listener: Listener): IcwProject;
  addListener(eventName: EventFilter | string, listener: Listener): IcwProject;
  removeAllListeners(eventName: EventFilter | string): IcwProject;
  removeListener(eventName: any, listener: Listener): IcwProject;

  interface: IcwProjectInterface;

  functions: {
    funded(overrides?: TransactionOverrides): Promise<boolean>;

    "funded()"(overrides?: TransactionOverrides): Promise<boolean>;

    name(overrides?: TransactionOverrides): Promise<string>;

    "name()"(overrides?: TransactionOverrides): Promise<string>;

    ipfsHash(overrides?: TransactionOverrides): Promise<string>;

    "ipfsHash()"(overrides?: TransactionOverrides): Promise<string>;

    cwUrl(overrides?: TransactionOverrides): Promise<string>;

    "cwUrl()"(overrides?: TransactionOverrides): Promise<string>;

    beneficiary(overrides?: TransactionOverrides): Promise<string>;

    "beneficiary()"(overrides?: TransactionOverrides): Promise<string>;

    creator(overrides?: TransactionOverrides): Promise<string>;

    "creator()"(overrides?: TransactionOverrides): Promise<string>;

    projectId(overrides?: TransactionOverrides): Promise<BigNumber>;

    "projectId()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    totalFunding(overrides?: TransactionOverrides): Promise<BigNumber>;

    "totalFunding()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    threshold(overrides?: TransactionOverrides): Promise<BigNumber>;

    "threshold()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    deadline(overrides?: TransactionOverrides): Promise<BigNumber>;

    "deadline()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    curatorFee(overrides?: TransactionOverrides): Promise<BigNumber>;

    "curatorFee()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    factory(overrides?: TransactionOverrides): Promise<string>;

    "factory()"(overrides?: TransactionOverrides): Promise<string>;

    bToken(overrides?: TransactionOverrides): Promise<string>;

    "bToken()"(overrides?: TransactionOverrides): Promise<string>;

    cToken(overrides?: TransactionOverrides): Promise<string>;

    "cToken()"(overrides?: TransactionOverrides): Promise<string>;

    isAcceptedToken(
      token: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "isAcceptedToken(address)"(
      token: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    backWithETH(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    "backWithETH()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    back(
      token: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "back(address,uint256)"(
      token: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    curateWithETH(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "curateWithETH()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    curate(
      token: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "curate(address,uint256)"(
      token: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdraw(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    "withdraw()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    redeemBToken(
      token: string,
      valueToRemove: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "redeemBToken(address,uint256)"(
      token: string,
      valueToRemove: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    redeemCToken(
      token: string,
      valueToRemove: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "redeemCToken(address,uint256)"(
      token: string,
      valueToRemove: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setName(
      _name: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setName(bytes32)"(
      _name: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setIpfsHash(
      _ipfsHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setIpfsHash(bytes32)"(
      _ipfsHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setCwUrl(
      _cwUrl: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setCwUrl(bytes32)"(
      _cwUrl: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setBeneficiary(
      _beneficiary: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setBeneficiary(address)"(
      _beneficiary: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setThreshold(
      _threshold: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setThreshold(uint256)"(
      _threshold: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    addNominations(
      _nominations: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "addNominations(address[])"(
      _nominations: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    removeNominations(
      _nominations: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "removeNominations(address[])"(
      _nominations: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    addAcceptedTokens(
      _tokens: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "addAcceptedTokens(address[])"(
      _tokens: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    isNominationed(
      nomination: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "isNominationed(address)"(
      nomination: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;
  };

  funded(overrides?: TransactionOverrides): Promise<boolean>;

  "funded()"(overrides?: TransactionOverrides): Promise<boolean>;

  name(overrides?: TransactionOverrides): Promise<string>;

  "name()"(overrides?: TransactionOverrides): Promise<string>;

  ipfsHash(overrides?: TransactionOverrides): Promise<string>;

  "ipfsHash()"(overrides?: TransactionOverrides): Promise<string>;

  cwUrl(overrides?: TransactionOverrides): Promise<string>;

  "cwUrl()"(overrides?: TransactionOverrides): Promise<string>;

  beneficiary(overrides?: TransactionOverrides): Promise<string>;

  "beneficiary()"(overrides?: TransactionOverrides): Promise<string>;

  creator(overrides?: TransactionOverrides): Promise<string>;

  "creator()"(overrides?: TransactionOverrides): Promise<string>;

  projectId(overrides?: TransactionOverrides): Promise<BigNumber>;

  "projectId()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  totalFunding(overrides?: TransactionOverrides): Promise<BigNumber>;

  "totalFunding()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  threshold(overrides?: TransactionOverrides): Promise<BigNumber>;

  "threshold()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  deadline(overrides?: TransactionOverrides): Promise<BigNumber>;

  "deadline()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  curatorFee(overrides?: TransactionOverrides): Promise<BigNumber>;

  "curatorFee()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  factory(overrides?: TransactionOverrides): Promise<string>;

  "factory()"(overrides?: TransactionOverrides): Promise<string>;

  bToken(overrides?: TransactionOverrides): Promise<string>;

  "bToken()"(overrides?: TransactionOverrides): Promise<string>;

  cToken(overrides?: TransactionOverrides): Promise<string>;

  "cToken()"(overrides?: TransactionOverrides): Promise<string>;

  isAcceptedToken(
    token: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "isAcceptedToken(address)"(
    token: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  backWithETH(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  "backWithETH()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  back(
    token: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "back(address,uint256)"(
    token: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  curateWithETH(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  "curateWithETH()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  curate(
    token: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "curate(address,uint256)"(
    token: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  withdraw(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  "withdraw()"(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  redeemBToken(
    token: string,
    valueToRemove: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "redeemBToken(address,uint256)"(
    token: string,
    valueToRemove: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  redeemCToken(
    token: string,
    valueToRemove: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "redeemCToken(address,uint256)"(
    token: string,
    valueToRemove: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setName(
    _name: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setName(bytes32)"(
    _name: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setIpfsHash(
    _ipfsHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setIpfsHash(bytes32)"(
    _ipfsHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setCwUrl(
    _cwUrl: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setCwUrl(bytes32)"(
    _cwUrl: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setBeneficiary(
    _beneficiary: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setBeneficiary(address)"(
    _beneficiary: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setThreshold(
    _threshold: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setThreshold(uint256)"(
    _threshold: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  addNominations(
    _nominations: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "addNominations(address[])"(
    _nominations: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  removeNominations(
    _nominations: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "removeNominations(address[])"(
    _nominations: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  addAcceptedTokens(
    _tokens: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "addAcceptedTokens(address[])"(
    _tokens: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  isNominationed(
    nomination: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "isNominationed(address)"(
    nomination: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  filters: {
    Curate(sender: null, amount: null): EventFilter;

    Deposit(sender: null, amount: null): EventFilter;

    Failed(): EventFilter;

    Nominated(_projectId: null, _address: null): EventFilter;

    Proposed(creator: null, threshold: null, deadline: null): EventFilter;

    Succeeded(): EventFilter;

    Withdraw(sender: null, amount: null): EventFilter;
  };

  estimate: {
    funded(overrides?: TransactionOverrides): Promise<BigNumber>;

    "funded()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    name(overrides?: TransactionOverrides): Promise<BigNumber>;

    "name()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    ipfsHash(overrides?: TransactionOverrides): Promise<BigNumber>;

    "ipfsHash()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    cwUrl(overrides?: TransactionOverrides): Promise<BigNumber>;

    "cwUrl()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    beneficiary(overrides?: TransactionOverrides): Promise<BigNumber>;

    "beneficiary()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    creator(overrides?: TransactionOverrides): Promise<BigNumber>;

    "creator()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    projectId(overrides?: TransactionOverrides): Promise<BigNumber>;

    "projectId()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    totalFunding(overrides?: TransactionOverrides): Promise<BigNumber>;

    "totalFunding()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    threshold(overrides?: TransactionOverrides): Promise<BigNumber>;

    "threshold()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    deadline(overrides?: TransactionOverrides): Promise<BigNumber>;

    "deadline()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    curatorFee(overrides?: TransactionOverrides): Promise<BigNumber>;

    "curatorFee()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    factory(overrides?: TransactionOverrides): Promise<BigNumber>;

    "factory()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    bToken(overrides?: TransactionOverrides): Promise<BigNumber>;

    "bToken()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    cToken(overrides?: TransactionOverrides): Promise<BigNumber>;

    "cToken()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    isAcceptedToken(
      token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "isAcceptedToken(address)"(
      token: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    backWithETH(overrides?: TransactionOverrides): Promise<BigNumber>;

    "backWithETH()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    back(
      token: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "back(address,uint256)"(
      token: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    curateWithETH(overrides?: TransactionOverrides): Promise<BigNumber>;

    "curateWithETH()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    curate(
      token: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "curate(address,uint256)"(
      token: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    withdraw(overrides?: TransactionOverrides): Promise<BigNumber>;

    "withdraw()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    redeemBToken(
      token: string,
      valueToRemove: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "redeemBToken(address,uint256)"(
      token: string,
      valueToRemove: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    redeemCToken(
      token: string,
      valueToRemove: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "redeemCToken(address,uint256)"(
      token: string,
      valueToRemove: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setName(
      _name: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setName(bytes32)"(
      _name: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setIpfsHash(
      _ipfsHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setIpfsHash(bytes32)"(
      _ipfsHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setCwUrl(
      _cwUrl: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setCwUrl(bytes32)"(
      _cwUrl: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setBeneficiary(
      _beneficiary: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setBeneficiary(address)"(
      _beneficiary: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setThreshold(
      _threshold: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setThreshold(uint256)"(
      _threshold: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    addNominations(
      _nominations: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "addNominations(address[])"(
      _nominations: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    removeNominations(
      _nominations: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "removeNominations(address[])"(
      _nominations: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    addAcceptedTokens(
      _tokens: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "addAcceptedTokens(address[])"(
      _tokens: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    isNominationed(
      nomination: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "isNominationed(address)"(
      nomination: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
