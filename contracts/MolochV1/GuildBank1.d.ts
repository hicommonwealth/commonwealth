/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface GuildBank1Interface extends Interface {
  functions: {
    renounceOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    isOwner: TypedFunctionDescription<{ encode([]: []): string }>;

    approvedToken: TypedFunctionDescription<{ encode([]: []): string }>;

    transferOwnership: TypedFunctionDescription<{
      encode([newOwner]: [string]): string;
    }>;

    withdraw: TypedFunctionDescription<{
      encode([receiver, shares, totalShares]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;
  };

  events: {
    Withdrawal: TypedEventDescription<{
      encodeTopics([receiver, amount]: [string | null, null]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [
        string | null,
        string | null
      ]): string[];
    }>;
  };
}

export class GuildBank1 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): GuildBank1;
  attach(addressOrName: string): GuildBank1;
  deployed(): Promise<GuildBank1>;

  on(event: EventFilter | string, listener: Listener): GuildBank1;
  once(event: EventFilter | string, listener: Listener): GuildBank1;
  addListener(eventName: EventFilter | string, listener: Listener): GuildBank1;
  removeAllListeners(eventName: EventFilter | string): GuildBank1;
  removeListener(eventName: any, listener: Listener): GuildBank1;

  interface: GuildBank1Interface;

  functions: {
    renounceOwnership(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    owner(): Promise<string>;

    isOwner(): Promise<boolean>;

    approvedToken(): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdraw(
      receiver: string,
      shares: BigNumberish,
      totalShares: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  renounceOwnership(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  owner(): Promise<string>;

  isOwner(): Promise<boolean>;

  approvedToken(): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  withdraw(
    receiver: string,
    shares: BigNumberish,
    totalShares: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    Withdrawal(receiver: string | null, amount: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimate: {
    renounceOwnership(): Promise<BigNumber>;

    owner(): Promise<BigNumber>;

    isOwner(): Promise<BigNumber>;

    approvedToken(): Promise<BigNumber>;

    transferOwnership(newOwner: string): Promise<BigNumber>;

    withdraw(
      receiver: string,
      shares: BigNumberish,
      totalShares: BigNumberish
    ): Promise<BigNumber>;
  };
}
