name: Pre-Release Notes & Merge

on:
  workflow_dispatch: # Manual trigger

  # Also run once a day at 5pm et
  schedule:
    - cron: "0 22 * * *"

jobs:
  open-pr-beta-to-production:
    name: Open/ensure PR beta → production
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if beta is ahead of production
        id: ahead
        run: |
          git fetch origin beta production
          # returns nonzero if there are commits in beta not in production
          if git log --oneline origin/production..origin/beta | grep .; then
            echo "ahead=true" >> $GITHUB_OUTPUT
          else
            echo "ahead=false" >> $GITHUB_OUTPUT
          fi

      - name: Ensure PR exists
        if: steps.ahead.outputs.ahead == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const head = "beta";
            const base = "production";

            // Is there already an open PR from beta -> production?
            const { data: prs } = await github.rest.pulls.list({
              owner, repo, state: "open", head: `${owner}:${head}`, base
            });

            if (prs.length > 0) {
              core.info(`Open PR already exists: #${prs[0].number}`);
              return;
            }

            // Create a new PR
            const title = "Merge beta → production";
            const body = [
              "Automated PR to merge **beta** into **production**.",
              "",
              "- Created by GitHub Actions.",
              "- Triggers: push/schedule/workflow_run."
            ].join("\n");

            const { data: pr } = await github.rest.pulls.create({
              owner, repo, title, head, base, body, maintainer_can_modify: true
            });

            core.info(`Created PR #${pr.number}`);

  generate-notes-and-merge:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure full history is available for release notes

      - name: Generate Release Notes
        id: release_notes
        run: |
          git fetch origin production master
          
          NOTES=$(git log origin/production..origin/master --pretty="«%s»¦«%aN»" | \
            grep -E '#[0-9]+' | \
            sed -E \
              -e 's/«Merge pull request #([0-9]+)[^»]*»¦«([^»]+)»/- [\1](https:\/\/github.com\/hicommonwealth\/commonwealth\/pull\/\1) @\2/' \
              -e 's/«(.*) \(#([0-9]+)\)»¦«([^»]+)»/- [\1](https:\/\/github.com\/hicommonwealth\/commonwealth\/pull\/\2) @\3/')

          echo "RAW_NOTES<<EOF" >> $GITHUB_ENV
          echo "$NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # Apply optional name mapping (sed expressions)
          if [ -n "${NAME_MAPPING:-}" ]; then
            MAPPED=$(echo "$NOTES" | sed -E "$NAME_MAPPING")
          else
            MAPPED="$NOTES"
          fi

          echo "MAPPED_NOTES<<EOF" >> $GITHUB_ENV
          echo "$MAPPED" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Send Mapped Release Notes to Slack
        env:
          SLACK_RELEASE_WEBHOOK_URL: ${{ secrets.SLACK_RELEASE_WEBHOOK_URL }}
          MAPPED_NOTES: ${{ env.MAPPED_NOTES }}
        run: |
          if [ -n "$MAPPED_NOTES" ]; then
            PAYLOAD=$(jq -n --arg text "$(echo -e "Pre-Release Notes:\nhttps://qa.commonwealth.im\n\n$MAPPED_NOTES")" '{text: $text}')
            curl -X POST -H 'Content-type: application/json' --data "$PAYLOAD" $SLACK_RELEASE_WEBHOOK_URL
          else
            echo "No new merge commits found."
          fi

      - name: Merge master into beta
        run: |
          git fetch origin
          git push --force origin master:beta