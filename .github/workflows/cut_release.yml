name: Pre-Release Notes & Merge

on:
  workflow_dispatch: # Manual trigger

jobs:
  generate-notes-and-merge:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure full history is available for release notes

      - name: Generate Release Notes
        id: release_notes
        env:
          NAME_MAPPING: ${{ secrets.NAME_MAPPING }}
        run: |
          # Convert GitHub Secrets into an associative array
          declare -A NAME_MAP
          while IFS="=" read -r key value; do
            NAME_MAP["$key"]="$value"
          done <<< "$NAME_MAPPING"
          
          # Generate raw (unmodified) release notes
          RAW_NOTES=$(git log origin/beta..origin/master --pretty="«%s»¦«%aN»¦%b" | \
            grep 'Merge pull request #[0-9]' | \
            sed -E 's/«Merge pull request #([0-9]+).*»¦«([^»]+)»¦(.*)/- [\3](https:\/\/github.com\/hicommonwealth\/commonwealth\/pull\/\1) @\2/' | \
            tr '\n' '\n')
          
          # Make a copy for mapped names
          MAPPED_NOTES="$RAW_NOTES"
          
          # Perform name replacements using NAME_MAP
          for KEY in "${!NAME_MAP[@]}"; do
            MAPPED_NOTES=$(echo "$MAPPED_NOTES" | sed "s/$KEY/${NAME_MAP[$KEY]}/g")
          done
          
          # Save both versions as environment variables
          echo "RAW_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RAW_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "MAPPED_NOTES<<EOF" >> $GITHUB_ENV
          echo "$MAPPED_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Send Raw Release Notes to Slack (Pre-Release)
        env:
          SLACK_PRE_RELEASE_WEBHOOK_URL: ${{ secrets.SLACK_PRE_RELEASE_WEBHOOK_URL }}
        run: |
          if [ -n "$RAW_NOTES" ]; then
            PAYLOAD=$(jq -n --arg text "$(echo -e "Pre-Release Notes (Unmodified):\n$RAW_NOTES")" '{text: $text}')
            curl -X POST -H 'Content-type: application/json' --data "$PAYLOAD" $SLACK_PRE_RELEASE_WEBHOOK_URL
          else
            echo "No new merge commits found."
          fi

      - name: Send Mapped Release Notes to Slack
        env:
          SLACK_RELEASE_WEBHOOK_URL: ${{ secrets.SLACK_RELEASE_WEBHOOK_URL }}
        run: |
          if [ -n "$MAPPED_NOTES" ]; then
            PAYLOAD=$(jq -n --arg text "$(echo -e "Pre-Release Notes:\nIf you are mentioned in this message, :thumbsup: it after you have tested your changes on: https://beta.commonwealth.im\n\n$MAPPED_NOTES")" '{text: $text}')
            curl -X POST -H 'Content-type: application/json' --data "$PAYLOAD" $SLACK_RELEASE_WEBHOOK_URL
          else
            echo "No new merge commits found."
          fi

      - name: Merge master into beta
        run: |
          git fetch origin
          git push --force origin master:beta