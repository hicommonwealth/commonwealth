name: CI

env:
  ROLLBAR_ENV: 'GitHubCI'

on:
  pull_request:
  push:
    branches:
      - master

jobs:
  # These tests run slowly, so run them in a separate job
  e2e-tests:
    strategy:
      matrix:
        node: [ 18 ]
    name: Commonwealth E2E Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: commonwealth
          POSTGRES_DB: commonwealth
          POSTGRES_PASSWORD: edgeware
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
      redis:
        image: redis:latest
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ matrix.node }}-${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        run: yarn --ignore-engines

      - name: Init Db
        run: cd packages/commonwealth && npx sequelize db:migrate

      - name: Cache browsers
        id: playwright-cache
        uses: actions/cache@v3
        with:
          path: '~/.cache/ms-playwright/chromium-1045'
          key: hashFiles('~/.cache/ms-playwright/chromium-1045') }}

      - name: Install playwright browser drivers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install chromium

      - name: Run e2e tests
        run: export ETH_RPC=e2e-test && yarn --cwd packages/commonwealth start & (yarn --cwd packages/commonwealth wait-server && yarn --cwd packages/commonwealth test-e2e)
        env:
          PORT: 8080
          USES_DOCKER_PGSQL: true

      - name: Archive code coverage results
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report
          path: coverage

  # Lint and Typecheck
  commonwealth-code-quality:
    strategy:
      matrix:
        node: [ 18 ]
    name: Code Quality checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ matrix.node }}-${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        run: yarn --ignore-engines

      - name: Run linter
        env:
          GITHUB_BASE_REF: ${{ github.base_ref }}
        run: yarn lint-branch

      - name: Typecheck
        run: yarn --cwd packages/commonwealth check-types

  # These tests run quickly, so run them in a separate job
  commonwealth-unit-integration:
    strategy:
      matrix:
        node: [ 18 ]
    name: Commonwealth Unit And Integration Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: commonwealth
          POSTGRES_DB: commonwealth
          POSTGRES_PASSWORD: edgeware
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
      redis:
        image: redis:latest
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ matrix.node }}-${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        run: yarn --ignore-engines

      - name: Init Db
        run: cd packages/commonwealth && npx sequelize db:migrate

      - name: Run unit tests
        run: yarn --cwd packages/commonwealth unit-test

      - name: Run API tests
        run: yarn --cwd packages/commonwealth test-api
        env:
          NO_CLIENT: true

      - name: Run emitNotification tests
        run: yarn --cwd packages/commonwealth test-emit-notif
        env:
          NO_CLIENT: true

  # These tests run slowly, so run them in a separate job
  commonwealth-devnet-tests:
    name: Devnet Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [ 18 ]
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: commonwealth
          POSTGRES_DB: commonwealth
          POSTGRES_PASSWORD: edgeware
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
      evm_test_app:
        image: irowan/common_chain_tests
        ports:
         - 3000:3000
      cosmos_test_app:
        image: irowan/heroku-csdk
        ports:
         - 5050:5050
      cosmos_beta_test_app:
        image: mhagel1/csdk-beta
        ports:
         - 5051:5051
      redis:
        image: redis:latest
        ports:
         - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ matrix.node }}-${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        run: yarn --ignore-engines

      ## EVM Section:
      - name: Start EVM Testnet
        run: |
          /usr/bin/docker pull trufflesuite/ganache;
          network_name=$(docker inspect -f '{{.HostConfig.NetworkMode}}' ${{ job.services.evm_test_app.id }})
          echo "Network name: $network_name"
          /usr/bin/docker run -d --name chain --network $network_name --network-alias chain -p 8545:8545 -e GITHUB_ACTIONS=true -e CI=true trufflesuite/ganache --fork --miner.blockTime 12 --wallet.unlockedAccounts 0xF977814e90dA44bFA03b6295A0616a897441aceC --wallet.unlockedAccounts 0xfA9b5f7fDc8AB34AAf3099889475d47febF830D7 --wallet.unlockedAccounts 0xBE0eB53F46cd790Cd13851d5EFf43D12404d33E8;

      - name: Run Token Balance Cache Unit Tests
        run: yarn --cwd packages/token-balance-cache test

      - name: Stop EVM Chain
        run: docker stop chain

      ## Cosmos Section:
      # We only run Cosmos devnet tests if any files in the following folders changes
      - name: Get changed Cosmos devnet-related files
        id: changed-files-specific
        uses: tj-actions/changed-files@v35
        with:
          files: |
            packages/commonwealth/test/devnet/cosmos/**/*
            packages/commonwealth/server/util/cosmosProxy.ts
            packages/chain-events/cosmos-chain-testing/**/*
            packages/common-common/src/cosmos-ts/**/*

      - name: Run following steps if any file(s) in the Cosmos folders change
        if: steps.changed-files-specific.outputs.all_changed_files
        run: |
          echo "One or more Cosmos Devnet-related files has changed."
          echo "List all the files that have changed: ${{ steps.changed-files-specific.outputs.all_changed_files }}"

      - name: Init Db
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        run: cd packages/commonwealth && npx sequelize db:migrate

      - name: Run Cosmos Devnet tests
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        run: yarn --cwd packages/commonwealth start & (yarn --cwd packages/commonwealth wait-server && yarn --cwd packages/commonwealth test-devnet)
        env:
          PORT: 8080
          USES_DOCKER_PGSQL: true

  chain-event-integration:
    strategy:
      matrix:
        node: [ 18 ]
    name: Chain Events Integration and Unit Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: commonwealth
          POSTGRES_DB: commonwealth_chain_events
          POSTGRES_PASSWORD: edgeware
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
      evm_test_app:
        image: irowan/common_chain_tests
        ports:
          - 3000:3000

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ matrix.node }}-${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        run: yarn --ignore-engines

      - name: Get changed chain-events files
        id: changed-files-chain-events
        uses: tj-actions/changed-files@v35
        with:
          files: |
            packages/chain-events/**/*
            packages/common-common/src/eth/**/*
            packages/common-common/src/rabbitmq/**/*
            packages/common-common/src/serviceConsumer.ts

      - name: Run following steps if any file(s) in the chain-events folders change
        if: steps.changed-files-chain-events.outputs.all_changed_files
        run: |
          echo "One or more chain-events-related files has changed."
          echo "List all the files that have changed: ${{ steps.changed-files-chain-events.outputs.all_changed_files }}"

      - name: Init CE Db
        if: steps.changed-files-chain-events.outputs.any_changed == 'true'
        run: >
          cd packages/chain-events &&
          PGPASSWORD=edgeware psql -h localhost -p 5432 -d commonwealth_chain_events -U commonwealth -f "CE_default.dump" &&
          npx sequelize db:migrate

      - name: Start ganache
        if: steps.changed-files-chain-events.outputs.any_changed == 'true'
        run: |
          yarn --cwd packages/chain-events/chain-testing
          yarn --cwd packages/chain-events/chain-testing ganache > ganacheLog.log 2>&1 &
          sleep 20

      - name: Start chain-testing SDK
        if: steps.changed-files-chain-events.outputs.any_changed == 'true'
        run: |
          sudo fuser -k 3000/tcp || true
          CE_CI_TESTING=true RPC_HOST=ganache CHAIN_PORT=3000 yarn --cwd packages/chain-events/chain-testing start > sdkLog.log 2>&1 &
          sleep 15

      - name: Typecheck
        if: steps.changed-files-chain-events.outputs.any_changed == 'true'
        run: yarn --cwd packages/chain-events check-types

      - name: Run Chain Events Integration Tests
        if: steps.changed-files-chain-events.outputs.any_changed == 'true'
        run: yarn --cwd packages/chain-events test-services

      - name: Run Chain Events Unit Tests
        if: steps.changed-files-chain-events.outputs.any_changed == 'true'
        run: yarn --cwd packages/chain-events unit-test

      - name: Display Ganache logs
        if: always() # Ensure this step runs even if previous steps failed
        run: |
          if [ -f ganacheLog.log ]; then
            cat ganacheLog.log
          else
            echo "ganacheLog.log does not exist."
          fi

      - name: Display SDK logs
        if: always() # Ensure this step runs even if previous steps failed
        run: |
          if [ -f sdkLog.log ]; then
            cat sdkLog.log
          else
            echo "sdkLog.log does not exist."
          fi
