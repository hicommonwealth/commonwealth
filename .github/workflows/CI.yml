name: CI

env:
  APP_ENV: CI
  IS_CI: true
  CI: true # ensures Vitest allowOnly option is false so no tests are accidentally skipped
  NODE_ENV: 'test'
  ROLLBAR_ENV: 'GitHubCI'
  TEST_WITHOUT_LOGS: 'true'
  PRIVATE_KEY: '0x83c65f24efbc8f4bc54ad425e897fc3ea01f760d5e71671a30eacb075ebe2313'
  USES_DOCKER_PGSQL: true
  PORT: 8080
  REDIS_URL: redis://localhost:6379
  GITHUB_BASE_REF: ${{ github.base_ref }}
  FEDERATION_POSTGRES_DB_URL: postgresql://commonwealth:edgeware@localhost/common_test
  ALCHEMY_PRIVATE_APP_KEY: ${{ secrets.ALCHEMY_PRIVATE_APP_KEY }}
  ALCHEMY_PUBLIC_APP_KEY: ${{ secrets.ALCHEMY_PUBLIC_APP_KEY }}

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: "PR number to test (optional)"
        required: false
        type: number
  pull_request:
  push:
    branches:
      - master

jobs:
  start-prod-server:
    name: Test Production Server
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        node: [ 22 ]

    services:
      postgres:
        image: hicommonwealth/cw_postgres:latest
        env:
          POSTGRES_USER: commonwealth
          POSTGRES_DB: common_test
          POSTGRES_PASSWORD: edgeware
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
      redis:
        image: redis:latest
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.pr_number && format('refs/pull/{0}/head', github.event.inputs.pr_number) || github.ref }}
      - uses: ./.github/actions/setup
        with:
          node-version: ${{ matrix.node }}

      - uses: ./.github/actions/e2e

      - name: Build server
        run: pnpm -F commonwealth build

      - name: Run serial e2e tests
        run: |
          pnpm -F commonwealth bootstrap-test-db &&
          (cd packages/commonwealth && node --import=extensionless/register --enable-source-maps ./build/server.js) &
          (pnpm -F commonwealth wait-server && pnpm -F commonwealth test-e2e-serial --forbid-only)
      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: coverage

  # Build and Typecheck
  commonwealth-build-type-checks:
    name: Build & Type Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        node: [ 22 ]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.pr_number && format('refs/pull/{0}/head', github.event.inputs.pr_number) || github.ref }}
      - uses: ./.github/actions/setup
        with:
          node-version: ${{ matrix.node }}

      - name: Assert pnpm-lock.yaml is correct
        run: |
          if ! git diff --quiet; then
            echo 'You need to update the pnpm-lock.yaml file (potentially after installing node-gyp)'
            exit 1
          fi

      - name: build
        run: pnpm -r build

      - name: check-types
        run: pnpm -r check-types


  # Lint Diff
  commonwealth-lint-diff:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        node: [ 22 ]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.pr_number && format('refs/pull/{0}/head', github.event.inputs.pr_number) || github.ref }}
      - uses: ./.github/actions/setup
        with:
          node-version: ${{ matrix.node }}

      - name: Lint Diff Files
        env:
          ESLINT_PLUGIN_DIFF_COMMIT: "origin/${{ github.base_ref }}"
        run: pnpm lint-diff

      - name: Run eslint-diff-canary to make sure eslint-diff is functioning properly
        run: pnpm -F commonwealth run lint-diff-canary


  detect-broken-ts-expect-error:
    name: Detect Broken TS expect errors
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        node: [ 22 ]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.pr_number && format('refs/pull/{0}/head', github.event.inputs.pr_number) || github.ref }}
      - uses: ./.github/actions/setup
        with:
          node-version: ${{ matrix.node }}

      - name: Assert pnpm-lock.yaml is correct
        run: |
          if ! git diff --quiet; then
            echo 'You need to update the pnpm-lock.yaml file (potentially after installing node-gyp)'
            exit 1
          fi

      - name: build
        run: pnpm -r build

      - name: run detect-broken-ts-expect-error.sh
        run: cd packages/commonwealth && ./scripts/detect-broken-ts-expect-error.sh

  # These tests run quickly, so run them in a separate job
  commonwealth-integration-test:
    name: Commonwealth Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        node: [ 22 ]

    services:
      postgres:
        image: hicommonwealth/cw_postgres:latest
        env:
          POSTGRES_USER: commonwealth
          POSTGRES_DB: common_test
          POSTGRES_PASSWORD: edgeware
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
      redis:
        image: redis:latest
        ports:
          - 6379:6379
      rabbitmq:
        image: rabbitmq:3.11-management
        ports:
          - 5672:5672
          - 15672:15672

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.pr_number && format('refs/pull/{0}/head', github.event.inputs.pr_number) || github.ref }}
      - uses: ./.github/actions/setup
        with:
          node-version: ${{ matrix.node }}

      # TODO: use devmode instead to avoid building
      - name: Build
        run: pnpm -r build

      - name: Run integration tests
        run: pnpm -F commonwealth test-integration --allowOnly=false

  commonwealth-unit-tests:
    name: Commonwealth Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        node: [ 22 ]

    services:
      postgres:
        image: hicommonwealth/cw_postgres:latest
        env:
          POSTGRES_USER: commonwealth
          POSTGRES_DB: common_test
          POSTGRES_PASSWORD: edgeware
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
      redis:
        image: redis:latest
        ports:
          - 6379:6379
      rabbitmq:
        image: rabbitmq:3.11-management
        ports:
          - 5672:5672
          - 15672:15672

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.pr_number && format('refs/pull/{0}/head', github.event.inputs.pr_number) || github.ref }}
      - uses: ./.github/actions/setup
        with:
          node-version: ${{ matrix.node }}

      - name: Run unit tests
        run: pnpm -r test -- --allowOnly=false

      - name: Change permissions of coverage files
        run: |
          chmod -R 755 ./libs/adapters/coverage/lcov.info
          chmod -R 755 ./libs/model/coverage/lcov.info
          chmod -R 755 ./libs/sitemaps/coverage/lcov.info

      - name: Coveralls parallel
        uses: coverallsapp/github-action@v2
        with:
          flag-name: unit-test-coverage
          parallel: true
          files: libs/adapters/coverage/lcov.info libs/model/coverage/lcov.info libs/sitemaps/coverage/lcov.info


  commonwealth-evm-tests:
    name: EVM Devnet Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        node: [ 22 ]

    services:
      postgres:
        image: hicommonwealth/cw_postgres:latest
        env:
          POSTGRES_USER: commonwealth
          POSTGRES_DB: common_test
          POSTGRES_PASSWORD: edgeware
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
      redis:
        image: redis:latest
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.pr_number && format('refs/pull/{0}/head', github.event.inputs.pr_number) || github.ref }}
      - uses: ./.github/actions/setup
        with:
          node-version: ${{ matrix.node }}

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Run EVM Devnet tests
        run: pnpm -F commonwealth test-devnet:evm --allowOnly=false

#  Removed until we get image caching set up otherwise it will fail due to dockerhub rate limiting
#  commonwealth-e2e-evm-tests:
#    name: EVM devnet integration Tests
#    runs-on: ubuntu-latest
#    timeout-minutes: 10
#    strategy:
#      matrix:
#        node: [ 22 ]
#
#    services:
#      postgres:
#        image: hicommonwealth/cw_postgres:latest
#        env:
#          POSTGRES_USER: commonwealth
#          POSTGRES_DB: common_test
#          POSTGRES_PASSWORD: edgeware
#        # Set health checks to wait until postgres has started
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#        ports:
#          # Maps tcp port 5432 on service container to the host
#          - 5432:5432
#      redis:
#        image: redis:latest
#        ports:
#          - 6379:6379
#    steps:
#      - uses: actions/checkout@v4
#      - uses: ./.github/actions/setup
#        with:
#          node-version: ${{ matrix.node }}
#
#      - name: Run EVM devnet integration tests
#        run: pnpm -F commonwealth test-devnet:integration --allowOnly=false

  report-coverage:
    name: Upload Test Coverage Report
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [ commonwealth-unit-tests ]
    if: always()
    strategy:
      matrix:
        node: [ 22 ]

    steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@v2
        with:
          parallel-finished: true

  setup_review_db:
    name: Create Review DB
    outputs:
      db_url: ${{ steps.create_neon_branch_encode.outputs.db_url }}
      db_url_with_pooler: ${{ steps.create_neon_branch_encode.outputs.db_url_with_pooler }}
    needs: [commonwealth-build-type-checks, detect-broken-ts-expect-error]
    if: |
      github.event_name == 'pull_request' && (
      github.event.action == 'synchronize'
      || github.event.action == 'opened'
      || github.event.action == 'reopened')
    strategy:
      matrix:
        node: [ 22 ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.pr_number && format('refs/pull/{0}/head', github.event.inputs.pr_number) || github.ref }}
      - uses: ./.github/actions/setup
        with:
          node-version: ${{ matrix.node }}

      - name: Create Neon Branch
        id: create_neon_branch
        uses: neondatabase/create-branch-action@v5
        with:
          project_id: ${{ secrets.NEON_PROJECT_ID }}
          branch_name: preview/pr-${{ github.event.number }}-${{ needs.setup.outputs.branch }}
          api_key: ${{ secrets.NEON_API_KEY }}
          username: 'commonwealth'
          database: 'commonwealth'
          suspend_timeout: 300 # scale to 0 compute after 5 minutes
          ssl: require # DO NOT CHANGE THIS - we must use SSL since we are branching off prod

      - name: Migrate DB
        id: migrate_db
        env:
          NODE_ENV: production
          DATABASE_URL: ${{ steps.create_neon_branch_encode.outputs.db_url }}
        run: pnpm migrate-db

      # TODO: check if this posts a new comment for each commit to an open PR if this updates the comment
      # TODO: if this creates a new comment for each commit, we need to update if so it only posts a
      # new comment when a migration changes in one of the commits since last execution
      - name: Post Schema Diff Comment to PR
        uses: neondatabase/schema-diff-action@v1
        if: |
          github.event_name == 'pull_request' &&
          (contains(join(github.event.pull_request.changed_files.*.filename, '\n'), 'packages/commonwealth/server/migrations/'))
        with:
          project_id: ${{ secrets.NEON_PROJECT_ID }}
          compare_branch: production # TODO: need to ensure this doesn't cause undue stress on main DB (maybe use a read replica?)
          api_key: ${{ secrets.NEON_API_KEY }}

  deploy_review_app:
    runs-on: ubuntu-latest
    needs: setup_review_db
    strategy:
      matrix:
        node: [ 22 ]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.pr_number && format('refs/pull/{0}/head', github.event.inputs.pr_number) || github.ref }}
      - uses: ./.github/actions/setup
        with:
          node-version: ${{ matrix.node }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Copy .env for build
        run: |
          ENV_PATH=./packages/commonwealth/deploy/environments/.env.public.${{ env.HEROKU_APP_NAME }}
          if [ ! -f "$ENV_PATH" ]; then
            echo "Error: $ENV_PATH not found"
            exit 1
          fi
          cp "$ENV_PATH" .env

      - name: Build and Push datadog-base image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.datadog
          push: true
          tags: ghcr.io/hicommonwealth/datadog-base:latest
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/datadog-base:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/datadog-base:buildcache,mode=max

      - name: Build and Push commonwealth base image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.commonwealth_base
          target: commonwealth
          push: true
          tags: ghcr.io/hicommonwealth/commonwealth:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/commonwealth:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/commonwealth:buildcache,mode=max

      - name: Build and Push Docker Image (web)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.web
          push: true
          tags: ghcr.io/hicommonwealth/web:${{ github.sha }}
          build-args: |
            BASE_IMAGE=ghcr.io/hicommonwealth/commonwealth:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/web:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/web:buildcache,mode=max
          provenance: false

      - name: Build and Push Docker Image (consumer)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.consumer
          push: true
          tags: ghcr.io/hicommonwealth/consumer:${{ github.sha }}
          build-args: |
            BASE_IMAGE=ghcr.io/hicommonwealth/commonwealth:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/consumer:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/consumer:buildcache,mode=max
          provenance: false

      - name: Build and Push Docker Image (discord_listener)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.discord_listener
          push: true
          tags: ghcr.io/hicommonwealth/discord_listener:${{ github.sha }}
          build-args: |
            BASE_IMAGE=ghcr.io/hicommonwealth/commonwealth:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/discord_listener:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/discord_listener:buildcache,mode=max
          provenance: false

      - name: Build and Push Docker Image (evm_ce)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.evm_ce
          push: true
          tags: ghcr.io/hicommonwealth/evm_ce:${{ github.sha }}
          build-args: |
            BASE_IMAGE=ghcr.io/hicommonwealth/commonwealth:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/evm_ce:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/evm_ce:buildcache,mode=max
          provenance: false

      - name: Build and Push Docker Image (graphile_worker)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.graphile_worker
          push: true
          tags: ghcr.io/hicommonwealth/graphile_worker:${{ github.sha }}
          build-args: |
            BASE_IMAGE=ghcr.io/hicommonwealth/commonwealth:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/graphile_worker:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/graphile_worker:buildcache,mode=max
          provenance: false

      - name: Build and Push Docker Image (knock)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.knock
          push: true
          tags: ghcr.io/hicommonwealth/knock:${{ github.sha }}
          build-args: |
            BASE_IMAGE=ghcr.io/hicommonwealth/commonwealth:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/knock:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/knock:buildcache,mode=max
          provenance: false

      - name: Build and Push Docker Image (message_relayer)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.message_relayer
          push: true
          tags: ghcr.io/hicommonwealth/message_relayer:${{ github.sha }}
          build-args: |
            BASE_IMAGE=ghcr.io/hicommonwealth/commonwealth:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/message_relayer:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/message_relayer:buildcache,mode=max
          provenance: false

      - name: Build and Push Docker Image (release)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.release
          push: true
          tags: ghcr.io/hicommonwealth/release:${{ github.sha }}
          build-args: |
            BASE_IMAGE=ghcr.io/hicommonwealth/commonwealth:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/release:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/release:buildcache,mode=max
          provenance: false

      - name: Build and Push Docker Image (twitter)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.twitter
          push: true
          tags: ghcr.io/hicommonwealth/twitter:${{ github.sha }}
          build-args: |
            BASE_IMAGE=ghcr.io/hicommonwealth/commonwealth:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/twitter:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/twitter:buildcache,mode=max
          provenance: false

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0

      # This is for accessing Terraform state in S3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init with PR-specific state
        id: init
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          terraform init \
            -backend-config="key=commonwealth-pr-environments/pr-${PR_NUMBER}/terraform.tfstate"

      - name: Terraform Plan
        id: plan
        run: terraform plan -var="do_token=${{ secrets.DIGITALOCEAN_TOKEN }}" -out=tfplan
        continue-on-error: false

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve tfplan

      - name: Export Kubeconfig
        run: |
          echo "Exporting kubeconfig to access the cluster..."
          terraform output -raw kubeconfig > kubeconfig.yaml
          echo "KUBECONFIG=$(pwd)/kubeconfig.yaml" >> $GITHUB_ENV

      - name: Deploy App Configuration
        run: |
          echo "Cluster is ready, web service external IP is: $(terraform output -raw web_service_ip)"
          echo "Adding PR comment with deployment info..."

      - name: Comment PR with Deployment Info
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const output = require('child_process').execSync('terraform output -json').toString();
            const outputs = JSON.parse(output);

            const webIP = outputs.web_service_ip.value;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **Review App Deployed!**

              Your PR environment has been successfully deployed:

              - **Web Application URL**: http://${webIP}
              - **Environment ID**: pr-${context.issue.number}
              - **Image Tag**: ${process.env.TF_VAR_image_tag}

              This environment will be automatically deleted when the PR is closed.`
            });

  delete_review_db:
    name: Delete Review DB
    needs: setup_review_db
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Delete Neon Branch
        uses: neondatabase/delete-branch-action@v3
        with:
          project_id: ${{ secrets.NEON_PROJECT_ID }}
          branch: preview/pr-${{ github.event.number }}-${{ needs.setup.outputs.branch }}
          api_key: ${{ secrets.NEON_API_KEY }}

  delete_review_app:
    name: Delete Review AP
    needs: deploy_review_app
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Terraform Destroy
        run: |
          echo "PR was closed, destroying environment..."
          terraform destroy -auto-approve -var="do_token=${{ secrets.DIGITALOCEAN_TOKEN }}"





