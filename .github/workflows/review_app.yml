name: Review App Railway

on:
  issue_comment:
    types: [ created ]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request Number'
        required: true
        type: number
      commit_sha:
        description: 'Override commit SHA for Docker builds (optional)'
        required: false
        type: string

env:
  RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

jobs:
  build:
    name: Build Docker Containers
    if: |
      (github.event.issue.pull_request && github.event.comment.body == '/deploy') ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [ 22 ]
    steps:
      - name: Set PR Number
        id: set_pr_number
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "pr_number=${{ github.event.inputs.pr_number }}" >> $GITHUB_OUTPUT
          else
            echo "pr_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          fi
      - name: Set Effective SHA
        id: set_effective_sha
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.commit_sha }}" ]; then
            echo "sha=${{ github.event.inputs.commit_sha }}" >> $GITHUB_OUTPUT
          else
            echo "sha=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if commonwealth base image exists
        id: check_base_image
        run: |
          set +e
          output=$(docker manifest inspect ghcr.io/hicommonwealth/commonwealth:${{ steps.set_effective_sha.outputs.sha }} 2>&1)
          status=$?
          echo "Manifest inspect output for commonwealth base:"
          echo "$output"
          echo "Exit code: $status"
          if [ $status -eq 0 ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
          exit 0

      - uses: actions/checkout@v4
        if: steps.check_base_image.outputs.exists == 'false'
        with:
          fetch-depth: 0
          ref: refs/pull/${{ steps.set_pr_number.outputs.pr_number }}/head

      - uses: ./.github/actions/setup
        if: steps.check_base_image.outputs.exists == 'false'
        with:
          node-version: ${{ matrix.node }}

      - name: Set up Docker Buildx
        if: steps.check_base_image.outputs.exists == 'false'
        uses: docker/setup-buildx-action@v3

      - name: Copy .env for build
        if: steps.check_base_image.outputs.exists == 'false'
        run: |
          ENV_PATH=./packages/commonwealth/deploy/environments/.env.public.review-apps
          if [ ! -f "$ENV_PATH" ]; then
            echo "Error: $ENV_PATH not found"
            exit 1
          fi
          cp "$ENV_PATH" .env

      - name: Build and Push commonwealth base image
        if: steps.check_base_image.outputs.exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.commonwealth_base
          target: commonwealth
          push: true
          tags: ghcr.io/hicommonwealth/commonwealth:${{ steps.set_effective_sha.outputs.sha }}
          build-args: |
            BASE_IMAGE=ghcr.io/hicommonwealth/datadog-base:latest
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/commonwealth:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/commonwealth:buildcache,mode=max

      # If the base image exists, we assume all other images exist and skip their builds
      - name: Build and Push Docker Image (web)
        if: steps.check_base_image.outputs.exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.web
          push: true
          tags: ghcr.io/hicommonwealth/web:${{ steps.set_effective_sha.outputs.sha }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.visibility=public
          build-args: |
            BASE_IMAGE=ghcr.io/hicommonwealth/commonwealth:${{ steps.set_effective_sha.outputs.sha }}
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/web:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/web:buildcache,mode=max

      - name: Build and Push Docker Image (consumer)
        if: steps.check_base_image.outputs.exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.consumer
          push: true
          tags: ghcr.io/hicommonwealth/consumer:${{ steps.set_effective_sha.outputs.sha }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.visibility=public
          build-args: |
            BASE_IMAGE=ghcr.io/hicommonwealth/commonwealth:${{ steps.set_effective_sha.outputs.sha }}
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/consumer:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/consumer:buildcache,mode=max

      - name: Build and Push Docker Image (discord-listener)
        if: steps.check_base_image.outputs.exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.discord_listener
          push: true
          tags: ghcr.io/hicommonwealth/discord-listener:${{ steps.set_effective_sha.outputs.sha }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.visibility=public
          build-args: |
            BASE_IMAGE=ghcr.io/hicommonwealth/commonwealth:${{ steps.set_effective_sha.outputs.sha }}
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/discord-listener:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/discord-listener:buildcache,mode=max

      - name: Build and Push Docker Image (evm-ce)
        if: steps.check_base_image.outputs.exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.evm_ce
          push: true
          tags: ghcr.io/hicommonwealth/evm-ce:${{ steps.set_effective_sha.outputs.sha }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.visibility=public
          build-args: |
            BASE_IMAGE=ghcr.io/hicommonwealth/commonwealth:${{ steps.set_effective_sha.outputs.sha }}
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/evm-ce:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/evm-ce:buildcache,mode=max

      - name: Build and Push Docker Image (graphile-worker)
        if: steps.check_base_image.outputs.exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.graphile_worker
          push: true
          tags: ghcr.io/hicommonwealth/graphile-worker:${{ steps.set_effective_sha.outputs.sha }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.visibility=public
          build-args: |
            BASE_IMAGE=ghcr.io/hicommonwealth/commonwealth:${{ steps.set_effective_sha.outputs.sha }}
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/graphile-worker:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/graphile-worker:buildcache,mode=max

      - name: Build and Push Docker Image (knock)
        if: steps.check_base_image.outputs.exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.knock
          push: true
          tags: ghcr.io/hicommonwealth/knock:${{ steps.set_effective_sha.outputs.sha }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.visibility=public
          build-args: |
            BASE_IMAGE=ghcr.io/hicommonwealth/commonwealth:${{ steps.set_effective_sha.outputs.sha }}
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/knock:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/knock:buildcache,mode=max

      - name: Build and Push Docker Image (message-relayer)
        if: steps.check_base_image.outputs.exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.message_relayer
          push: true
          tags: ghcr.io/hicommonwealth/message-relayer:${{ steps.set_effective_sha.outputs.sha }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.visibility=public
          build-args: |
            BASE_IMAGE=ghcr.io/hicommonwealth/commonwealth:${{ steps.set_effective_sha.outputs.sha }}
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/message-relayer:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/message-relayer:buildcache,mode=max

      - name: Build and Push Docker Image (twitter)
        if: steps.check_base_image.outputs.exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.twitter
          push: true
          tags: ghcr.io/hicommonwealth/twitter:${{ steps.set_effective_sha.outputs.sha }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.visibility=public
          build-args: |
            BASE_IMAGE=ghcr.io/hicommonwealth/commonwealth:${{ steps.set_effective_sha.outputs.sha }}
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/twitter:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/twitter:buildcache,mode=max

  deploy:
    name: Deploy to Railway
    needs: build
    if: |
      (github.event.issue.pull_request && github.event.comment.body == '/deploy') ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    env:
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
    steps:
      - name: Set PR Number
        id: set_pr_number
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "pr_number=${{ github.event.inputs.pr_number }}" >> $GITHUB_OUTPUT
          else
            echo "pr_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          fi
      - name: Set Effective SHA
        id: set_effective_sha
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.commit_sha }}" ]; then
            echo "sha=${{ github.event.inputs.commit_sha }}" >> $GITHUB_OUTPUT
          else
            echo "sha=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      # - name: Create Railway Environment
      #   run: |
      #     set +e
      #     output=$(railway environment pr-${{ github.event.inputs.pr_number }} 2>&1)
      #     echo "$output"
      #     if echo "$output" | grep -q "Environment not found"; then
      #       echo "Environment not found, creating..."
      #       railway environment create pr-${{ github.event.inputs.pr_number }}
      #     else
      #       echo "Environment exists or was linked successfully."
      #     fi
      #     set -e

      - name: Create Railway environment and deploy
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          PROJECT_ID=${{ secrets.RAILWAY_PROJECT_ID }}
          SERVICE_NAME="web"
          ENV_NAME="pr-${{ steps.set_pr_number.outputs.pr_number }}"
          IMAGE_TAG="ghcr.io/${{ github.repository }}/web:${{ steps.set_effective_sha.outputs.sha }}"
          
          # Step 1: Check if environment already exists
          ENV_CHECK=$(curl -s -X POST \
            -H "Authorization: Bearer $RAILWAY_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"query\": \"query { project(id: \\\"$PROJECT_ID\\\") { environments(filter: { name: \\\"$ENV_NAME\\\" }) { edges { node { id name } } } } }\"}" \
            https://backboard.railway.app/graphql)
          
          ENV_ID=$(echo $ENV_CHECK | jq -r '.data.project.environments.edges[0].node.id // empty')
          
          if [ -z "$ENV_ID" ] || [ "$ENV_ID" = "null" ]; then
            echo "Cloning production environment to: $ENV_NAME"
            # Find the production environment ID
            PROD_ENV_ID=$(curl -s -X POST \
              -H "Authorization: Bearer $RAILWAY_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"query\": \"query { project(id: \\\"$PROJECT_ID\\\") { environments(filter: { name: \\\"production\\\" }) { edges { node { id name } } } } }\"}" \
              https://backboard.railway.app/graphql | jq -r '.data.project.environments.edges[0].node.id')
            if [ -z "$PROD_ENV_ID" ] || [ "$PROD_ENV_ID" = "null" ]; then
              echo "Error: Could not find production environment ID"
              exit 1
            fi
            # Clone the production environment
            ENV_RESPONSE=$(curl -s -X POST \
              -H "Authorization: Bearer $RAILWAY_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"query\": \"mutation { environmentClone(input: { name: \\\"$ENV_NAME\\\", environmentId: \\\"$PROD_ENV_ID\\\" }) { id name } }\"}" \
              https://backboard.railway.app/graphql)
            ENV_ID=$(echo $ENV_RESPONSE | jq -r '.data.environmentClone.id')
            echo "Cloned environment: $ENV_ID"
          else
            echo "Environment already exists: $ENV_ID"
          fi
          
          # Step 2: Check if service already exists in this environment
          SERVICE_CHECK=$(curl -s -X POST \
            -H "Authorization: Bearer $RAILWAY_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"query\": \"query { environment(id: \\\"$ENV_ID\\\") { serviceInstances { edges { node { id service { name } } } } } }\"}" \
            https://backboard.railway.app/graphql)
          
          SERVICE_INSTANCE_ID=$(echo $SERVICE_CHECK | jq -r ".data.environment.serviceInstances.edges[] | select(.node.service.name == \"$SERVICE_NAME\") | .node.id // empty")
          
          if [ -z "$SERVICE_INSTANCE_ID" ] || [ "$SERVICE_INSTANCE_ID" = "null" ]; then
            echo "Creating new service instance: $SERVICE_NAME"
            
            # First create the service if it doesn't exist in the project
            SERVICE_CREATE=$(curl -s -X POST \
              -H "Authorization: Bearer $RAILWAY_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"query\": \"mutation { serviceCreate(input: { name: \\\"$SERVICE_NAME\\\", projectId: \\\"$PROJECT_ID\\\", source: { image: \\\"$IMAGE_TAG\\\" } }) { id } }\"}" \
              https://backboard.railway.app/graphql)
            
            SERVICE_ID=$(echo $SERVICE_CREATE | jq -r '.data.serviceCreate.id')
            echo "Created service: $SERVICE_ID"
            
            # Then create the service instance in the environment
            INSTANCE_CREATE=$(curl -s -X POST \
              -H "Authorization: Bearer $RAILWAY_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"query\": \"mutation { serviceInstanceCreate(input: { environmentId: \\\"$ENV_ID\\\", serviceId: \\\"$SERVICE_ID\\\", source: { image: \\\"$IMAGE_TAG\\\" } }) { id } }\"}" \
              https://backboard.railway.app/graphql)
            
            SERVICE_INSTANCE_ID=$(echo $INSTANCE_CREATE | jq -r '.data.serviceInstanceCreate.id')
            echo "Created service instance: $SERVICE_INSTANCE_ID"
          else
            echo "Service instance already exists: $SERVICE_INSTANCE_ID"
            
            # Update existing service instance with new image
            UPDATE_RESPONSE=$(curl -s -X POST \
              -H "Authorization: Bearer $RAILWAY_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"query\": \"mutation { serviceInstanceUpdate(input: { id: \\\"$SERVICE_INSTANCE_ID\\\", source: { image: \\\"$IMAGE_TAG\\\" } }) { id } }\"}" \
              https://backboard.railway.app/graphql)
            
            echo "Updated service instance: $UPDATE_RESPONSE"
          fi
          
          echo "ENV_ID=$ENV_ID" >> $GITHUB_ENV
          echo "SERVICE_INSTANCE_ID=$SERVICE_INSTANCE_ID" >> $GITHUB_ENV

      - name: Get deployment URL
        id: deployment
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          # Wait for deployment to initialize
          sleep 60
          
          # Get deployment URL using the environment variables from previous step
          URL_RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $RAILWAY_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"query\": \"query { environment(id: \\\"$ENV_ID\\\") { serviceInstances { edges { node { id domains { serviceDomain customDomains { domain } } latestDeployment { status url } } } } } }\"}" \
            https://backboard.railway.app/graphql)
          
          # Try to get the service domain first, then deployment URL
          SERVICE_DOMAIN=$(echo $URL_RESPONSE | jq -r '.data.environment.serviceInstances.edges[0].node.domains.serviceDomain // empty')
          DEPLOYMENT_URL=$(echo $URL_RESPONSE | jq -r '.data.environment.serviceInstances.edges[0].node.latestDeployment.url // empty')
          
          if [ -n "$SERVICE_DOMAIN" ] && [ "$SERVICE_DOMAIN" != "null" ]; then
            echo "url=https://$SERVICE_DOMAIN" >> $GITHUB_OUTPUT
          elif [ -n "$DEPLOYMENT_URL" ] && [ "$DEPLOYMENT_URL" != "null" ]; then
            echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          else
            echo "url=Deployment in progress - check Railway dashboard" >> $GITHUB_OUTPUT
          fi

  setup_db:
    name: Create Review DB
    needs: build
    outputs:
      db_url: ${{ steps.create_neon_branch.outputs.db_url }}
      db_url_with_pooler: ${{ steps.create_neon_branch.outputs.db_url_with_pooler }}
    # Only run when a /deploy comment is created on a PR or when manually triggered
    if: |
      (github.event.issue.pull_request && github.event.comment.body == '/deploy') ||
      github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        node: [ 22 ]
    runs-on: ubuntu-latest
    steps:
      - name: Set PR Number
        id: set_pr_number
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "pr_number=${{ github.event.inputs.pr_number }}" >> $GITHUB_OUTPUT
          else
            echo "pr_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          fi
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: refs/pull/${{ steps.set_pr_number.outputs.pr_number }}/head

      - name: Create Neon Branch
        id: create_neon_branch
        uses: neondatabase/create-branch-action@v5
        with:
          project_id: ${{ secrets.NEON_PROJECT_ID }}
          branch_name: preview/pr-${{ steps.set_pr_number.outputs.pr_number }}
          api_key: ${{ secrets.NEON_API_KEY }}
          username: 'neondb_owner'
          database: 'commonwealth'
          suspend_timeout: 300 # scale to 0 compute after 5 minutes
          ssl: require # DO NOT CHANGE THIS - we must use SSL since we are branching off prod

      - uses: ./.github/actions/setup
        if: steps.create_neon_branch.outputs.created == 'false'
        with:
          node-version: ${{ matrix.node }}

      - name: Migrate DB
        if: steps.create_neon_branch.outputs.created == 'false'
        id: migrate_db
        env:
          NODE_ENV: production
          DATABASE_URL: ${{ steps.create_neon_branch.outputs.db_url }}
        run: pnpm migrate-db

      # TODO: update DATABASE_URL in the Railway environment

      # TODO: check if this posts a new comment for each commit to an open PR if this updates the comment
      # TODO: if this creates a new comment for each commit, we need to update if so it only posts a
      # new comment when a migration changes in one of the commits since last execution
      #   - name: Post Schema Diff Comment to PR
      #     uses: neondatabase/schema-diff-action@v1
      #     if: |
      #       contains(join(github.event.issue.pull_request.changed_files.*.filename, '\n'), 'packages/commonwealth/server/migrations/')
      #     with:
      #       project_id: ${{ secrets.NEON_PROJECT_ID }}
      #       compare_branch: production # TODO: need to ensure this doesn't cause undue stress on main DB (maybe use a read replica?)
      #       api_key: ${{ secrets.NEON_API_KEY }}
