name: Review App Railway

on:
  issue_comment:
    types: [ created ]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request Number'
        required: true
        type: number
      commit_sha:
        description: 'Override commit SHA for Docker builds (optional)'
        required: false
        type: string

env:
  RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

jobs:
  build:
    name: Build Docker Containers
    if: |
      (github.event.issue.pull_request && github.event.comment.body == '/deploy') ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [ 22 ]
    steps:
      - name: Set PR Number
        id: set_pr_number
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "pr_number=${{ github.event.inputs.pr_number }}" >> $GITHUB_OUTPUT
          else
            echo "pr_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          fi
      - name: Set Effective SHA
        id: set_effective_sha
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.commit_sha }}" ]; then
            echo "sha=${{ github.event.inputs.commit_sha }}" >> $GITHUB_OUTPUT
          else
            echo "sha=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if commonwealth base image exists
        id: check_base_image
        run: |
          set +e
          output=$(docker manifest inspect ghcr.io/hicommonwealth/commonwealth:${{ steps.set_effective_sha.outputs.sha }} 2>&1)
          status=$?
          echo "Manifest inspect output for commonwealth base:"
          echo "$output"
          echo "Exit code: $status"
          if [ $status -eq 0 ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
          exit 0

      - uses: actions/checkout@v4
        if: steps.check_base_image.outputs.exists == 'false'
        with:
          fetch-depth: 0
          ref: refs/pull/${{ steps.set_pr_number.outputs.pr_number }}/head

      - uses: ./.github/actions/setup
        if: steps.check_base_image.outputs.exists == 'false'
        with:
          node-version: ${{ matrix.node }}

      - name: Set up Docker Buildx
        if: steps.check_base_image.outputs.exists == 'false'
        uses: docker/setup-buildx-action@v3

      - name: Copy .env for build
        if: steps.check_base_image.outputs.exists == 'false'
        run: |
          ENV_PATH=./packages/commonwealth/deploy/environments/.env.public.review-apps
          if [ ! -f "$ENV_PATH" ]; then
            echo "Error: $ENV_PATH not found"
            exit 1
          fi
          cp "$ENV_PATH" .env

      - name: Build and Push commonwealth base image
        if: steps.check_base_image.outputs.exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.commonwealth_base
          target: commonwealth
          push: true
          tags: ghcr.io/hicommonwealth/commonwealth:${{ steps.set_effective_sha.outputs.sha }}
          build-args: |
            BASE_IMAGE=ghcr.io/hicommonwealth/datadog-base:latest
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/commonwealth:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/commonwealth:buildcache,mode=max

      # If the base image exists, we assume all other images exist and skip their builds
      - name: Build and Push Docker Image (web)
        if: steps.check_base_image.outputs.exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.web
          push: true
          tags: ghcr.io/hicommonwealth/web:${{ steps.set_effective_sha.outputs.sha }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.visibility=public
          build-args: |
            BASE_IMAGE=ghcr.io/hicommonwealth/commonwealth:${{ steps.set_effective_sha.outputs.sha }}
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/web:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/web:buildcache,mode=max

      - name: Build and Push Docker Image (consumer)
        if: steps.check_base_image.outputs.exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.consumer
          push: true
          tags: ghcr.io/hicommonwealth/consumer:${{ steps.set_effective_sha.outputs.sha }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.visibility=public
          build-args: |
            BASE_IMAGE=ghcr.io/hicommonwealth/commonwealth:${{ steps.set_effective_sha.outputs.sha }}
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/consumer:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/consumer:buildcache,mode=max

      - name: Build and Push Docker Image (discord-listener)
        if: steps.check_base_image.outputs.exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.discord_listener
          push: true
          tags: ghcr.io/hicommonwealth/discord-listener:${{ steps.set_effective_sha.outputs.sha }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.visibility=public
          build-args: |
            BASE_IMAGE=ghcr.io/hicommonwealth/commonwealth:${{ steps.set_effective_sha.outputs.sha }}
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/discord-listener:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/discord-listener:buildcache,mode=max

      - name: Build and Push Docker Image (evm-ce)
        if: steps.check_base_image.outputs.exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.evm_ce
          push: true
          tags: ghcr.io/hicommonwealth/evm-ce:${{ steps.set_effective_sha.outputs.sha }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.visibility=public
          build-args: |
            BASE_IMAGE=ghcr.io/hicommonwealth/commonwealth:${{ steps.set_effective_sha.outputs.sha }}
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/evm-ce:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/evm-ce:buildcache,mode=max

      - name: Build and Push Docker Image (graphile-worker)
        if: steps.check_base_image.outputs.exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.graphile_worker
          push: true
          tags: ghcr.io/hicommonwealth/graphile-worker:${{ steps.set_effective_sha.outputs.sha }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.visibility=public
          build-args: |
            BASE_IMAGE=ghcr.io/hicommonwealth/commonwealth:${{ steps.set_effective_sha.outputs.sha }}
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/graphile-worker:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/graphile-worker:buildcache,mode=max

      - name: Build and Push Docker Image (knock)
        if: steps.check_base_image.outputs.exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.knock
          push: true
          tags: ghcr.io/hicommonwealth/knock:${{ steps.set_effective_sha.outputs.sha }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.visibility=public
          build-args: |
            BASE_IMAGE=ghcr.io/hicommonwealth/commonwealth:${{ steps.set_effective_sha.outputs.sha }}
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/knock:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/knock:buildcache,mode=max

      - name: Build and Push Docker Image (message-relayer)
        if: steps.check_base_image.outputs.exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.message_relayer
          push: true
          tags: ghcr.io/hicommonwealth/message-relayer:${{ steps.set_effective_sha.outputs.sha }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.visibility=public
          build-args: |
            BASE_IMAGE=ghcr.io/hicommonwealth/commonwealth:${{ steps.set_effective_sha.outputs.sha }}
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/message-relayer:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/message-relayer:buildcache,mode=max

      - name: Build and Push Docker Image (twitter)
        if: steps.check_base_image.outputs.exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.twitter
          push: true
          tags: ghcr.io/hicommonwealth/twitter:${{ steps.set_effective_sha.outputs.sha }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.visibility=public
          build-args: |
            BASE_IMAGE=ghcr.io/hicommonwealth/commonwealth:${{ steps.set_effective_sha.outputs.sha }}
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/twitter:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/twitter:buildcache,mode=max

  deploy:
    name: Deploy to Railway
    needs: build
    if: |
      (github.event.issue.pull_request && github.event.comment.body == '/deploy') ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [ 22 ]
    env:
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
    steps:
      - name: Set PR Number
        id: set_pr_number
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "pr_number=${{ github.event.inputs.pr_number }}" >> $GITHUB_OUTPUT
          else
            echo "pr_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          fi
      - name: Set Effective SHA
        id: set_effective_sha
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.commit_sha }}" ]; then
            echo "sha=${{ github.event.inputs.commit_sha }}" >> $GITHUB_OUTPUT
          else
            echo "sha=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Create Railway environment and deploy
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          PR_NUMBER: ${{ steps.set_pr_number.outputs.pr_number }}
          EFFECTIVE_SHA: ${{ steps.set_effective_sha.outputs.sha }}
        run: |
          node <<'EOF' 
          const RAILWAY_TOKEN = process.env.RAILWAY_TOKEN;
          const PROJECT_ID = process.env.RAILWAY_PROJECT_ID;
          const SERVICE_NAME = 'web';
          const ENV_NAME = `pr-${process.env.PR_NUMBER}`;
          const IMAGE_TAG = `ghcr.io/${process.env.GITHUB_REPOSITORY}/web:${process.env.EFFECTIVE_SHA}`;

          const headers = {
            'Authorization': `Bearer ${RAILWAY_TOKEN}`,
            'Content-Type': 'application/json',
          };

          async function railwayGraphQL(query, { allow404 = false } = {}) {
            const res = await fetch('https://backboard.railway.app/graphql', {
              method: 'POST',
              headers,
              body: JSON.stringify({ query }),
            });

            if (!res.ok) {
              const text = await res.text();
              if (res.status === 404 && allow404) {
                return null;
              }
              throw new Error(`HTTP error! status: ${res.status} - ${res.statusText}\nResponse: ${text}`);
            }

            const json = await res.json();

            if (json.errors && json.errors.length > 0) {
              // Some GraphQL APIs return errors for not found, so you may want to check for that here too
              if (
                allow404 &&
                json.errors.some(e => e.message && e.message.toLowerCase().includes('not found'))
              ) {
                return null;
              }
              console.error('GraphQL errors:', JSON.stringify(json.errors));
              throw new Error(`GraphQL errors: ${JSON.stringify(json.errors)}`);
            }

            return json;
          }

          (async () => {
            try {
              // Step 1: Check if environment already exists
              let envCheck = await railwayGraphQL(`query { project(id: \"${PROJECT_ID}\") { environments(filter: { name: \"${ENV_NAME}\" }) { edges { node { id name } } } } }`, { allow404: true });
              console.log('ENV_CHECK:', JSON.stringify(envCheck));
              let envEdges = envCheck?.data?.project?.environments?.edges || [];
              let ENV_ID = envEdges[0]?.node?.id;

              if (!ENV_ID) {
                console.log(`Cloning production environment to: ${ENV_NAME}`);
                // Find the production environment ID
                let prodEnvCheck = await railwayGraphQL(`query { project(id: \"${PROJECT_ID}\") { environments(filter: { name: \"production\" }) { edges { node { id name } } } } }`, { allow404: true });
                console.log('PROD_ENV_CHECK:', JSON.stringify(prodEnvCheck));
                let prodEnvId = prodEnvCheck?.data?.project?.environments?.edges?.[0]?.node?.id;
                if (!prodEnvId) {
                  throw new Error('Could not find production environment ID');
                }
                // Clone the production environment
                let envClone = await railwayGraphQL(`mutation { environmentClone(input: { name: \"${ENV_NAME}\", environmentId: \"${prodEnvId}\" }) { id name } }`);
                console.log('ENV_CLONE:', JSON.stringify(envClone));
                ENV_ID = envClone?.data?.environmentClone?.id;
                if (!ENV_ID) throw new Error('Failed to clone environment');
                console.log('Cloned environment:', ENV_ID);
              } else {
                console.log('Environment already exists:', ENV_ID);
              }

              // Step 2: Check if service already exists in this environment
              let serviceCheck = await railwayGraphQL(`query { environment(id: \"${ENV_ID}\") { serviceInstances { edges { node { id service { name } } } } } }`, { allow404: true });
              console.log('SERVICE_CHECK:', JSON.stringify(serviceCheck));
              let serviceEdges = serviceCheck?.data?.environment?.serviceInstances?.edges || [];
              let serviceInstance = serviceEdges.find(e => e.node.service.name === SERVICE_NAME);
              let SERVICE_INSTANCE_ID = serviceInstance?.node?.id;

              if (!SERVICE_INSTANCE_ID) {
                console.log('Creating new service instance:', SERVICE_NAME);
                // First create the service if it doesn't exist in the project
                let serviceCreate = await railwayGraphQL(`mutation { serviceCreate(input: { name: \"${SERVICE_NAME}\", projectId: \"${PROJECT_ID}\", source: { image: \"${IMAGE_TAG}\" } }) { id } }`);
                console.log('SERVICE_CREATE:', JSON.stringify(serviceCreate));
                let SERVICE_ID = serviceCreate?.data?.serviceCreate?.id;
                if (!SERVICE_ID) throw new Error('Failed to create service');
                // Then create the service instance in the environment
                let instanceCreate = await railwayGraphQL(`mutation { serviceInstanceCreate(input: { environmentId: \"${ENV_ID}\", serviceId: \"${SERVICE_ID}\", source: { image: \"${IMAGE_TAG}\" } }) { id } }`);
                console.log('INSTANCE_CREATE:', JSON.stringify(instanceCreate));
                SERVICE_INSTANCE_ID = instanceCreate?.data?.serviceInstanceCreate?.id;
                if (!SERVICE_INSTANCE_ID) throw new Error('Failed to create service instance');
                console.log('Created service instance:', SERVICE_INSTANCE_ID);
              } else {
                console.log('Service instance already exists:', SERVICE_INSTANCE_ID);
                // Update existing service instance with new image
                let updateResponse = await railwayGraphQL(`mutation { serviceInstanceUpdate(input: { id: \"${SERVICE_INSTANCE_ID}\", source: { image: \"${IMAGE_TAG}\" } }) { id } }`);
                console.log('UPDATE_RESPONSE:', JSON.stringify(updateResponse));
                console.log('Updated service instance:', SERVICE_INSTANCE_ID);
              }

              // Export ENV_ID and SERVICE_INSTANCE_ID for next steps
              const fs = require('fs');
              fs.appendFileSync(process.env.GITHUB_ENV, `ENV_ID=${ENV_ID}\n`);
              fs.appendFileSync(process.env.GITHUB_ENV, `SERVICE_INSTANCE_ID=${SERVICE_INSTANCE_ID}\n`);
            } catch (err) {
              console.error('Error in Railway deploy step:', err);
              process.exit(1);
            }
          })();
          EOF

      - name: Get deployment URL
        id: deployment
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          # Wait for deployment to initialize
          sleep 60
          
          # Get deployment URL using the environment variables from previous step
          URL_RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $RAILWAY_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"query\": \"query { environment(id: \\\"$ENV_ID\\\") { serviceInstances { edges { node { id domains { serviceDomain customDomains { domain } } latestDeployment { status url } } } } } }\"}" \
            https://backboard.railway.app/graphql)
          
          # Try to get the service domain first, then deployment URL
          SERVICE_DOMAIN=$(echo $URL_RESPONSE | jq -r '.data.environment.serviceInstances.edges[0].node.domains.serviceDomain // empty')
          DEPLOYMENT_URL=$(echo $URL_RESPONSE | jq -r '.data.environment.serviceInstances.edges[0].node.latestDeployment.url // empty')
          
          if [ -n "$SERVICE_DOMAIN" ] && [ "$SERVICE_DOMAIN" != "null" ]; then
            echo "url=https://$SERVICE_DOMAIN" >> $GITHUB_OUTPUT
          elif [ -n "$DEPLOYMENT_URL" ] && [ "$DEPLOYMENT_URL" != "null" ]; then
            echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          else
            echo "url=Deployment in progress - check Railway dashboard" >> $GITHUB_OUTPUT
          fi

  setup_db:
    name: Create Review DB
    needs: build
    outputs:
      db_url: ${{ steps.create_neon_branch.outputs.db_url }}
      db_url_with_pooler: ${{ steps.create_neon_branch.outputs.db_url_with_pooler }}
    # Only run when a /deploy comment is created on a PR or when manually triggered
    if: |
      (github.event.issue.pull_request && github.event.comment.body == '/deploy') ||
      github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        node: [ 22 ]
    runs-on: ubuntu-latest
    steps:
      - name: Set PR Number
        id: set_pr_number
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "pr_number=${{ github.event.inputs.pr_number }}" >> $GITHUB_OUTPUT
          else
            echo "pr_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          fi
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: refs/pull/${{ steps.set_pr_number.outputs.pr_number }}/head

      - name: Create Neon Branch
        id: create_neon_branch
        uses: neondatabase/create-branch-action@v5
        with:
          project_id: ${{ secrets.NEON_PROJECT_ID }}
          branch_name: preview/pr-${{ steps.set_pr_number.outputs.pr_number }}
          api_key: ${{ secrets.NEON_API_KEY }}
          username: 'neondb_owner'
          database: 'commonwealth'
          suspend_timeout: 300 # scale to 0 compute after 5 minutes
          ssl: require # DO NOT CHANGE THIS - we must use SSL since we are branching off prod

      - uses: ./.github/actions/setup
        if: steps.create_neon_branch.outputs.created == 'false'
        with:
          node-version: ${{ matrix.node }}

      - name: Migrate DB
        if: steps.create_neon_branch.outputs.created == 'false'
        id: migrate_db
        env:
          NODE_ENV: production
          DATABASE_URL: ${{ steps.create_neon_branch.outputs.db_url }}
        run: pnpm migrate-db

      # TODO: update DATABASE_URL in the Railway environment

      # TODO: check if this posts a new comment for each commit to an open PR if this updates the comment
      # TODO: if this creates a new comment for each commit, we need to update if so it only posts a
      # new comment when a migration changes in one of the commits since last execution
      #   - name: Post Schema Diff Comment to PR
      #     uses: neondatabase/schema-diff-action@v1
      #     if: |
      #       contains(join(github.event.issue.pull_request.changed_files.*.filename, '\n'), 'packages/commonwealth/server/migrations/')
      #     with:
      #       project_id: ${{ secrets.NEON_PROJECT_ID }}
      #       compare_branch: production # TODO: need to ensure this doesn't cause undue stress on main DB (maybe use a read replica?)
      #       api_key: ${{ secrets.NEON_API_KEY }}
