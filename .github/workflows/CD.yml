name: Build Docker Image

on:
  push:
    branches:
      - frack
      - production

  workflow_run:
    workflows:
      - "Pre-Release Notes & Merge"  # Match the name in `cut_release.yml`
    types:
      - completed

  schedule:
    - cron: "0 22 * * *"

permissions:
  contents: read
  pull-requests: write

jobs:
  open-pr-beta-to-production:
    name: Open/ensure PR beta → production
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/beta' ||
      github.event_name == 'schedule' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if beta is ahead of production
        id: ahead
        run: |
          git fetch origin beta production
          # returns nonzero if there are commits in beta not in production
          if git log --oneline origin/production..origin/beta | grep .; then
            echo "ahead=true" >> $GITHUB_OUTPUT
          else
            echo "ahead=false" >> $GITHUB_OUTPUT
          fi

      - name: Ensure PR exists
        if: steps.ahead.outputs.ahead == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const head = "beta";
            const base = "production";
            
            // Is there already an open PR from beta -> production?
            const { data: prs } = await github.rest.pulls.list({
              owner, repo, state: "open", head: `${owner}:${head}`, base
            });
            
            if (prs.length > 0) {
              core.info(`Open PR already exists: #${prs[0].number}`);
              return;
            }
            
            // Create a new PR
            const title = "Merge beta → production";
            const body = [
              "Automated PR to merge **beta** into **production**.",
              "",
              "- Created by GitHub Actions.",
              "- Triggers: push/schedule/workflow_run."
            ].join("\n");
            
            const { data: pr } = await github.rest.pulls.create({
              owner, repo, title, head, base, body, maintainer_can_modify: true
            });
            
            core.info(`Created PR #${pr.number}`);

  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Set Heroku app name based on branch
        id: set-heroku-app-name
        run: |
          BRANCH_NAME=${GITHUB_REF##*/}
          
          case $BRANCH_NAME in
            frack)
              APP_NAME="commonwealth-frack"
              ;;
            production)
              APP_NAME="commonwealthapp"
              ;;
            *)
              echo "Branch $BRANCH_NAME is not configured for deployment."
              exit 1
              ;;
          esac
          echo "HEROKU_APP_NAME=$APP_NAME" >> $GITHUB_ENV

      - uses: actions/checkout@v2

      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh

      - name: Deploy to Heroku
        run: |
          chmod +x ./scripts/deploy-to-heroku.sh
          ./scripts/deploy-to-heroku.sh "${{ secrets.HEROKU_EMAIL }}" "${{ secrets.HEROKU_API_TOKEN }}" "${{ env.HEROKU_APP_NAME }}" "${{ github.sha }}"