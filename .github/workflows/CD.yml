name: Build and Push Docker Image

on:
  push:
    branches:
      - frick
      - frack
      - beta
      - demo
      - production

  workflow_run:
    workflows:
      - "Pre-Release Notes & Merge"  # Match the name in `cut_release.yml`
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Set Heroku app name based on branch
        id: set-heroku-app-name
        run: |
          if [ "${{ github.event_name }}" == "workflow_run" ]; then
            BRANCH_NAME="beta" 
          else
            BRANCH_NAME=${GITHUB_REF##*/}
          fi
          
          case $BRANCH_NAME in
            frick)
              APP_NAME="commonwealth-frick"
              ;;
            frack)
              APP_NAME="commonwealth-frack"
              ;;
            beta)
              APP_NAME="commonwealth-beta"
              ;;
            demo)
              APP_NAME="commonwealth-demo"
              ;;
            production)
              APP_NAME="commonwealthapp"
              ;;
            *)
              echo "Branch $BRANCH_NAME is not configured for deployment."
              exit 1
              ;;
          esac
          echo "HEROKU_APP_NAME=$APP_NAME" >> $GITHUB_ENV
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - uses: actions/checkout@v3

      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Heroku CLI Auth and Remote Setup
        env:
          HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}
          HEROKU_API_TOKEN: ${{ secrets.HEROKU_API_TOKEN }}
        run: |
          cat >~/.netrc <<EOF
          machine api.heroku.com
              login $HEROKU_EMAIL
              password $HEROKU_API_TOKEN
          machine git.heroku.com
              login $HEROKU_EMAIL
              password $HEROKU_API_TOKEN
          EOF
          heroku container:login
          heroku git:remote --app ${{ env.HEROKU_APP_NAME }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Copy .env for build
        run: |
          ENV_PATH=./packages/commonwealth/deploy/environments/.env.public.${{ env.HEROKU_APP_NAME }}
          if [ ! -f "$ENV_PATH" ]; then
            echo "Error: $ENV_PATH not found"
            exit 1
          fi
          cp "$ENV_PATH" .env
      
      - name: Build and Push datadog-base image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.datadog
          push: true
          tags: ghcr.io/hicommonwealth/datadog-base:latest
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/datadog-base:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/datadog-base:buildcache,mode=max

      - name: Build and Push commonwealth base image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.commonwealth_base
          target: commonwealth
          push: true
          tags: ghcr.io/hicommonwealth/commonwealth:latest
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/commonwealth:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/commonwealth:buildcache,mode=max

      - name: Build and Push Docker Image (web)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.web
          push: true
          tags: registry.heroku.com/${{ env.HEROKU_APP_NAME }}/web:latest
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/web:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/web:buildcache,mode=max

      - name: Build and Push Docker Image (consumer)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.consumer
          push: true
          tags: registry.heroku.com/${{ env.HEROKU_APP_NAME }}/consumer:latest
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/consumer:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/consumer:buildcache,mode=max

      - name: Build and Push Docker Image (discord_listener)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.discord_listener
          push: true
          tags: registry.heroku.com/${{ env.HEROKU_APP_NAME }}/discord_listener:latest
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/discord_listener:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/discord_listener:buildcache,mode=max

      - name: Build and Push Docker Image (evm_ce)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.evm_ce
          push: true
          tags: registry.heroku.com/${{ env.HEROKU_APP_NAME }}/evm_ce:latest
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/evm_ce:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/evm_ce:buildcache,mode=max

      - name: Build and Push Docker Image (graphile_worker)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.graphile_worker
          push: true
          tags: registry.heroku.com/${{ env.HEROKU_APP_NAME }}/graphile_worker:latest
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/graphile_worker:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/graphile_worker:buildcache,mode=max

      - name: Build and Push Docker Image (knock)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.knock
          push: true
          tags: registry.heroku.com/${{ env.HEROKU_APP_NAME }}/knock:latest
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/knock:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/knock:buildcache,mode=max

      - name: Build and Push Docker Image (message_relayer)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.message_relayer
          push: true
          tags: registry.heroku.com/${{ env.HEROKU_APP_NAME }}/message_relayer:latest
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/message_relayer:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/message_relayer:buildcache,mode=max

      - name: Build and Push Docker Image (release)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.release
          push: true
          tags: registry.heroku.com/${{ env.HEROKU_APP_NAME }}/release:latest
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/release:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/release:buildcache,mode=max

      - name: Build and Push Docker Image (twitter)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/commonwealth/deploy/dockerfiles/Dockerfile.twitter
          push: true
          tags: registry.heroku.com/${{ env.HEROKU_APP_NAME }}/twitter:latest
          cache-from: type=registry,ref=ghcr.io/hicommonwealth/twitter:buildcache
          cache-to: type=registry,ref=ghcr.io/hicommonwealth/twitter:buildcache,mode=max

      - name: Release Heroku Containers
        env:
          HEROKU_API_TOKEN: ${{ secrets.HEROKU_API_TOKEN }}
        run: |
          heroku container:release web consumer discord_listener evm_ce graphile_worker knock message_relayer release twitter -a ${{ env.HEROKU_APP_NAME }}