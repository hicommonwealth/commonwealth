/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface Moloch1Interface extends ethers.utils.Interface {
  functions: {
    "processingReward()": FunctionFragment;
    "getMemberProposalVote(address,uint256)": FunctionFragment;
    "getCurrentPeriod()": FunctionFragment;
    "members(address)": FunctionFragment;
    "totalSharesRequested()": FunctionFragment;
    "updateDelegateKey(address)": FunctionFragment;
    "totalShares()": FunctionFragment;
    "proposalQueue(uint256)": FunctionFragment;
    "memberAddressByDelegateKey(address)": FunctionFragment;
    "gracePeriodLength()": FunctionFragment;
    "abortWindow()": FunctionFragment;
    "getProposalQueueLength()": FunctionFragment;
    "summoningTime()": FunctionFragment;
    "votingPeriodLength()": FunctionFragment;
    "ragequit(uint256)": FunctionFragment;
    "proposalDeposit()": FunctionFragment;
    "hasVotingPeriodExpired(uint256)": FunctionFragment;
    "submitProposal(address,uint256,uint256,string)": FunctionFragment;
    "submitVote(uint256,uint8)": FunctionFragment;
    "canRagequit(uint256)": FunctionFragment;
    "guildBank()": FunctionFragment;
    "dilutionBound()": FunctionFragment;
    "periodDuration()": FunctionFragment;
    "approvedToken()": FunctionFragment;
    "abort(uint256)": FunctionFragment;
    "processProposal(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "processingReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMemberProposalVote",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "members", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalSharesRequested",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateDelegateKey",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalQueue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "memberAddressByDelegateKey",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "gracePeriodLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "abortWindow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalQueueLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "summoningTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriodLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ragequit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasVotingPeriodExpired",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitProposal",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "submitVote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canRagequit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "guildBank", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "dilutionBound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "periodDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approvedToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "abort", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "processProposal",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "processingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMemberProposalVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "members", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSharesRequested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDelegateKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "memberAddressByDelegateKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gracePeriodLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "abortWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalQueueLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "summoningTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriodLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ragequit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasVotingPeriodExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canRagequit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "guildBank", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dilutionBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "abort", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processProposal",
    data: BytesLike
  ): Result;

  events: {
    "SubmitProposal(uint256,address,address,address,uint256,uint256)": EventFragment;
    "SubmitVote(uint256,address,address,uint8)": EventFragment;
    "ProcessProposal(uint256,address,address,uint256,uint256,bool)": EventFragment;
    "Ragequit(address,uint256)": EventFragment;
    "Abort(uint256,address)": EventFragment;
    "UpdateDelegateKey(address,address)": EventFragment;
    "SummonComplete(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SubmitProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProcessProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Ragequit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Abort"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateDelegateKey"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SummonComplete"): EventFragment;
}

export class Moloch1 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: Moloch1Interface;

  functions: {
    processingReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    "processingReward()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMemberProposalVote(
      memberAddress: string,
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "getMemberProposalVote(address,uint256)"(
      memberAddress: string,
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getCurrentPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getCurrentPeriod()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    members(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, BigNumber] & {
        delegateKey: string;
        shares: BigNumber;
        exists: boolean;
        highestIndexYesVote: BigNumber;
      }
    >;

    "members(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, BigNumber] & {
        delegateKey: string;
        shares: BigNumber;
        exists: boolean;
        highestIndexYesVote: BigNumber;
      }
    >;

    totalSharesRequested(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSharesRequested()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateDelegateKey(
      newDelegateKey: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateDelegateKey(address)"(
      newDelegateKey: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalShares()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposalQueue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        BigNumber,
        string,
        BigNumber
      ] & {
        proposer: string;
        applicant: string;
        sharesRequested: BigNumber;
        startingPeriod: BigNumber;
        yesVotes: BigNumber;
        noVotes: BigNumber;
        processed: boolean;
        didPass: boolean;
        aborted: boolean;
        tokenTribute: BigNumber;
        details: string;
        maxTotalSharesAtYesVote: BigNumber;
      }
    >;

    "proposalQueue(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        BigNumber,
        string,
        BigNumber
      ] & {
        proposer: string;
        applicant: string;
        sharesRequested: BigNumber;
        startingPeriod: BigNumber;
        yesVotes: BigNumber;
        noVotes: BigNumber;
        processed: boolean;
        didPass: boolean;
        aborted: boolean;
        tokenTribute: BigNumber;
        details: string;
        maxTotalSharesAtYesVote: BigNumber;
      }
    >;

    memberAddressByDelegateKey(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "memberAddressByDelegateKey(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    gracePeriodLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "gracePeriodLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    abortWindow(overrides?: CallOverrides): Promise<[BigNumber]>;

    "abortWindow()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getProposalQueueLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getProposalQueueLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    summoningTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "summoningTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    votingPeriodLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "votingPeriodLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    ragequit(
      sharesToBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "ragequit(uint256)"(
      sharesToBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposalDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    "proposalDeposit()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    hasVotingPeriodExpired(
      startingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasVotingPeriodExpired(uint256)"(
      startingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    submitProposal(
      applicant: string,
      tokenTribute: BigNumberish,
      sharesRequested: BigNumberish,
      details: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "submitProposal(address,uint256,uint256,string)"(
      applicant: string,
      tokenTribute: BigNumberish,
      sharesRequested: BigNumberish,
      details: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitVote(
      proposalIndex: BigNumberish,
      uintVote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "submitVote(uint256,uint8)"(
      proposalIndex: BigNumberish,
      uintVote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    canRagequit(
      highestIndexYesVote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "canRagequit(uint256)"(
      highestIndexYesVote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    guildBank(overrides?: CallOverrides): Promise<[string]>;

    "guildBank()"(overrides?: CallOverrides): Promise<[string]>;

    dilutionBound(overrides?: CallOverrides): Promise<[BigNumber]>;

    "dilutionBound()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    periodDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    "periodDuration()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    approvedToken(overrides?: CallOverrides): Promise<[string]>;

    "approvedToken()"(overrides?: CallOverrides): Promise<[string]>;

    abort(
      proposalIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "abort(uint256)"(
      proposalIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    processProposal(
      proposalIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "processProposal(uint256)"(
      proposalIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  processingReward(overrides?: CallOverrides): Promise<BigNumber>;

  "processingReward()"(overrides?: CallOverrides): Promise<BigNumber>;

  getMemberProposalVote(
    memberAddress: string,
    proposalIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  "getMemberProposalVote(address,uint256)"(
    memberAddress: string,
    proposalIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getCurrentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "getCurrentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  members(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean, BigNumber] & {
      delegateKey: string;
      shares: BigNumber;
      exists: boolean;
      highestIndexYesVote: BigNumber;
    }
  >;

  "members(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean, BigNumber] & {
      delegateKey: string;
      shares: BigNumber;
      exists: boolean;
      highestIndexYesVote: BigNumber;
    }
  >;

  totalSharesRequested(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSharesRequested()"(overrides?: CallOverrides): Promise<BigNumber>;

  updateDelegateKey(
    newDelegateKey: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateDelegateKey(address)"(
    newDelegateKey: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  "totalShares()"(overrides?: CallOverrides): Promise<BigNumber>;

  proposalQueue(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean,
      BigNumber,
      string,
      BigNumber
    ] & {
      proposer: string;
      applicant: string;
      sharesRequested: BigNumber;
      startingPeriod: BigNumber;
      yesVotes: BigNumber;
      noVotes: BigNumber;
      processed: boolean;
      didPass: boolean;
      aborted: boolean;
      tokenTribute: BigNumber;
      details: string;
      maxTotalSharesAtYesVote: BigNumber;
    }
  >;

  "proposalQueue(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean,
      BigNumber,
      string,
      BigNumber
    ] & {
      proposer: string;
      applicant: string;
      sharesRequested: BigNumber;
      startingPeriod: BigNumber;
      yesVotes: BigNumber;
      noVotes: BigNumber;
      processed: boolean;
      didPass: boolean;
      aborted: boolean;
      tokenTribute: BigNumber;
      details: string;
      maxTotalSharesAtYesVote: BigNumber;
    }
  >;

  memberAddressByDelegateKey(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "memberAddressByDelegateKey(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  gracePeriodLength(overrides?: CallOverrides): Promise<BigNumber>;

  "gracePeriodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  abortWindow(overrides?: CallOverrides): Promise<BigNumber>;

  "abortWindow()"(overrides?: CallOverrides): Promise<BigNumber>;

  getProposalQueueLength(overrides?: CallOverrides): Promise<BigNumber>;

  "getProposalQueueLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  summoningTime(overrides?: CallOverrides): Promise<BigNumber>;

  "summoningTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  votingPeriodLength(overrides?: CallOverrides): Promise<BigNumber>;

  "votingPeriodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  ragequit(
    sharesToBurn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "ragequit(uint256)"(
    sharesToBurn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposalDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  "proposalDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

  hasVotingPeriodExpired(
    startingPeriod: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasVotingPeriodExpired(uint256)"(
    startingPeriod: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  submitProposal(
    applicant: string,
    tokenTribute: BigNumberish,
    sharesRequested: BigNumberish,
    details: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "submitProposal(address,uint256,uint256,string)"(
    applicant: string,
    tokenTribute: BigNumberish,
    sharesRequested: BigNumberish,
    details: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitVote(
    proposalIndex: BigNumberish,
    uintVote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "submitVote(uint256,uint8)"(
    proposalIndex: BigNumberish,
    uintVote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  canRagequit(
    highestIndexYesVote: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "canRagequit(uint256)"(
    highestIndexYesVote: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  guildBank(overrides?: CallOverrides): Promise<string>;

  "guildBank()"(overrides?: CallOverrides): Promise<string>;

  dilutionBound(overrides?: CallOverrides): Promise<BigNumber>;

  "dilutionBound()"(overrides?: CallOverrides): Promise<BigNumber>;

  periodDuration(overrides?: CallOverrides): Promise<BigNumber>;

  "periodDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

  approvedToken(overrides?: CallOverrides): Promise<string>;

  "approvedToken()"(overrides?: CallOverrides): Promise<string>;

  abort(
    proposalIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "abort(uint256)"(
    proposalIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  processProposal(
    proposalIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "processProposal(uint256)"(
    proposalIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    processingReward(overrides?: CallOverrides): Promise<BigNumber>;

    "processingReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMemberProposalVote(
      memberAddress: string,
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    "getMemberProposalVote(address,uint256)"(
      memberAddress: string,
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getCurrentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    members(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, BigNumber] & {
        delegateKey: string;
        shares: BigNumber;
        exists: boolean;
        highestIndexYesVote: BigNumber;
      }
    >;

    "members(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, BigNumber] & {
        delegateKey: string;
        shares: BigNumber;
        exists: boolean;
        highestIndexYesVote: BigNumber;
      }
    >;

    totalSharesRequested(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSharesRequested()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateDelegateKey(
      newDelegateKey: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateDelegateKey(address)"(
      newDelegateKey: string,
      overrides?: CallOverrides
    ): Promise<void>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    "totalShares()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalQueue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        BigNumber,
        string,
        BigNumber
      ] & {
        proposer: string;
        applicant: string;
        sharesRequested: BigNumber;
        startingPeriod: BigNumber;
        yesVotes: BigNumber;
        noVotes: BigNumber;
        processed: boolean;
        didPass: boolean;
        aborted: boolean;
        tokenTribute: BigNumber;
        details: string;
        maxTotalSharesAtYesVote: BigNumber;
      }
    >;

    "proposalQueue(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        BigNumber,
        string,
        BigNumber
      ] & {
        proposer: string;
        applicant: string;
        sharesRequested: BigNumber;
        startingPeriod: BigNumber;
        yesVotes: BigNumber;
        noVotes: BigNumber;
        processed: boolean;
        didPass: boolean;
        aborted: boolean;
        tokenTribute: BigNumber;
        details: string;
        maxTotalSharesAtYesVote: BigNumber;
      }
    >;

    memberAddressByDelegateKey(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "memberAddressByDelegateKey(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    gracePeriodLength(overrides?: CallOverrides): Promise<BigNumber>;

    "gracePeriodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    abortWindow(overrides?: CallOverrides): Promise<BigNumber>;

    "abortWindow()"(overrides?: CallOverrides): Promise<BigNumber>;

    getProposalQueueLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getProposalQueueLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    summoningTime(overrides?: CallOverrides): Promise<BigNumber>;

    "summoningTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    votingPeriodLength(overrides?: CallOverrides): Promise<BigNumber>;

    "votingPeriodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    ragequit(
      sharesToBurn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "ragequit(uint256)"(
      sharesToBurn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    proposalDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

    hasVotingPeriodExpired(
      startingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasVotingPeriodExpired(uint256)"(
      startingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    submitProposal(
      applicant: string,
      tokenTribute: BigNumberish,
      sharesRequested: BigNumberish,
      details: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "submitProposal(address,uint256,uint256,string)"(
      applicant: string,
      tokenTribute: BigNumberish,
      sharesRequested: BigNumberish,
      details: string,
      overrides?: CallOverrides
    ): Promise<void>;

    submitVote(
      proposalIndex: BigNumberish,
      uintVote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "submitVote(uint256,uint8)"(
      proposalIndex: BigNumberish,
      uintVote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    canRagequit(
      highestIndexYesVote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canRagequit(uint256)"(
      highestIndexYesVote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    guildBank(overrides?: CallOverrides): Promise<string>;

    "guildBank()"(overrides?: CallOverrides): Promise<string>;

    dilutionBound(overrides?: CallOverrides): Promise<BigNumber>;

    "dilutionBound()"(overrides?: CallOverrides): Promise<BigNumber>;

    periodDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "periodDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    approvedToken(overrides?: CallOverrides): Promise<string>;

    "approvedToken()"(overrides?: CallOverrides): Promise<string>;

    abort(
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "abort(uint256)"(
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    processProposal(
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "processProposal(uint256)"(
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    SubmitProposal(
      proposalIndex: null,
      delegateKey: string | null,
      memberAddress: string | null,
      applicant: string | null,
      tokenTribute: null,
      sharesRequested: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, BigNumber, BigNumber],
      {
        proposalIndex: BigNumber;
        delegateKey: string;
        memberAddress: string;
        applicant: string;
        tokenTribute: BigNumber;
        sharesRequested: BigNumber;
      }
    >;

    SubmitVote(
      proposalIndex: BigNumberish | null,
      delegateKey: string | null,
      memberAddress: string | null,
      uintVote: null
    ): TypedEventFilter<
      [BigNumber, string, string, number],
      {
        proposalIndex: BigNumber;
        delegateKey: string;
        memberAddress: string;
        uintVote: number;
      }
    >;

    ProcessProposal(
      proposalIndex: BigNumberish | null,
      applicant: string | null,
      memberAddress: string | null,
      tokenTribute: null,
      sharesRequested: null,
      didPass: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, BigNumber, boolean],
      {
        proposalIndex: BigNumber;
        applicant: string;
        memberAddress: string;
        tokenTribute: BigNumber;
        sharesRequested: BigNumber;
        didPass: boolean;
      }
    >;

    Ragequit(
      memberAddress: string | null,
      sharesToBurn: null
    ): TypedEventFilter<
      [string, BigNumber],
      { memberAddress: string; sharesToBurn: BigNumber }
    >;

    Abort(
      proposalIndex: BigNumberish | null,
      applicantAddress: null
    ): TypedEventFilter<
      [BigNumber, string],
      { proposalIndex: BigNumber; applicantAddress: string }
    >;

    UpdateDelegateKey(
      memberAddress: string | null,
      newDelegateKey: null
    ): TypedEventFilter<
      [string, string],
      { memberAddress: string; newDelegateKey: string }
    >;

    SummonComplete(
      summoner: string | null,
      shares: null
    ): TypedEventFilter<
      [string, BigNumber],
      { summoner: string; shares: BigNumber }
    >;
  };

  estimateGas: {
    processingReward(overrides?: CallOverrides): Promise<BigNumber>;

    "processingReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMemberProposalVote(
      memberAddress: string,
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMemberProposalVote(address,uint256)"(
      memberAddress: string,
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    members(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "members(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSharesRequested(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSharesRequested()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateDelegateKey(
      newDelegateKey: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateDelegateKey(address)"(
      newDelegateKey: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    "totalShares()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalQueue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proposalQueue(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    memberAddressByDelegateKey(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "memberAddressByDelegateKey(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gracePeriodLength(overrides?: CallOverrides): Promise<BigNumber>;

    "gracePeriodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    abortWindow(overrides?: CallOverrides): Promise<BigNumber>;

    "abortWindow()"(overrides?: CallOverrides): Promise<BigNumber>;

    getProposalQueueLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getProposalQueueLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    summoningTime(overrides?: CallOverrides): Promise<BigNumber>;

    "summoningTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    votingPeriodLength(overrides?: CallOverrides): Promise<BigNumber>;

    "votingPeriodLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    ragequit(
      sharesToBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "ragequit(uint256)"(
      sharesToBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposalDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

    hasVotingPeriodExpired(
      startingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasVotingPeriodExpired(uint256)"(
      startingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitProposal(
      applicant: string,
      tokenTribute: BigNumberish,
      sharesRequested: BigNumberish,
      details: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "submitProposal(address,uint256,uint256,string)"(
      applicant: string,
      tokenTribute: BigNumberish,
      sharesRequested: BigNumberish,
      details: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitVote(
      proposalIndex: BigNumberish,
      uintVote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "submitVote(uint256,uint8)"(
      proposalIndex: BigNumberish,
      uintVote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    canRagequit(
      highestIndexYesVote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canRagequit(uint256)"(
      highestIndexYesVote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    guildBank(overrides?: CallOverrides): Promise<BigNumber>;

    "guildBank()"(overrides?: CallOverrides): Promise<BigNumber>;

    dilutionBound(overrides?: CallOverrides): Promise<BigNumber>;

    "dilutionBound()"(overrides?: CallOverrides): Promise<BigNumber>;

    periodDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "periodDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    approvedToken(overrides?: CallOverrides): Promise<BigNumber>;

    "approvedToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    abort(
      proposalIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "abort(uint256)"(
      proposalIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    processProposal(
      proposalIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "processProposal(uint256)"(
      proposalIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    processingReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "processingReward()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMemberProposalVote(
      memberAddress: string,
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMemberProposalVote(address,uint256)"(
      memberAddress: string,
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getCurrentPeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    members(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "members(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSharesRequested(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalSharesRequested()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateDelegateKey(
      newDelegateKey: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateDelegateKey(address)"(
      newDelegateKey: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalShares()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalQueue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposalQueue(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    memberAddressByDelegateKey(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "memberAddressByDelegateKey(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gracePeriodLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gracePeriodLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    abortWindow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "abortWindow()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProposalQueueLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProposalQueueLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    summoningTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "summoningTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingPeriodLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "votingPeriodLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ragequit(
      sharesToBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "ragequit(uint256)"(
      sharesToBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposalDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proposalDeposit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasVotingPeriodExpired(
      startingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasVotingPeriodExpired(uint256)"(
      startingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submitProposal(
      applicant: string,
      tokenTribute: BigNumberish,
      sharesRequested: BigNumberish,
      details: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "submitProposal(address,uint256,uint256,string)"(
      applicant: string,
      tokenTribute: BigNumberish,
      sharesRequested: BigNumberish,
      details: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitVote(
      proposalIndex: BigNumberish,
      uintVote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "submitVote(uint256,uint8)"(
      proposalIndex: BigNumberish,
      uintVote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    canRagequit(
      highestIndexYesVote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canRagequit(uint256)"(
      highestIndexYesVote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    guildBank(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "guildBank()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dilutionBound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dilutionBound()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "periodDuration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approvedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "approvedToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    abort(
      proposalIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "abort(uint256)"(
      proposalIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    processProposal(
      proposalIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "processProposal(uint256)"(
      proposalIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
