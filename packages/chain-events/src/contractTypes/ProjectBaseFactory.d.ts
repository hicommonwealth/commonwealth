/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ProjectBaseFactoryInterface extends ethers.utils.Interface {
  functions: {
    "addAcceptedTokens(address[])": FunctionFragment;
    "getProtocolData()": FunctionFragment;
    "isAcceptedToken(address)": FunctionFragment;
    "numProjects()": FunctionFragment;
    "owner()": FunctionFragment;
    "projectImp()": FunctionFragment;
    "projects(uint32)": FunctionFragment;
    "protocolData()": FunctionFragment;
    "setFeeTo(address)": FunctionFragment;
    "setProjectImpl(address)": FunctionFragment;
    "setProtocolFee(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addAcceptedTokens",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAcceptedToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "numProjects",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "projectImp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projects",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolData",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setFeeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setProjectImpl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFee",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAcceptedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAcceptedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numProjects",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "projectImp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProjectImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFee",
    data: BytesLike
  ): Result;

  events: {
    "ProjectCreated(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProjectCreated"): EventFragment;
}

export class ProjectBaseFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ProjectBaseFactoryInterface;

  functions: {
    addAcceptedTokens(
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addAcceptedTokens(address[])"(
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getProtocolData(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, string] & {
          protocolFee: BigNumber;
          maxFee: BigNumber;
          feeTo: string;
        }
      ]
    >;

    "getProtocolData()"(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, string] & {
          protocolFee: BigNumber;
          maxFee: BigNumber;
          feeTo: string;
        }
      ]
    >;

    isAcceptedToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isAcceptedToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    numProjects(overrides?: CallOverrides): Promise<[number]>;

    "numProjects()"(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    projectImp(overrides?: CallOverrides): Promise<[string]>;

    "projectImp()"(overrides?: CallOverrides): Promise<[string]>;

    projects(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "projects(uint32)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    protocolData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        protocolFee: BigNumber;
        maxFee: BigNumber;
        feeTo: string;
      }
    >;

    "protocolData()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        protocolFee: BigNumber;
        maxFee: BigNumber;
        feeTo: string;
      }
    >;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setFeeTo(address)"(
      _feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProjectImpl(
      _projectImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setProjectImpl(address)"(
      _projectImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProtocolFee(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setProtocolFee(uint256)"(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addAcceptedTokens(
    _tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addAcceptedTokens(address[])"(
    _tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getProtocolData(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      protocolFee: BigNumber;
      maxFee: BigNumber;
      feeTo: string;
    }
  >;

  "getProtocolData()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      protocolFee: BigNumber;
      maxFee: BigNumber;
      feeTo: string;
    }
  >;

  isAcceptedToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "isAcceptedToken(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  numProjects(overrides?: CallOverrides): Promise<number>;

  "numProjects()"(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  projectImp(overrides?: CallOverrides): Promise<string>;

  "projectImp()"(overrides?: CallOverrides): Promise<string>;

  projects(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "projects(uint32)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  protocolData(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      protocolFee: BigNumber;
      maxFee: BigNumber;
      feeTo: string;
    }
  >;

  "protocolData()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      protocolFee: BigNumber;
      maxFee: BigNumber;
      feeTo: string;
    }
  >;

  setFeeTo(
    _feeTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setFeeTo(address)"(
    _feeTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProjectImpl(
    _projectImpl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setProjectImpl(address)"(
    _projectImpl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProtocolFee(
    _protocolFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setProtocolFee(uint256)"(
    _protocolFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAcceptedTokens(
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addAcceptedTokens(address[])"(
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    getProtocolData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        protocolFee: BigNumber;
        maxFee: BigNumber;
        feeTo: string;
      }
    >;

    "getProtocolData()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        protocolFee: BigNumber;
        maxFee: BigNumber;
        feeTo: string;
      }
    >;

    isAcceptedToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "isAcceptedToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    numProjects(overrides?: CallOverrides): Promise<number>;

    "numProjects()"(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    projectImp(overrides?: CallOverrides): Promise<string>;

    "projectImp()"(overrides?: CallOverrides): Promise<string>;

    projects(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "projects(uint32)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    protocolData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        protocolFee: BigNumber;
        maxFee: BigNumber;
        feeTo: string;
      }
    >;

    "protocolData()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        protocolFee: BigNumber;
        maxFee: BigNumber;
        feeTo: string;
      }
    >;

    setFeeTo(_feeTo: string, overrides?: CallOverrides): Promise<void>;

    "setFeeTo(address)"(
      _feeTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProjectImpl(
      _projectImpl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setProjectImpl(address)"(
      _projectImpl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFee(
      _protocolFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setProtocolFee(uint256)"(
      _protocolFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ProjectCreated(
      projectIndex: null,
      newProject: null
    ): TypedEventFilter<
      [BigNumber, string],
      { projectIndex: BigNumber; newProject: string }
    >;
  };

  estimateGas: {
    addAcceptedTokens(
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addAcceptedTokens(address[])"(
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getProtocolData(overrides?: CallOverrides): Promise<BigNumber>;

    "getProtocolData()"(overrides?: CallOverrides): Promise<BigNumber>;

    isAcceptedToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAcceptedToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numProjects(overrides?: CallOverrides): Promise<BigNumber>;

    "numProjects()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    projectImp(overrides?: CallOverrides): Promise<BigNumber>;

    "projectImp()"(overrides?: CallOverrides): Promise<BigNumber>;

    projects(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "projects(uint32)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolData(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolData()"(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setFeeTo(address)"(
      _feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProjectImpl(
      _projectImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setProjectImpl(address)"(
      _projectImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProtocolFee(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setProtocolFee(uint256)"(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAcceptedTokens(
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addAcceptedTokens(address[])"(
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getProtocolData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getProtocolData()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAcceptedToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAcceptedToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numProjects(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "numProjects()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    projectImp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "projectImp()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    projects(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "projects(uint32)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "protocolData()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setFeeTo(address)"(
      _feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProjectImpl(
      _projectImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setProjectImpl(address)"(
      _projectImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFee(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setProtocolFee(uint256)"(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
