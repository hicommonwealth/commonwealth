'use strict';

module.exports = {
  up: async (queryInterface, Sequelize) => {
    return queryInterface.sequelize.transaction((transaction) => {
      return Promise.all([
        // adds UNIQUE constraint to match the schema generated by sequelize.sync
        queryInterface.addConstraint('Collaborations', {
          name: 'Collaborations_address_id_thread_id_key',
          type: 'unique',
          fields: ['address_id', 'thread_id'],
          transaction,
        }),
        // this column was deprecated long ago
        queryInterface.removeColumn('Communities', 'ce_verbose', {
          transaction,
        }),
        // abi should never be null
        queryInterface.changeColumn(
          'ContractAbis',
          'abi',
          {
            type: Sequelize.JSONB,
            allowNull: false,
          },
          { transaction },
        ),
        // poll_id should never be null
        queryInterface.changeColumn(
          'Votes',
          'poll_id',
          {
            type: Sequelize.INTEGER,
            allowNull: false,
          },
          { transaction },
        ),
      ]);
    });
  },

  down: async (queryInterface, Sequelize) => {
    return queryInterface.sequelize.transaction(async (transaction) => {
      return Promise.all([
        queryInterface.removeConstraint(
          'Collaborations',
          'Collaborations_address_id_thread_id_key',
          { transaction },
        ),
        queryInterface.addColumn('Communities', 'ce_verbose', {
          type: Sequelize.BOOLEAN,
          allowNull: true,
        }),
        queryInterface.changeColumn(
          'ContractAbis',
          'abi',
          {
            type: Sequelize.JSONB,
            allowNull: true,
          },
          { transaction },
        ),
        queryInterface.changeColumn(
          'Votes',
          'poll_id',
          {
            type: Sequelize.INTEGER,
            allowNull: true,
          },
          { transaction },
        ),
      ]);
    });
  },
};
