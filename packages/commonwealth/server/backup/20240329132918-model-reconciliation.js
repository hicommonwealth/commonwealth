'use strict';

module.exports = {
  up: async (queryInterface, Sequelize) => {
    return queryInterface.sequelize.transaction((transaction) => {
      return Promise.all([
        // adds UNIQUE constraint to match the schema generated by sequelize.sync
        queryInterface.addConstraint('Collaborations', {
          name: 'Collaborations_address_id_thread_id_key',
          type: 'unique',
          fields: ['address_id', 'thread_id'],
          transaction,
        }),
        // this column was deprecated long ago
        queryInterface.removeColumn('Communities', 'ce_verbose', {
          transaction,
        }),
        // abi should never be null
        queryInterface.changeColumn(
          'ContractAbis',
          'abi',
          {
            type: Sequelize.JSONB,
            allowNull: false,
          },
          { transaction },
        ),
        // clean votes without polls
        queryInterface.sequelize.query(
          `DELETE FROM "Votes" WHERE poll_id IS NULL`,
          { transaction },
        ),
        // ensure cascade deletes
        queryInterface.sequelize.query(
          `
          ALTER TABLE "Votes" DROP CONSTRAINT IF EXISTS "Votes_poll_id_fkey",
          ADD CONSTRAINT "Votes_poll_id_fkey" FOREIGN KEY (poll_id) REFERENCES "Polls"(id) 
          ON UPDATE NO ACTION
          ON DELETE CASCADE;`,
          { transaction },
        ),
        // poll_id should never be null
        queryInterface.changeColumn(
          'Votes',
          'poll_id',
          {
            type: Sequelize.INTEGER,
            allowNull: false,
          },
          { transaction },
        ),
        // balance_type should never be null
        queryInterface.changeColumn(
          'ChainNodes',
          'balance_type',
          {
            type: Sequelize.STRING,
            allowNull: false,
          },
          { transaction },
        ),
        // stages_enabled should never be null
        queryInterface.changeColumn(
          'Communities',
          'stages_enabled',
          {
            type: Sequelize.BOOLEAN,
            allowNull: false,
            defaultValue: true,
          },
          { transaction },
        ),
        // custom_staged should never be null
        queryInterface.changeColumn(
          'Communities',
          'custom_stages',
          {
            type: Sequelize.ARRAY(Sequelize.TEXT),
            allowNull: false,
            defaultValue: [],
          },
          { transaction },
        ),
        // vote_weight should never be null
        queryInterface.changeColumn(
          'CommunityStakes',
          'vote_weight',
          {
            type: Sequelize.INTEGER,
            allowNull: false,
          },
          { transaction },
        ),
        // kind should never be null
        queryInterface.changeColumn(
          'Threads',
          'kind',
          {
            type: Sequelize.STRING,
            allowNull: false,
          },
          { transaction },
        ),
        // disableRichText should never be null
        queryInterface.changeColumn(
          'Users',
          'disableRichText',
          {
            type: Sequelize.BOOLEAN,
            allowNull: false,
            defaultValue: false,
          },
          { transaction },
        ),
        // ghost_address should never be null
        queryInterface.changeColumn(
          'Addresses',
          'ghost_address',
          {
            type: Sequelize.BOOLEAN,
            allowNull: false,
            defaultValue: false,
          },
          { transaction },
        ),
      ]);
    });
  },

  down: async (queryInterface, Sequelize) => {
    return queryInterface.sequelize.transaction((transaction) => {
      return Promise.all([
        queryInterface.removeConstraint(
          'Collaborations',
          'Collaborations_address_id_thread_id_key',
          { transaction },
        ),
        queryInterface.addColumn(
          'Communities',
          'ce_verbose',
          {
            type: Sequelize.BOOLEAN,
            allowNull: true,
          },
          { transaction },
        ),
        queryInterface.changeColumn(
          'ContractAbis',
          'abi',
          {
            type: Sequelize.JSONB,
            allowNull: true,
          },
          { transaction },
        ),
        queryInterface.sequelize.query(
          `
          ALTER TABLE "Votes" DROP CONSTRAINT IF EXISTS "Votes_poll_id_fkey",
          ADD CONSTRAINT "Votes_poll_id_fkey" FOREIGN KEY (poll_id) REFERENCES "Polls"(id) 
          ON UPDATE NO ACTION
          ON DELETE NO ACTION;`,
          { transaction },
        ),
        queryInterface.changeColumn(
          'Votes',
          'poll_id',
          {
            type: Sequelize.INTEGER,
            allowNull: true,
          },
          { transaction },
        ),
        queryInterface.changeColumn(
          'ChainNodes',
          'balance_type',
          {
            type: Sequelize.STRING,
            allowNull: true,
          },
          { transaction },
        ),
        queryInterface.changeColumn(
          'Communities',
          'stages_enabled',
          {
            type: Sequelize.BOOLEAN,
            allowNull: true,
            defaultValue: true,
          },
          { transaction },
        ),
        queryInterface.changeColumn(
          'Communities',
          'custom_stages',
          {
            type: Sequelize.ARRAY(Sequelize.TEXT),
            allowNull: true,
            defaultValue: [],
          },
          { transaction },
        ),
        queryInterface.changeColumn(
          'CommunityStakes',
          'vote_weight',
          {
            type: Sequelize.INTEGER,
            allowNull: true,
          },
          { transaction },
        ),
        queryInterface.changeColumn(
          'Threads',
          'kind',
          {
            type: Sequelize.STRING,
            allowNull: true,
          },
          { transaction },
        ),
        queryInterface.changeColumn(
          'Users',
          'disableRichText',
          {
            type: Sequelize.BOOLEAN,
            allowNull: true,
            defaultValue: false,
          },
          { transaction },
        ),
        queryInterface.changeColumn(
          'Addresses',
          'ghost_address',
          {
            type: Sequelize.BOOLEAN,
            allowNull: true,
            defaultValue: false,
          },
          { transaction },
        ),
      ]);
    });
  },
};
